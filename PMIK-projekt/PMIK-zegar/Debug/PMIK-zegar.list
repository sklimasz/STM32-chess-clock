
PMIK-zegar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c18  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08006cd8  08006cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800713c  0800713c  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  0800713c  0800713c  0001713c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007144  08007144  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007144  08007144  00017144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007148  08007148  00017148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0800714c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000134  08007280  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08007280  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001194c  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a4  00000000  00000000  00031aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00034450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  00035380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ffc  00000000  00000000  00036198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c8a  00000000  00000000  0004d194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f60  00000000  00000000  0005fe1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7d7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e0  00000000  00000000  000e7dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000134 	.word	0x20000134
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006cc0 	.word	0x08006cc0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000138 	.word	0x20000138
 8000104:	08006cc0 	.word	0x08006cc0

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_uldivmod>:
 800042c:	2b00      	cmp	r3, #0
 800042e:	d111      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000430:	2a00      	cmp	r2, #0
 8000432:	d10f      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000434:	2900      	cmp	r1, #0
 8000436:	d100      	bne.n	800043a <__aeabi_uldivmod+0xe>
 8000438:	2800      	cmp	r0, #0
 800043a:	d002      	beq.n	8000442 <__aeabi_uldivmod+0x16>
 800043c:	2100      	movs	r1, #0
 800043e:	43c9      	mvns	r1, r1
 8000440:	0008      	movs	r0, r1
 8000442:	b407      	push	{r0, r1, r2}
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <__aeabi_uldivmod+0x24>)
 8000446:	a102      	add	r1, pc, #8	; (adr r1, 8000450 <__aeabi_uldivmod+0x24>)
 8000448:	1840      	adds	r0, r0, r1
 800044a:	9002      	str	r0, [sp, #8]
 800044c:	bd03      	pop	{r0, r1, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	ffffffd9 	.word	0xffffffd9
 8000454:	b403      	push	{r0, r1}
 8000456:	4668      	mov	r0, sp
 8000458:	b501      	push	{r0, lr}
 800045a:	9802      	ldr	r0, [sp, #8]
 800045c:	f000 f834 	bl	80004c8 <__udivmoddi4>
 8000460:	9b01      	ldr	r3, [sp, #4]
 8000462:	469e      	mov	lr, r3
 8000464:	b002      	add	sp, #8
 8000466:	bc0c      	pop	{r2, r3}
 8000468:	4770      	bx	lr
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_lmul>:
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	46ce      	mov	lr, r9
 8000470:	4647      	mov	r7, r8
 8000472:	b580      	push	{r7, lr}
 8000474:	0007      	movs	r7, r0
 8000476:	4699      	mov	r9, r3
 8000478:	0c3b      	lsrs	r3, r7, #16
 800047a:	469c      	mov	ip, r3
 800047c:	0413      	lsls	r3, r2, #16
 800047e:	0c1b      	lsrs	r3, r3, #16
 8000480:	001d      	movs	r5, r3
 8000482:	000e      	movs	r6, r1
 8000484:	4661      	mov	r1, ip
 8000486:	0400      	lsls	r0, r0, #16
 8000488:	0c14      	lsrs	r4, r2, #16
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	4345      	muls	r5, r0
 800048e:	434b      	muls	r3, r1
 8000490:	4360      	muls	r0, r4
 8000492:	4361      	muls	r1, r4
 8000494:	18c0      	adds	r0, r0, r3
 8000496:	0c2c      	lsrs	r4, r5, #16
 8000498:	1820      	adds	r0, r4, r0
 800049a:	468c      	mov	ip, r1
 800049c:	4283      	cmp	r3, r0
 800049e:	d903      	bls.n	80004a8 <__aeabi_lmul+0x3c>
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	025b      	lsls	r3, r3, #9
 80004a4:	4698      	mov	r8, r3
 80004a6:	44c4      	add	ip, r8
 80004a8:	4649      	mov	r1, r9
 80004aa:	4379      	muls	r1, r7
 80004ac:	4372      	muls	r2, r6
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	4463      	add	r3, ip
 80004b2:	042d      	lsls	r5, r5, #16
 80004b4:	0c2d      	lsrs	r5, r5, #16
 80004b6:	18c9      	adds	r1, r1, r3
 80004b8:	0400      	lsls	r0, r0, #16
 80004ba:	1940      	adds	r0, r0, r5
 80004bc:	1889      	adds	r1, r1, r2
 80004be:	bcc0      	pop	{r6, r7}
 80004c0:	46b9      	mov	r9, r7
 80004c2:	46b0      	mov	r8, r6
 80004c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__udivmoddi4>:
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ca:	4657      	mov	r7, sl
 80004cc:	464e      	mov	r6, r9
 80004ce:	4645      	mov	r5, r8
 80004d0:	46de      	mov	lr, fp
 80004d2:	b5e0      	push	{r5, r6, r7, lr}
 80004d4:	0004      	movs	r4, r0
 80004d6:	000d      	movs	r5, r1
 80004d8:	4692      	mov	sl, r2
 80004da:	4699      	mov	r9, r3
 80004dc:	b083      	sub	sp, #12
 80004de:	428b      	cmp	r3, r1
 80004e0:	d830      	bhi.n	8000544 <__udivmoddi4+0x7c>
 80004e2:	d02d      	beq.n	8000540 <__udivmoddi4+0x78>
 80004e4:	4649      	mov	r1, r9
 80004e6:	4650      	mov	r0, sl
 80004e8:	f000 f8ba 	bl	8000660 <__clzdi2>
 80004ec:	0029      	movs	r1, r5
 80004ee:	0006      	movs	r6, r0
 80004f0:	0020      	movs	r0, r4
 80004f2:	f000 f8b5 	bl	8000660 <__clzdi2>
 80004f6:	1a33      	subs	r3, r6, r0
 80004f8:	4698      	mov	r8, r3
 80004fa:	3b20      	subs	r3, #32
 80004fc:	469b      	mov	fp, r3
 80004fe:	d433      	bmi.n	8000568 <__udivmoddi4+0xa0>
 8000500:	465a      	mov	r2, fp
 8000502:	4653      	mov	r3, sl
 8000504:	4093      	lsls	r3, r2
 8000506:	4642      	mov	r2, r8
 8000508:	001f      	movs	r7, r3
 800050a:	4653      	mov	r3, sl
 800050c:	4093      	lsls	r3, r2
 800050e:	001e      	movs	r6, r3
 8000510:	42af      	cmp	r7, r5
 8000512:	d83a      	bhi.n	800058a <__udivmoddi4+0xc2>
 8000514:	42af      	cmp	r7, r5
 8000516:	d100      	bne.n	800051a <__udivmoddi4+0x52>
 8000518:	e078      	b.n	800060c <__udivmoddi4+0x144>
 800051a:	465b      	mov	r3, fp
 800051c:	1ba4      	subs	r4, r4, r6
 800051e:	41bd      	sbcs	r5, r7
 8000520:	2b00      	cmp	r3, #0
 8000522:	da00      	bge.n	8000526 <__udivmoddi4+0x5e>
 8000524:	e075      	b.n	8000612 <__udivmoddi4+0x14a>
 8000526:	2200      	movs	r2, #0
 8000528:	2300      	movs	r3, #0
 800052a:	9200      	str	r2, [sp, #0]
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2301      	movs	r3, #1
 8000530:	465a      	mov	r2, fp
 8000532:	4093      	lsls	r3, r2
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	2301      	movs	r3, #1
 8000538:	4642      	mov	r2, r8
 800053a:	4093      	lsls	r3, r2
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	e028      	b.n	8000592 <__udivmoddi4+0xca>
 8000540:	4282      	cmp	r2, r0
 8000542:	d9cf      	bls.n	80004e4 <__udivmoddi4+0x1c>
 8000544:	2200      	movs	r2, #0
 8000546:	2300      	movs	r3, #0
 8000548:	9200      	str	r2, [sp, #0]
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <__udivmoddi4+0x8e>
 8000552:	601c      	str	r4, [r3, #0]
 8000554:	605d      	str	r5, [r3, #4]
 8000556:	9800      	ldr	r0, [sp, #0]
 8000558:	9901      	ldr	r1, [sp, #4]
 800055a:	b003      	add	sp, #12
 800055c:	bcf0      	pop	{r4, r5, r6, r7}
 800055e:	46bb      	mov	fp, r7
 8000560:	46b2      	mov	sl, r6
 8000562:	46a9      	mov	r9, r5
 8000564:	46a0      	mov	r8, r4
 8000566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000568:	4642      	mov	r2, r8
 800056a:	2320      	movs	r3, #32
 800056c:	1a9b      	subs	r3, r3, r2
 800056e:	4652      	mov	r2, sl
 8000570:	40da      	lsrs	r2, r3
 8000572:	4641      	mov	r1, r8
 8000574:	0013      	movs	r3, r2
 8000576:	464a      	mov	r2, r9
 8000578:	408a      	lsls	r2, r1
 800057a:	0017      	movs	r7, r2
 800057c:	4642      	mov	r2, r8
 800057e:	431f      	orrs	r7, r3
 8000580:	4653      	mov	r3, sl
 8000582:	4093      	lsls	r3, r2
 8000584:	001e      	movs	r6, r3
 8000586:	42af      	cmp	r7, r5
 8000588:	d9c4      	bls.n	8000514 <__udivmoddi4+0x4c>
 800058a:	2200      	movs	r2, #0
 800058c:	2300      	movs	r3, #0
 800058e:	9200      	str	r2, [sp, #0]
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	4643      	mov	r3, r8
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0d9      	beq.n	800054c <__udivmoddi4+0x84>
 8000598:	07fb      	lsls	r3, r7, #31
 800059a:	0872      	lsrs	r2, r6, #1
 800059c:	431a      	orrs	r2, r3
 800059e:	4646      	mov	r6, r8
 80005a0:	087b      	lsrs	r3, r7, #1
 80005a2:	e00e      	b.n	80005c2 <__udivmoddi4+0xfa>
 80005a4:	42ab      	cmp	r3, r5
 80005a6:	d101      	bne.n	80005ac <__udivmoddi4+0xe4>
 80005a8:	42a2      	cmp	r2, r4
 80005aa:	d80c      	bhi.n	80005c6 <__udivmoddi4+0xfe>
 80005ac:	1aa4      	subs	r4, r4, r2
 80005ae:	419d      	sbcs	r5, r3
 80005b0:	2001      	movs	r0, #1
 80005b2:	1924      	adds	r4, r4, r4
 80005b4:	416d      	adcs	r5, r5
 80005b6:	2100      	movs	r1, #0
 80005b8:	3e01      	subs	r6, #1
 80005ba:	1824      	adds	r4, r4, r0
 80005bc:	414d      	adcs	r5, r1
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d006      	beq.n	80005d0 <__udivmoddi4+0x108>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d9ee      	bls.n	80005a4 <__udivmoddi4+0xdc>
 80005c6:	3e01      	subs	r6, #1
 80005c8:	1924      	adds	r4, r4, r4
 80005ca:	416d      	adcs	r5, r5
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d1f8      	bne.n	80005c2 <__udivmoddi4+0xfa>
 80005d0:	9800      	ldr	r0, [sp, #0]
 80005d2:	9901      	ldr	r1, [sp, #4]
 80005d4:	465b      	mov	r3, fp
 80005d6:	1900      	adds	r0, r0, r4
 80005d8:	4169      	adcs	r1, r5
 80005da:	2b00      	cmp	r3, #0
 80005dc:	db24      	blt.n	8000628 <__udivmoddi4+0x160>
 80005de:	002b      	movs	r3, r5
 80005e0:	465a      	mov	r2, fp
 80005e2:	4644      	mov	r4, r8
 80005e4:	40d3      	lsrs	r3, r2
 80005e6:	002a      	movs	r2, r5
 80005e8:	40e2      	lsrs	r2, r4
 80005ea:	001c      	movs	r4, r3
 80005ec:	465b      	mov	r3, fp
 80005ee:	0015      	movs	r5, r2
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	db2a      	blt.n	800064a <__udivmoddi4+0x182>
 80005f4:	0026      	movs	r6, r4
 80005f6:	409e      	lsls	r6, r3
 80005f8:	0033      	movs	r3, r6
 80005fa:	0026      	movs	r6, r4
 80005fc:	4647      	mov	r7, r8
 80005fe:	40be      	lsls	r6, r7
 8000600:	0032      	movs	r2, r6
 8000602:	1a80      	subs	r0, r0, r2
 8000604:	4199      	sbcs	r1, r3
 8000606:	9000      	str	r0, [sp, #0]
 8000608:	9101      	str	r1, [sp, #4]
 800060a:	e79f      	b.n	800054c <__udivmoddi4+0x84>
 800060c:	42a3      	cmp	r3, r4
 800060e:	d8bc      	bhi.n	800058a <__udivmoddi4+0xc2>
 8000610:	e783      	b.n	800051a <__udivmoddi4+0x52>
 8000612:	4642      	mov	r2, r8
 8000614:	2320      	movs	r3, #32
 8000616:	2100      	movs	r1, #0
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	2200      	movs	r2, #0
 800061c:	9100      	str	r1, [sp, #0]
 800061e:	9201      	str	r2, [sp, #4]
 8000620:	2201      	movs	r2, #1
 8000622:	40da      	lsrs	r2, r3
 8000624:	9201      	str	r2, [sp, #4]
 8000626:	e786      	b.n	8000536 <__udivmoddi4+0x6e>
 8000628:	4642      	mov	r2, r8
 800062a:	2320      	movs	r3, #32
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	002a      	movs	r2, r5
 8000630:	4646      	mov	r6, r8
 8000632:	409a      	lsls	r2, r3
 8000634:	0023      	movs	r3, r4
 8000636:	40f3      	lsrs	r3, r6
 8000638:	4644      	mov	r4, r8
 800063a:	4313      	orrs	r3, r2
 800063c:	002a      	movs	r2, r5
 800063e:	40e2      	lsrs	r2, r4
 8000640:	001c      	movs	r4, r3
 8000642:	465b      	mov	r3, fp
 8000644:	0015      	movs	r5, r2
 8000646:	2b00      	cmp	r3, #0
 8000648:	dad4      	bge.n	80005f4 <__udivmoddi4+0x12c>
 800064a:	4642      	mov	r2, r8
 800064c:	002f      	movs	r7, r5
 800064e:	2320      	movs	r3, #32
 8000650:	0026      	movs	r6, r4
 8000652:	4097      	lsls	r7, r2
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	40de      	lsrs	r6, r3
 8000658:	003b      	movs	r3, r7
 800065a:	4333      	orrs	r3, r6
 800065c:	e7cd      	b.n	80005fa <__udivmoddi4+0x132>
 800065e:	46c0      	nop			; (mov r8, r8)

08000660 <__clzdi2>:
 8000660:	b510      	push	{r4, lr}
 8000662:	2900      	cmp	r1, #0
 8000664:	d103      	bne.n	800066e <__clzdi2+0xe>
 8000666:	f000 f807 	bl	8000678 <__clzsi2>
 800066a:	3020      	adds	r0, #32
 800066c:	e002      	b.n	8000674 <__clzdi2+0x14>
 800066e:	0008      	movs	r0, r1
 8000670:	f000 f802 	bl	8000678 <__clzsi2>
 8000674:	bd10      	pop	{r4, pc}
 8000676:	46c0      	nop			; (mov r8, r8)

08000678 <__clzsi2>:
 8000678:	211c      	movs	r1, #28
 800067a:	2301      	movs	r3, #1
 800067c:	041b      	lsls	r3, r3, #16
 800067e:	4298      	cmp	r0, r3
 8000680:	d301      	bcc.n	8000686 <__clzsi2+0xe>
 8000682:	0c00      	lsrs	r0, r0, #16
 8000684:	3910      	subs	r1, #16
 8000686:	0a1b      	lsrs	r3, r3, #8
 8000688:	4298      	cmp	r0, r3
 800068a:	d301      	bcc.n	8000690 <__clzsi2+0x18>
 800068c:	0a00      	lsrs	r0, r0, #8
 800068e:	3908      	subs	r1, #8
 8000690:	091b      	lsrs	r3, r3, #4
 8000692:	4298      	cmp	r0, r3
 8000694:	d301      	bcc.n	800069a <__clzsi2+0x22>
 8000696:	0900      	lsrs	r0, r0, #4
 8000698:	3904      	subs	r1, #4
 800069a:	a202      	add	r2, pc, #8	; (adr r2, 80006a4 <__clzsi2+0x2c>)
 800069c:	5c10      	ldrb	r0, [r2, r0]
 800069e:	1840      	adds	r0, r0, r1
 80006a0:	4770      	bx	lr
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	02020304 	.word	0x02020304
 80006a8:	01010101 	.word	0x01010101
	...

080006b4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	019b      	lsls	r3, r3, #6
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <SELECT+0x20>)
 80006be:	2200      	movs	r2, #0
 80006c0:	0019      	movs	r1, r3
 80006c2:	f002 fab1 	bl	8002c28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80006c6:	2001      	movs	r0, #1
 80006c8:	f002 f82e 	bl	8002728 <HAL_Delay>
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	50000400 	.word	0x50000400

080006d8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	019b      	lsls	r3, r3, #6
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <DESELECT+0x20>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	0019      	movs	r1, r3
 80006e6:	f002 fa9f 	bl	8002c28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f002 f81c 	bl	8002728 <HAL_Delay>
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	50000400 	.word	0x50000400

080006fc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	0002      	movs	r2, r0
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	701a      	strb	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <SPI_TxByte+0x30>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	2202      	movs	r2, #2
 8000712:	4013      	ands	r3, r2
 8000714:	2b02      	cmp	r3, #2
 8000716:	d1f8      	bne.n	800070a <SPI_TxByte+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000718:	1df9      	adds	r1, r7, #7
 800071a:	4804      	ldr	r0, [pc, #16]	; (800072c <SPI_TxByte+0x30>)
 800071c:	2364      	movs	r3, #100	; 0x64
 800071e:	2201      	movs	r2, #1
 8000720:	f003 faf0 	bl	8003d04 <HAL_SPI_Transmit>
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200001b0 	.word	0x200001b0

08000730 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	000a      	movs	r2, r1
 800073a:	1cbb      	adds	r3, r7, #2
 800073c:	801a      	strh	r2, [r3, #0]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <SPI_TxBuffer+0x34>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	2202      	movs	r2, #2
 8000748:	4013      	ands	r3, r2
 800074a:	2b02      	cmp	r3, #2
 800074c:	d1f8      	bne.n	8000740 <SPI_TxBuffer+0x10>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800074e:	1cbb      	adds	r3, r7, #2
 8000750:	881a      	ldrh	r2, [r3, #0]
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	4803      	ldr	r0, [pc, #12]	; (8000764 <SPI_TxBuffer+0x34>)
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	f003 fad4 	bl	8003d04 <HAL_SPI_Transmit>
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b002      	add	sp, #8
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200001b0 	.word	0x200001b0

08000768 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	22ff      	movs	r2, #255	; 0xff
 8000772:	701a      	strb	r2, [r3, #0]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <SPI_RxByte+0x38>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	2202      	movs	r2, #2
 800077e:	4013      	ands	r3, r2
 8000780:	2b02      	cmp	r3, #2
 8000782:	d1f8      	bne.n	8000776 <SPI_RxByte+0xe>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000784:	1dba      	adds	r2, r7, #6
 8000786:	1df9      	adds	r1, r7, #7
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <SPI_RxByte+0x38>)
 800078a:	2364      	movs	r3, #100	; 0x64
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2301      	movs	r3, #1
 8000790:	f003 fc15 	bl	8003fbe <HAL_SPI_TransmitReceive>

	return data;
 8000794:	1dbb      	adds	r3, r7, #6
 8000796:	781b      	ldrb	r3, [r3, #0]
}
 8000798:	0018      	movs	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	b002      	add	sp, #8
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200001b0 	.word	0x200001b0

080007a4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80007ac:	f7ff ffdc 	bl	8000768 <SPI_RxByte>
 80007b0:	0003      	movs	r3, r0
 80007b2:	001a      	movs	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	701a      	strb	r2, [r3, #0]
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b002      	add	sp, #8
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <SD_ReadyWait+0x34>)
 80007c8:	22fa      	movs	r2, #250	; 0xfa
 80007ca:	0052      	lsls	r2, r2, #1
 80007cc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80007ce:	1dfc      	adds	r4, r7, #7
 80007d0:	f7ff ffca 	bl	8000768 <SPI_RxByte>
 80007d4:	0003      	movs	r3, r0
 80007d6:	7023      	strb	r3, [r4, #0]
	} while ((res != 0xFF) && Timer2);
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2bff      	cmp	r3, #255	; 0xff
 80007de:	d003      	beq.n	80007e8 <SD_ReadyWait+0x28>
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <SD_ReadyWait+0x34>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1f2      	bne.n	80007ce <SD_ReadyWait+0xe>

	return res;
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	781b      	ldrb	r3, [r3, #0]
}
 80007ec:	0018      	movs	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b003      	add	sp, #12
 80007f2:	bd90      	pop	{r4, r7, pc}
 80007f4:	20000152 	.word	0x20000152

080007f8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <SD_PowerOn+0x88>)
 8000800:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000802:	f7ff ff69 	bl	80006d8 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	e005      	b.n	8000818 <SD_PowerOn+0x20>
	{
		SPI_TxByte(0xFF);
 800080c:	20ff      	movs	r0, #255	; 0xff
 800080e:	f7ff ff75 	bl	80006fc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	3301      	adds	r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	2b09      	cmp	r3, #9
 800081c:	ddf6      	ble.n	800080c <SD_PowerOn+0x14>
	}

	/* slave select */
	SELECT();
 800081e:	f7ff ff49 	bl	80006b4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000822:	003b      	movs	r3, r7
 8000824:	2240      	movs	r2, #64	; 0x40
 8000826:	701a      	strb	r2, [r3, #0]
	args[1] = 0;
 8000828:	003b      	movs	r3, r7
 800082a:	2200      	movs	r2, #0
 800082c:	705a      	strb	r2, [r3, #1]
	args[2] = 0;
 800082e:	003b      	movs	r3, r7
 8000830:	2200      	movs	r2, #0
 8000832:	709a      	strb	r2, [r3, #2]
	args[3] = 0;
 8000834:	003b      	movs	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	70da      	strb	r2, [r3, #3]
	args[4] = 0;
 800083a:	003b      	movs	r3, r7
 800083c:	2200      	movs	r2, #0
 800083e:	711a      	strb	r2, [r3, #4]
	args[5] = 0x95;		/* CRC */
 8000840:	003b      	movs	r3, r7
 8000842:	2295      	movs	r2, #149	; 0x95
 8000844:	715a      	strb	r2, [r3, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000846:	003b      	movs	r3, r7
 8000848:	2106      	movs	r1, #6
 800084a:	0018      	movs	r0, r3
 800084c:	f7ff ff70 	bl	8000730 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000850:	e002      	b.n	8000858 <SD_PowerOn+0x60>
	{
		cnt--;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	3b01      	subs	r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000858:	f7ff ff86 	bl	8000768 <SPI_RxByte>
 800085c:	0003      	movs	r3, r0
 800085e:	2b01      	cmp	r3, #1
 8000860:	d002      	beq.n	8000868 <SD_PowerOn+0x70>
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1f4      	bne.n	8000852 <SD_PowerOn+0x5a>
	}

	DESELECT();
 8000868:	f7ff ff36 	bl	80006d8 <DESELECT>
	SPI_TxByte(0XFF);
 800086c:	20ff      	movs	r0, #255	; 0xff
 800086e:	f7ff ff45 	bl	80006fc <SPI_TxByte>

	PowerFlag = 1;
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <SD_PowerOn+0x8c>)
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b004      	add	sp, #16
 800087e:	bd80      	pop	{r7, pc}
 8000880:	00001fff 	.word	0x00001fff
 8000884:	20000155 	.word	0x20000155

08000888 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800088c:	4b02      	ldr	r3, [pc, #8]	; (8000898 <SD_PowerOff+0x10>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000155 	.word	0x20000155

0800089c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	return PowerFlag;
 80008a0:	4b02      	ldr	r3, [pc, #8]	; (80008ac <SD_CheckPower+0x10>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
}
 80008a4:	0018      	movs	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	20000155 	.word	0x20000155

080008b0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <SD_RxDataBlock+0x64>)
 80008bc:	22c8      	movs	r2, #200	; 0xc8
 80008be:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80008c0:	250f      	movs	r5, #15
 80008c2:	197c      	adds	r4, r7, r5
 80008c4:	f7ff ff50 	bl	8000768 <SPI_RxByte>
 80008c8:	0003      	movs	r3, r0
 80008ca:	7023      	strb	r3, [r4, #0]
	} while((token == 0xFF) && Timer1);
 80008cc:	197b      	adds	r3, r7, r5
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2bff      	cmp	r3, #255	; 0xff
 80008d2:	d103      	bne.n	80008dc <SD_RxDataBlock+0x2c>
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <SD_RxDataBlock+0x64>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1f1      	bne.n	80008c0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80008dc:	230f      	movs	r3, #15
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2bfe      	cmp	r3, #254	; 0xfe
 80008e4:	d001      	beq.n	80008ea <SD_RxDataBlock+0x3a>
 80008e6:	2300      	movs	r3, #0
 80008e8:	e00f      	b.n	800090a <SD_RxDataBlock+0x5a>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	607a      	str	r2, [r7, #4]
 80008f0:	0018      	movs	r0, r3
 80008f2:	f7ff ff57 	bl	80007a4 <SPI_RxBytePtr>
	} while(len--);
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	603a      	str	r2, [r7, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1f4      	bne.n	80008ea <SD_RxDataBlock+0x3a>

	/* discard CRC */
	SPI_RxByte();
 8000900:	f7ff ff32 	bl	8000768 <SPI_RxByte>
	SPI_RxByte();
 8000904:	f7ff ff30 	bl	8000768 <SPI_RxByte>

	return TRUE;
 8000908:	2301      	movs	r3, #1
}
 800090a:	0018      	movs	r0, r3
 800090c:	46bd      	mov	sp, r7
 800090e:	b004      	add	sp, #16
 8000910:	bdb0      	pop	{r4, r5, r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	20000150 	.word	0x20000150

08000918 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000918:	b5b0      	push	{r4, r5, r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	000a      	movs	r2, r1
 8000922:	1cfb      	adds	r3, r7, #3
 8000924:	701a      	strb	r2, [r3, #0]
	uint8_t resp;
	uint8_t i = 0;
 8000926:	230e      	movs	r3, #14
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800092e:	f7ff ff47 	bl	80007c0 <SD_ReadyWait>
 8000932:	0003      	movs	r3, r0
 8000934:	2bff      	cmp	r3, #255	; 0xff
 8000936:	d001      	beq.n	800093c <SD_TxDataBlock+0x24>
 8000938:	2300      	movs	r3, #0
 800093a:	e03c      	b.n	80009b6 <SD_TxDataBlock+0x9e>

	/* transmit token */
	SPI_TxByte(token);
 800093c:	1cfb      	adds	r3, r7, #3
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff fedb 	bl	80006fc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000946:	1cfb      	adds	r3, r7, #3
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2bfd      	cmp	r3, #253	; 0xfd
 800094c:	d029      	beq.n	80009a2 <SD_TxDataBlock+0x8a>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	009a      	lsls	r2, r3, #2
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	0011      	movs	r1, r2
 8000956:	0018      	movs	r0, r3
 8000958:	f7ff feea 	bl	8000730 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800095c:	f7ff ff04 	bl	8000768 <SPI_RxByte>
		SPI_RxByte();
 8000960:	f7ff ff02 	bl	8000768 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000964:	e011      	b.n	800098a <SD_TxDataBlock+0x72>
		{
			resp = SPI_RxByte();
 8000966:	250f      	movs	r5, #15
 8000968:	197c      	adds	r4, r7, r5
 800096a:	f7ff fefd 	bl	8000768 <SPI_RxByte>
 800096e:	0003      	movs	r3, r0
 8000970:	7023      	strb	r3, [r4, #0]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000972:	197b      	adds	r3, r7, r5
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	221f      	movs	r2, #31
 8000978:	4013      	ands	r3, r2
 800097a:	2b05      	cmp	r3, #5
 800097c:	d00b      	beq.n	8000996 <SD_TxDataBlock+0x7e>
			i++;
 800097e:	210e      	movs	r1, #14
 8000980:	187b      	adds	r3, r7, r1
 8000982:	781a      	ldrb	r2, [r3, #0]
 8000984:	187b      	adds	r3, r7, r1
 8000986:	3201      	adds	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
		while (i <= 64)
 800098a:	230e      	movs	r3, #14
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b40      	cmp	r3, #64	; 0x40
 8000992:	d9e8      	bls.n	8000966 <SD_TxDataBlock+0x4e>
 8000994:	e000      	b.n	8000998 <SD_TxDataBlock+0x80>
			if ((resp & 0x1F) == 0x05) break;
 8000996:	46c0      	nop			; (mov r8, r8)
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	f7ff fee5 	bl	8000768 <SPI_RxByte>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d0fb      	beq.n	800099a <SD_TxDataBlock+0x82>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80009a2:	230f      	movs	r3, #15
 80009a4:	18fb      	adds	r3, r7, r3
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	221f      	movs	r2, #31
 80009aa:	4013      	ands	r3, r2
 80009ac:	2b05      	cmp	r3, #5
 80009ae:	d101      	bne.n	80009b4 <SD_TxDataBlock+0x9c>
 80009b0:	2301      	movs	r3, #1
 80009b2:	e000      	b.n	80009b6 <SD_TxDataBlock+0x9e>

	return FALSE;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	0018      	movs	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b004      	add	sp, #16
 80009bc:	bdb0      	pop	{r4, r5, r7, pc}

080009be <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80009be:	b5b0      	push	{r4, r5, r7, lr}
 80009c0:	b084      	sub	sp, #16
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	0002      	movs	r2, r0
 80009c6:	6039      	str	r1, [r7, #0]
 80009c8:	1dfb      	adds	r3, r7, #7
 80009ca:	701a      	strb	r2, [r3, #0]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80009cc:	f7ff fef8 	bl	80007c0 <SD_ReadyWait>
 80009d0:	0003      	movs	r3, r0
 80009d2:	2bff      	cmp	r3, #255	; 0xff
 80009d4:	d001      	beq.n	80009da <SD_SendCmd+0x1c>
 80009d6:	23ff      	movs	r3, #255	; 0xff
 80009d8:	e059      	b.n	8000a8e <SD_SendCmd+0xd0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	0018      	movs	r0, r3
 80009e0:	f7ff fe8c 	bl	80006fc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	0e1b      	lsrs	r3, r3, #24
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	0018      	movs	r0, r3
 80009ec:	f7ff fe86 	bl	80006fc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	0c1b      	lsrs	r3, r3, #16
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff fe80 	bl	80006fc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	0a1b      	lsrs	r3, r3, #8
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	0018      	movs	r0, r3
 8000a04:	f7ff fe7a 	bl	80006fc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff fe75 	bl	80006fc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b40      	cmp	r3, #64	; 0x40
 8000a18:	d104      	bne.n	8000a24 <SD_SendCmd+0x66>
 8000a1a:	230f      	movs	r3, #15
 8000a1c:	18fb      	adds	r3, r7, r3
 8000a1e:	2295      	movs	r2, #149	; 0x95
 8000a20:	701a      	strb	r2, [r3, #0]
 8000a22:	e00c      	b.n	8000a3e <SD_SendCmd+0x80>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b48      	cmp	r3, #72	; 0x48
 8000a2a:	d104      	bne.n	8000a36 <SD_SendCmd+0x78>
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	2287      	movs	r2, #135	; 0x87
 8000a32:	701a      	strb	r2, [r3, #0]
 8000a34:	e003      	b.n	8000a3e <SD_SendCmd+0x80>
	else crc = 1;
 8000a36:	230f      	movs	r3, #15
 8000a38:	18fb      	adds	r3, r7, r3
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000a3e:	230f      	movs	r3, #15
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff fe59 	bl	80006fc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b4c      	cmp	r3, #76	; 0x4c
 8000a50:	d101      	bne.n	8000a56 <SD_SendCmd+0x98>
 8000a52:	f7ff fe89 	bl	8000768 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000a56:	230e      	movs	r3, #14
 8000a58:	18fb      	adds	r3, r7, r3
 8000a5a:	220a      	movs	r2, #10
 8000a5c:	701a      	strb	r2, [r3, #0]
	do {
		res = SPI_RxByte();
 8000a5e:	250d      	movs	r5, #13
 8000a60:	197c      	adds	r4, r7, r5
 8000a62:	f7ff fe81 	bl	8000768 <SPI_RxByte>
 8000a66:	0003      	movs	r3, r0
 8000a68:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8000a6a:	197b      	adds	r3, r7, r5
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b25b      	sxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	da09      	bge.n	8000a88 <SD_SendCmd+0xca>
 8000a74:	210e      	movs	r1, #14
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	187a      	adds	r2, r7, r1
 8000a7a:	7812      	ldrb	r2, [r2, #0]
 8000a7c:	3a01      	subs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1ea      	bne.n	8000a5e <SD_SendCmd+0xa0>

	return res;
 8000a88:	230d      	movs	r3, #13
 8000a8a:	18fb      	adds	r3, r7, r3
 8000a8c:	781b      	ldrb	r3, [r3, #0]
}
 8000a8e:	0018      	movs	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b004      	add	sp, #16
 8000a94:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000a98 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000a98:	b5b0      	push	{r4, r5, r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	0002      	movs	r2, r0
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	701a      	strb	r2, [r3, #0]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SD_disk_initialize+0x18>
 8000aac:	2301      	movs	r3, #1
 8000aae:	e0f2      	b.n	8000c96 <SD_disk_initialize+0x1fe>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000ab0:	4b7b      	ldr	r3, [pc, #492]	; (8000ca0 <SD_disk_initialize+0x208>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	2302      	movs	r3, #2
 8000aba:	4013      	ands	r3, r2
 8000abc:	d003      	beq.n	8000ac6 <SD_disk_initialize+0x2e>
 8000abe:	4b78      	ldr	r3, [pc, #480]	; (8000ca0 <SD_disk_initialize+0x208>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	e0e7      	b.n	8000c96 <SD_disk_initialize+0x1fe>

	/* power on */
	SD_PowerOn();
 8000ac6:	f7ff fe97 	bl	80007f8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000aca:	f7ff fdf3 	bl	80006b4 <SELECT>

	/* check disk type */
	type = 0;
 8000ace:	230e      	movs	r3, #14
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2040      	movs	r0, #64	; 0x40
 8000ada:	f7ff ff70 	bl	80009be <SD_SendCmd>
 8000ade:	0003      	movs	r3, r0
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d000      	beq.n	8000ae6 <SD_disk_initialize+0x4e>
 8000ae4:	e0bc      	b.n	8000c60 <SD_disk_initialize+0x1c8>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000ae6:	4b6f      	ldr	r3, [pc, #444]	; (8000ca4 <SD_disk_initialize+0x20c>)
 8000ae8:	22fa      	movs	r2, #250	; 0xfa
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000aee:	23d5      	movs	r3, #213	; 0xd5
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	0019      	movs	r1, r3
 8000af4:	2048      	movs	r0, #72	; 0x48
 8000af6:	f7ff ff62 	bl	80009be <SD_SendCmd>
 8000afa:	0003      	movs	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d000      	beq.n	8000b02 <SD_disk_initialize+0x6a>
 8000b00:	e06b      	b.n	8000bda <SD_disk_initialize+0x142>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000b02:	230f      	movs	r3, #15
 8000b04:	18fb      	adds	r3, r7, r3
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	e00e      	b.n	8000b2a <SD_disk_initialize+0x92>
			{
				ocr[n] = SPI_RxByte();
 8000b0c:	250f      	movs	r5, #15
 8000b0e:	197b      	adds	r3, r7, r5
 8000b10:	781c      	ldrb	r4, [r3, #0]
 8000b12:	f7ff fe29 	bl	8000768 <SPI_RxByte>
 8000b16:	0003      	movs	r3, r0
 8000b18:	001a      	movs	r2, r3
 8000b1a:	2308      	movs	r3, #8
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	551a      	strb	r2, [r3, r4]
			for (n = 0; n < 4; n++)
 8000b20:	197b      	adds	r3, r7, r5
 8000b22:	781a      	ldrb	r2, [r3, #0]
 8000b24:	197b      	adds	r3, r7, r5
 8000b26:	3201      	adds	r2, #1
 8000b28:	701a      	strb	r2, [r3, #0]
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d9eb      	bls.n	8000b0c <SD_disk_initialize+0x74>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000b34:	2208      	movs	r2, #8
 8000b36:	18bb      	adds	r3, r7, r2
 8000b38:	789b      	ldrb	r3, [r3, #2]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d000      	beq.n	8000b40 <SD_disk_initialize+0xa8>
 8000b3e:	e08f      	b.n	8000c60 <SD_disk_initialize+0x1c8>
 8000b40:	18bb      	adds	r3, r7, r2
 8000b42:	78db      	ldrb	r3, [r3, #3]
 8000b44:	2baa      	cmp	r3, #170	; 0xaa
 8000b46:	d000      	beq.n	8000b4a <SD_disk_initialize+0xb2>
 8000b48:	e08a      	b.n	8000c60 <SD_disk_initialize+0x1c8>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2077      	movs	r0, #119	; 0x77
 8000b4e:	f7ff ff36 	bl	80009be <SD_SendCmd>
 8000b52:	0003      	movs	r3, r0
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d807      	bhi.n	8000b68 <SD_disk_initialize+0xd0>
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	2069      	movs	r0, #105	; 0x69
 8000b60:	f7ff ff2d 	bl	80009be <SD_SendCmd>
 8000b64:	1e03      	subs	r3, r0, #0
 8000b66:	d004      	beq.n	8000b72 <SD_disk_initialize+0xda>
				} while (Timer1);
 8000b68:	4b4e      	ldr	r3, [pc, #312]	; (8000ca4 <SD_disk_initialize+0x20c>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1ec      	bne.n	8000b4a <SD_disk_initialize+0xb2>
 8000b70:	e000      	b.n	8000b74 <SD_disk_initialize+0xdc>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000b72:	46c0      	nop			; (mov r8, r8)

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000b74:	4b4b      	ldr	r3, [pc, #300]	; (8000ca4 <SD_disk_initialize+0x20c>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d100      	bne.n	8000b7e <SD_disk_initialize+0xe6>
 8000b7c:	e070      	b.n	8000c60 <SD_disk_initialize+0x1c8>
 8000b7e:	2100      	movs	r1, #0
 8000b80:	207a      	movs	r0, #122	; 0x7a
 8000b82:	f7ff ff1c 	bl	80009be <SD_SendCmd>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d000      	beq.n	8000b8c <SD_disk_initialize+0xf4>
 8000b8a:	e069      	b.n	8000c60 <SD_disk_initialize+0x1c8>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	18fb      	adds	r3, r7, r3
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	e00e      	b.n	8000bb4 <SD_disk_initialize+0x11c>
					{
						ocr[n] = SPI_RxByte();
 8000b96:	250f      	movs	r5, #15
 8000b98:	197b      	adds	r3, r7, r5
 8000b9a:	781c      	ldrb	r4, [r3, #0]
 8000b9c:	f7ff fde4 	bl	8000768 <SPI_RxByte>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	001a      	movs	r2, r3
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	551a      	strb	r2, [r3, r4]
					for (n = 0; n < 4; n++)
 8000baa:	197b      	adds	r3, r7, r5
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	197b      	adds	r3, r7, r5
 8000bb0:	3201      	adds	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d9eb      	bls.n	8000b96 <SD_disk_initialize+0xfe>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000bbe:	2308      	movs	r3, #8
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	2340      	movs	r3, #64	; 0x40
 8000bc8:	4013      	ands	r3, r2
 8000bca:	d001      	beq.n	8000bd0 <SD_disk_initialize+0x138>
 8000bcc:	220c      	movs	r2, #12
 8000bce:	e000      	b.n	8000bd2 <SD_disk_initialize+0x13a>
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	230e      	movs	r3, #14
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	701a      	strb	r2, [r3, #0]
 8000bd8:	e042      	b.n	8000c60 <SD_disk_initialize+0x1c8>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2077      	movs	r0, #119	; 0x77
 8000bde:	f7ff feee 	bl	80009be <SD_SendCmd>
 8000be2:	0003      	movs	r3, r0
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d808      	bhi.n	8000bfa <SD_disk_initialize+0x162>
 8000be8:	2100      	movs	r1, #0
 8000bea:	2069      	movs	r0, #105	; 0x69
 8000bec:	f7ff fee7 	bl	80009be <SD_SendCmd>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d801      	bhi.n	8000bfa <SD_disk_initialize+0x162>
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	e000      	b.n	8000bfc <SD_disk_initialize+0x164>
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	230e      	movs	r3, #14
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	701a      	strb	r2, [r3, #0]

			do
			{
				if (type == CT_SD1)
 8000c02:	230e      	movs	r3, #14
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d10d      	bne.n	8000c28 <SD_disk_initialize+0x190>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2077      	movs	r0, #119	; 0x77
 8000c10:	f7ff fed5 	bl	80009be <SD_SendCmd>
 8000c14:	0003      	movs	r3, r0
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d80c      	bhi.n	8000c34 <SD_disk_initialize+0x19c>
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2069      	movs	r0, #105	; 0x69
 8000c1e:	f7ff fece 	bl	80009be <SD_SendCmd>
 8000c22:	1e03      	subs	r3, r0, #0
 8000c24:	d106      	bne.n	8000c34 <SD_disk_initialize+0x19c>
 8000c26:	e00b      	b.n	8000c40 <SD_disk_initialize+0x1a8>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2041      	movs	r0, #65	; 0x41
 8000c2c:	f7ff fec7 	bl	80009be <SD_SendCmd>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d004      	beq.n	8000c3e <SD_disk_initialize+0x1a6>
				}

			} while (Timer1);
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <SD_disk_initialize+0x20c>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1e2      	bne.n	8000c02 <SD_disk_initialize+0x16a>
 8000c3c:	e000      	b.n	8000c40 <SD_disk_initialize+0x1a8>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000c3e:	46c0      	nop			; (mov r8, r8)

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <SD_disk_initialize+0x20c>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d007      	beq.n	8000c58 <SD_disk_initialize+0x1c0>
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	2050      	movs	r0, #80	; 0x50
 8000c50:	f7ff feb5 	bl	80009be <SD_SendCmd>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d003      	beq.n	8000c60 <SD_disk_initialize+0x1c8>
 8000c58:	230e      	movs	r3, #14
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
		}
	}

	CardType = type;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <SD_disk_initialize+0x210>)
 8000c62:	240e      	movs	r4, #14
 8000c64:	193a      	adds	r2, r7, r4
 8000c66:	7812      	ldrb	r2, [r2, #0]
 8000c68:	701a      	strb	r2, [r3, #0]

	/* Idle */
	DESELECT();
 8000c6a:	f7ff fd35 	bl	80006d8 <DESELECT>
	SPI_RxByte();
 8000c6e:	f7ff fd7b 	bl	8000768 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d008      	beq.n	8000c8c <SD_disk_initialize+0x1f4>
	{
		Stat &= ~STA_NOINIT;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <SD_disk_initialize+0x208>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2201      	movs	r2, #1
 8000c82:	4393      	bics	r3, r2
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SD_disk_initialize+0x208>)
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e001      	b.n	8000c90 <SD_disk_initialize+0x1f8>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000c8c:	f7ff fdfc 	bl	8000888 <SD_PowerOff>
	}

	return Stat;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <SD_disk_initialize+0x208>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b2db      	uxtb	r3, r3
}
 8000c96:	0018      	movs	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b004      	add	sp, #16
 8000c9c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000150 	.word	0x20000150
 8000ca8:	20000154 	.word	0x20000154

08000cac <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	0002      	movs	r2, r0
 8000cb4:	1dfb      	adds	r3, r7, #7
 8000cb6:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SD_disk_status+0x18>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e002      	b.n	8000cca <SD_disk_status+0x1e>
	return Stat;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <SD_disk_status+0x28>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b2db      	uxtb	r3, r3
}
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	20000000 	.word	0x20000000

08000cd8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	210f      	movs	r1, #15
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	1c02      	adds	r2, r0, #0
 8000cea:	701a      	strb	r2, [r3, #0]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <SD_disk_read+0x22>
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <SD_disk_read+0x26>
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	e053      	b.n	8000da6 <SD_disk_read+0xce>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <SD_disk_read+0xd8>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	001a      	movs	r2, r3
 8000d06:	2301      	movs	r3, #1
 8000d08:	4013      	ands	r3, r2
 8000d0a:	d001      	beq.n	8000d10 <SD_disk_read+0x38>
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e04a      	b.n	8000da6 <SD_disk_read+0xce>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000d10:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <SD_disk_read+0xdc>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	001a      	movs	r2, r3
 8000d16:	2304      	movs	r3, #4
 8000d18:	4013      	ands	r3, r2
 8000d1a:	d102      	bne.n	8000d22 <SD_disk_read+0x4a>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	025b      	lsls	r3, r3, #9
 8000d20:	607b      	str	r3, [r7, #4]

	SELECT();
 8000d22:	f7ff fcc7 	bl	80006b4 <SELECT>

	if (count == 1)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d112      	bne.n	8000d52 <SD_disk_read+0x7a>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	0019      	movs	r1, r3
 8000d30:	2051      	movs	r0, #81	; 0x51
 8000d32:	f7ff fe44 	bl	80009be <SD_SendCmd>
 8000d36:	1e03      	subs	r3, r0, #0
 8000d38:	d12d      	bne.n	8000d96 <SD_disk_read+0xbe>
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	009a      	lsls	r2, r3, #2
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	0011      	movs	r1, r2
 8000d42:	0018      	movs	r0, r3
 8000d44:	f7ff fdb4 	bl	80008b0 <SD_RxDataBlock>
 8000d48:	1e03      	subs	r3, r0, #0
 8000d4a:	d024      	beq.n	8000d96 <SD_disk_read+0xbe>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	e021      	b.n	8000d96 <SD_disk_read+0xbe>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	0019      	movs	r1, r3
 8000d56:	2052      	movs	r0, #82	; 0x52
 8000d58:	f7ff fe31 	bl	80009be <SD_SendCmd>
 8000d5c:	1e03      	subs	r3, r0, #0
 8000d5e:	d11a      	bne.n	8000d96 <SD_disk_read+0xbe>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	009a      	lsls	r2, r3, #2
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	0011      	movs	r1, r2
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f7ff fda1 	bl	80008b0 <SD_RxDataBlock>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d00c      	beq.n	8000d8c <SD_disk_read+0xb4>
				buff += 512;
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	0092      	lsls	r2, r2, #2
 8000d78:	4694      	mov	ip, r2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	3b01      	subs	r3, #1
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1ea      	bne.n	8000d60 <SD_disk_read+0x88>
 8000d8a:	e000      	b.n	8000d8e <SD_disk_read+0xb6>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000d8c:	46c0      	nop			; (mov r8, r8)

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000d8e:	2100      	movs	r1, #0
 8000d90:	204c      	movs	r0, #76	; 0x4c
 8000d92:	f7ff fe14 	bl	80009be <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000d96:	f7ff fc9f 	bl	80006d8 <DESELECT>
	SPI_RxByte();
 8000d9a:	f7ff fce5 	bl	8000768 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	1e5a      	subs	r2, r3, #1
 8000da2:	4193      	sbcs	r3, r2
 8000da4:	b2db      	uxtb	r3, r3
}
 8000da6:	0018      	movs	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b004      	add	sp, #16
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000154 	.word	0x20000154

08000db8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	1c02      	adds	r2, r0, #0
 8000dca:	701a      	strb	r2, [r3, #0]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <SD_disk_write+0x22>
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <SD_disk_write+0x26>
 8000dda:	2304      	movs	r3, #4
 8000ddc:	e06b      	b.n	8000eb6 <SD_disk_write+0xfe>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000dde:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <SD_disk_write+0x108>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	001a      	movs	r2, r3
 8000de6:	2301      	movs	r3, #1
 8000de8:	4013      	ands	r3, r2
 8000dea:	d001      	beq.n	8000df0 <SD_disk_write+0x38>
 8000dec:	2303      	movs	r3, #3
 8000dee:	e062      	b.n	8000eb6 <SD_disk_write+0xfe>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000df0:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <SD_disk_write+0x108>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	001a      	movs	r2, r3
 8000df8:	2304      	movs	r3, #4
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d001      	beq.n	8000e02 <SD_disk_write+0x4a>
 8000dfe:	2302      	movs	r3, #2
 8000e00:	e059      	b.n	8000eb6 <SD_disk_write+0xfe>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000e02:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <SD_disk_write+0x10c>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	001a      	movs	r2, r3
 8000e08:	2304      	movs	r3, #4
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d102      	bne.n	8000e14 <SD_disk_write+0x5c>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	025b      	lsls	r3, r3, #9
 8000e12:	607b      	str	r3, [r7, #4]

	SELECT();
 8000e14:	f7ff fc4e 	bl	80006b4 <SELECT>

	if (count == 1)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d110      	bne.n	8000e40 <SD_disk_write+0x88>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	0019      	movs	r1, r3
 8000e22:	2058      	movs	r0, #88	; 0x58
 8000e24:	f7ff fdcb 	bl	80009be <SD_SendCmd>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d13c      	bne.n	8000ea6 <SD_disk_write+0xee>
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	21fe      	movs	r1, #254	; 0xfe
 8000e30:	0018      	movs	r0, r3
 8000e32:	f7ff fd71 	bl	8000918 <SD_TxDataBlock>
 8000e36:	1e03      	subs	r3, r0, #0
 8000e38:	d035      	beq.n	8000ea6 <SD_disk_write+0xee>
			count = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	e032      	b.n	8000ea6 <SD_disk_write+0xee>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000e40:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <SD_disk_write+0x10c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	001a      	movs	r2, r3
 8000e46:	2302      	movs	r3, #2
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d008      	beq.n	8000e5e <SD_disk_write+0xa6>
		{
			SD_SendCmd(CMD55, 0);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2077      	movs	r0, #119	; 0x77
 8000e50:	f7ff fdb5 	bl	80009be <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	0019      	movs	r1, r3
 8000e58:	2057      	movs	r0, #87	; 0x57
 8000e5a:	f7ff fdb0 	bl	80009be <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	0019      	movs	r1, r3
 8000e62:	2059      	movs	r0, #89	; 0x59
 8000e64:	f7ff fdab 	bl	80009be <SD_SendCmd>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d11c      	bne.n	8000ea6 <SD_disk_write+0xee>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	21fc      	movs	r1, #252	; 0xfc
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff fd51 	bl	8000918 <SD_TxDataBlock>
 8000e76:	1e03      	subs	r3, r0, #0
 8000e78:	d00c      	beq.n	8000e94 <SD_disk_write+0xdc>
				buff += 512;
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	4694      	mov	ip, r2
 8000e82:	4463      	add	r3, ip
 8000e84:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1ec      	bne.n	8000e6c <SD_disk_write+0xb4>
 8000e92:	e000      	b.n	8000e96 <SD_disk_write+0xde>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000e94:	46c0      	nop			; (mov r8, r8)

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000e96:	21fd      	movs	r1, #253	; 0xfd
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff fd3d 	bl	8000918 <SD_TxDataBlock>
 8000e9e:	1e03      	subs	r3, r0, #0
 8000ea0:	d101      	bne.n	8000ea6 <SD_disk_write+0xee>
			{
				count = 1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000ea6:	f7ff fc17 	bl	80006d8 <DESELECT>
	SPI_RxByte();
 8000eaa:	f7ff fc5d 	bl	8000768 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	1e5a      	subs	r2, r3, #1
 8000eb2:	4193      	sbcs	r3, r2
 8000eb4:	b2db      	uxtb	r3, r3
}
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b004      	add	sp, #16
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000154 	.word	0x20000154

08000ec8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b08b      	sub	sp, #44	; 0x2c
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	603a      	str	r2, [r7, #0]
 8000ed0:	1dfb      	adds	r3, r7, #7
 8000ed2:	1c02      	adds	r2, r0, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	1dbb      	adds	r3, r7, #6
 8000ed8:	1c0a      	adds	r2, r1, #0
 8000eda:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000ee0:	1dfb      	adds	r3, r7, #7
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SD_disk_ioctl+0x24>
 8000ee8:	2304      	movs	r3, #4
 8000eea:	e11b      	b.n	8001124 <SD_disk_ioctl+0x25c>
	res = RES_ERROR;
 8000eec:	2327      	movs	r3, #39	; 0x27
 8000eee:	18fb      	adds	r3, r7, r3
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]

	if (ctrl == CTRL_POWER)
 8000ef4:	1dbb      	adds	r3, r7, #6
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b05      	cmp	r3, #5
 8000efa:	d127      	bne.n	8000f4c <SD_disk_ioctl+0x84>
	{
		switch (*ptr)
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d013      	beq.n	8000f2c <SD_disk_ioctl+0x64>
 8000f04:	dc1d      	bgt.n	8000f42 <SD_disk_ioctl+0x7a>
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <SD_disk_ioctl+0x48>
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d007      	beq.n	8000f1e <SD_disk_ioctl+0x56>
 8000f0e:	e018      	b.n	8000f42 <SD_disk_ioctl+0x7a>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000f10:	f7ff fcba 	bl	8000888 <SD_PowerOff>
			res = RES_OK;
 8000f14:	2327      	movs	r3, #39	; 0x27
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
			break;
 8000f1c:	e0ff      	b.n	800111e <SD_disk_ioctl+0x256>
		case 1:
			SD_PowerOn();		/* Power On */
 8000f1e:	f7ff fc6b 	bl	80007f8 <SD_PowerOn>
			res = RES_OK;
 8000f22:	2327      	movs	r3, #39	; 0x27
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
			break;
 8000f2a:	e0f8      	b.n	800111e <SD_disk_ioctl+0x256>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	1c5c      	adds	r4, r3, #1
 8000f30:	f7ff fcb4 	bl	800089c <SD_CheckPower>
 8000f34:	0003      	movs	r3, r0
 8000f36:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000f38:	2327      	movs	r3, #39	; 0x27
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
			break;
 8000f40:	e0ed      	b.n	800111e <SD_disk_ioctl+0x256>
		default:
			res = RES_PARERR;
 8000f42:	2327      	movs	r3, #39	; 0x27
 8000f44:	18fb      	adds	r3, r7, r3
 8000f46:	2204      	movs	r2, #4
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	e0e8      	b.n	800111e <SD_disk_ioctl+0x256>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f4c:	4b77      	ldr	r3, [pc, #476]	; (800112c <SD_disk_ioctl+0x264>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	001a      	movs	r2, r3
 8000f54:	2301      	movs	r3, #1
 8000f56:	4013      	ands	r3, r2
 8000f58:	d001      	beq.n	8000f5e <SD_disk_ioctl+0x96>
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e0e2      	b.n	8001124 <SD_disk_ioctl+0x25c>

		SELECT();
 8000f5e:	f7ff fba9 	bl	80006b4 <SELECT>

		switch (ctrl)
 8000f62:	1dbb      	adds	r3, r7, #6
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b0d      	cmp	r3, #13
 8000f68:	d900      	bls.n	8000f6c <SD_disk_ioctl+0xa4>
 8000f6a:	e0c8      	b.n	80010fe <SD_disk_ioctl+0x236>
 8000f6c:	009a      	lsls	r2, r3, #2
 8000f6e:	4b70      	ldr	r3, [pc, #448]	; (8001130 <SD_disk_ioctl+0x268>)
 8000f70:	18d3      	adds	r3, r2, r3
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	469f      	mov	pc, r3
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000f76:	2100      	movs	r1, #0
 8000f78:	2049      	movs	r0, #73	; 0x49
 8000f7a:	f7ff fd20 	bl	80009be <SD_SendCmd>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d000      	beq.n	8000f84 <SD_disk_ioctl+0xbc>
 8000f82:	e0c1      	b.n	8001108 <SD_disk_ioctl+0x240>
 8000f84:	240c      	movs	r4, #12
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	2110      	movs	r1, #16
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f7ff fc90 	bl	80008b0 <SD_RxDataBlock>
 8000f90:	1e03      	subs	r3, r0, #0
 8000f92:	d100      	bne.n	8000f96 <SD_disk_ioctl+0xce>
 8000f94:	e0b8      	b.n	8001108 <SD_disk_ioctl+0x240>
			{
				if ((csd[0] >> 6) == 1)
 8000f96:	0022      	movs	r2, r4
 8000f98:	18bb      	adds	r3, r7, r2
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	099b      	lsrs	r3, r3, #6
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d114      	bne.n	8000fce <SD_disk_ioctl+0x106>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000fa4:	0011      	movs	r1, r2
 8000fa6:	18bb      	adds	r3, r7, r2
 8000fa8:	7a5b      	ldrb	r3, [r3, #9]
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	7a1b      	ldrb	r3, [r3, #8]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	18d3      	adds	r3, r2, r3
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	211e      	movs	r1, #30
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	3201      	adds	r2, #1
 8000fc0:	801a      	strh	r2, [r3, #0]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	029a      	lsls	r2, r3, #10
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	e03a      	b.n	8001044 <SD_disk_ioctl+0x17c>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000fce:	200c      	movs	r0, #12
 8000fd0:	183b      	adds	r3, r7, r0
 8000fd2:	795b      	ldrb	r3, [r3, #5]
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	183b      	adds	r3, r7, r0
 8000fdc:	7a9b      	ldrb	r3, [r3, #10]
 8000fde:	09db      	lsrs	r3, r3, #7
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	18d3      	adds	r3, r2, r3
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	183b      	adds	r3, r7, r0
 8000fe8:	7a5b      	ldrb	r3, [r3, #9]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2106      	movs	r1, #6
 8000ff0:	400b      	ands	r3, r1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	18d3      	adds	r3, r2, r3
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	2426      	movs	r4, #38	; 0x26
 8000ffa:	193b      	adds	r3, r7, r4
 8000ffc:	3202      	adds	r2, #2
 8000ffe:	701a      	strb	r2, [r3, #0]
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001000:	183b      	adds	r3, r7, r0
 8001002:	7a1b      	ldrb	r3, [r3, #8]
 8001004:	099b      	lsrs	r3, r3, #6
 8001006:	b2db      	uxtb	r3, r3
 8001008:	b29a      	uxth	r2, r3
 800100a:	183b      	adds	r3, r7, r0
 800100c:	79db      	ldrb	r3, [r3, #7]
 800100e:	b29b      	uxth	r3, r3
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	b29b      	uxth	r3, r3
 8001014:	18d3      	adds	r3, r2, r3
 8001016:	b29a      	uxth	r2, r3
 8001018:	183b      	adds	r3, r7, r0
 800101a:	799b      	ldrb	r3, [r3, #6]
 800101c:	029b      	lsls	r3, r3, #10
 800101e:	b299      	uxth	r1, r3
 8001020:	23c0      	movs	r3, #192	; 0xc0
 8001022:	011b      	lsls	r3, r3, #4
 8001024:	400b      	ands	r3, r1
 8001026:	b29b      	uxth	r3, r3
 8001028:	18d3      	adds	r3, r2, r3
 800102a:	b29a      	uxth	r2, r3
 800102c:	211e      	movs	r1, #30
 800102e:	187b      	adds	r3, r7, r1
 8001030:	3201      	adds	r2, #1
 8001032:	801a      	strh	r2, [r3, #0]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001034:	187b      	adds	r3, r7, r1
 8001036:	881a      	ldrh	r2, [r3, #0]
 8001038:	193b      	adds	r3, r7, r4
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	3b09      	subs	r3, #9
 800103e:	409a      	lsls	r2, r3
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001044:	2327      	movs	r3, #39	; 0x27
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800104c:	e05c      	b.n	8001108 <SD_disk_ioctl+0x240>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001056:	2327      	movs	r3, #39	; 0x27
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
			break;
 800105e:	e05a      	b.n	8001116 <SD_disk_ioctl+0x24e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001060:	f7ff fbae 	bl	80007c0 <SD_ReadyWait>
 8001064:	0003      	movs	r3, r0
 8001066:	2bff      	cmp	r3, #255	; 0xff
 8001068:	d150      	bne.n	800110c <SD_disk_ioctl+0x244>
 800106a:	2327      	movs	r3, #39	; 0x27
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
			break;
 8001072:	e04b      	b.n	800110c <SD_disk_ioctl+0x244>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001074:	2100      	movs	r1, #0
 8001076:	2049      	movs	r0, #73	; 0x49
 8001078:	f7ff fca1 	bl	80009be <SD_SendCmd>
 800107c:	1e03      	subs	r3, r0, #0
 800107e:	d147      	bne.n	8001110 <SD_disk_ioctl+0x248>
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	2110      	movs	r1, #16
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff fc13 	bl	80008b0 <SD_RxDataBlock>
 800108a:	1e03      	subs	r3, r0, #0
 800108c:	d040      	beq.n	8001110 <SD_disk_ioctl+0x248>
 800108e:	2327      	movs	r3, #39	; 0x27
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
			break;
 8001096:	e03b      	b.n	8001110 <SD_disk_ioctl+0x248>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001098:	2100      	movs	r1, #0
 800109a:	204a      	movs	r0, #74	; 0x4a
 800109c:	f7ff fc8f 	bl	80009be <SD_SendCmd>
 80010a0:	1e03      	subs	r3, r0, #0
 80010a2:	d137      	bne.n	8001114 <SD_disk_ioctl+0x24c>
 80010a4:	6a3b      	ldr	r3, [r7, #32]
 80010a6:	2110      	movs	r1, #16
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff fc01 	bl	80008b0 <SD_RxDataBlock>
 80010ae:	1e03      	subs	r3, r0, #0
 80010b0:	d030      	beq.n	8001114 <SD_disk_ioctl+0x24c>
 80010b2:	2327      	movs	r3, #39	; 0x27
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
			break;
 80010ba:	e02b      	b.n	8001114 <SD_disk_ioctl+0x24c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80010bc:	2100      	movs	r1, #0
 80010be:	207a      	movs	r0, #122	; 0x7a
 80010c0:	f7ff fc7d 	bl	80009be <SD_SendCmd>
 80010c4:	1e03      	subs	r3, r0, #0
 80010c6:	d11a      	bne.n	80010fe <SD_disk_ioctl+0x236>
			{
				for (n = 0; n < 4; n++)
 80010c8:	2326      	movs	r3, #38	; 0x26
 80010ca:	18fb      	adds	r3, r7, r3
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	e00c      	b.n	80010ec <SD_disk_ioctl+0x224>
				{
					*ptr++ = SPI_RxByte();
 80010d2:	6a3c      	ldr	r4, [r7, #32]
 80010d4:	1c63      	adds	r3, r4, #1
 80010d6:	623b      	str	r3, [r7, #32]
 80010d8:	f7ff fb46 	bl	8000768 <SPI_RxByte>
 80010dc:	0003      	movs	r3, r0
 80010de:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80010e0:	2126      	movs	r1, #38	; 0x26
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	781a      	ldrb	r2, [r3, #0]
 80010e6:	187b      	adds	r3, r7, r1
 80010e8:	3201      	adds	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	2326      	movs	r3, #38	; 0x26
 80010ee:	18fb      	adds	r3, r7, r3
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b03      	cmp	r3, #3
 80010f4:	d9ed      	bls.n	80010d2 <SD_disk_ioctl+0x20a>
				}
				res = RES_OK;
 80010f6:	2327      	movs	r3, #39	; 0x27
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
			}
		default:
			res = RES_PARERR;
 80010fe:	2327      	movs	r3, #39	; 0x27
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	2204      	movs	r2, #4
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	e006      	b.n	8001116 <SD_disk_ioctl+0x24e>
			break;
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	e004      	b.n	8001116 <SD_disk_ioctl+0x24e>
			break;
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	e002      	b.n	8001116 <SD_disk_ioctl+0x24e>
			break;
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	e000      	b.n	8001116 <SD_disk_ioctl+0x24e>
			break;
 8001114:	46c0      	nop			; (mov r8, r8)
		}

		DESELECT();
 8001116:	f7ff fadf 	bl	80006d8 <DESELECT>
		SPI_RxByte();
 800111a:	f7ff fb25 	bl	8000768 <SPI_RxByte>
	}

	return res;
 800111e:	2327      	movs	r3, #39	; 0x27
 8001120:	18fb      	adds	r3, r7, r3
 8001122:	781b      	ldrb	r3, [r3, #0]
}
 8001124:	0018      	movs	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	b00b      	add	sp, #44	; 0x2c
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	20000000 	.word	0x20000000
 8001130:	08006dd8 	.word	0x08006dd8

08001134 <changeGameState>:
extern UART_HandleTypeDef huart1;	//CHANGE
char message[] = "wiadomosc\r\n";	//CHANGE


void changeGameState(char* state)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
//	printf("Game state: %s\n",state); #debugging
	strcpy(game.gameState, state);
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <changeGameState+0x1c>)
 8001140:	0011      	movs	r1, r2
 8001142:	0018      	movs	r0, r3
 8001144:	f005 f8fe 	bl	8006344 <strcpy>
}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b002      	add	sp, #8
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000004 	.word	0x20000004

08001154 <compareGameState>:


int compareGameState(char* state)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	int dummy = strcmp(game.gameState, state); //strcmp returns 0 if input strings are equal
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <compareGameState+0x2c>)
 8001160:	0011      	movs	r1, r2
 8001162:	0018      	movs	r0, r3
 8001164:	f7fe ffd0 	bl	8000108 <strcmp>
 8001168:	0003      	movs	r3, r0
 800116a:	60fb      	str	r3, [r7, #12]
	if (dummy == 0)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <compareGameState+0x22>
	{
		return 1;
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <compareGameState+0x24>
	}
	return 0;
 8001176:	2300      	movs	r3, #0
}
 8001178:	0018      	movs	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	b004      	add	sp, #16
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000004 	.word	0x20000004

08001184 <choosePreset>:


void choosePreset()
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	game.presetIndex = (game.presetIndex + 1) % 11;		// modulo ensures value range of (0-11)
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <choosePreset+0x54>)
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	3301      	adds	r3, #1
 800118e:	210b      	movs	r1, #11
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff f945 	bl	8000420 <__aeabi_idivmod>
 8001196:	000b      	movs	r3, r1
 8001198:	001a      	movs	r2, r3
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <choosePreset+0x54>)
 800119c:	621a      	str	r2, [r3, #32]
	game.startTime = game.presets[game.presetIndex][0] * 60 * 4;	// minutes to multiples of 250ms
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <choosePreset+0x54>)
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <choosePreset+0x54>)
 80011a4:	3304      	adds	r3, #4
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	18d3      	adds	r3, r2, r3
 80011aa:	3304      	adds	r3, #4
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	0013      	movs	r3, r2
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	1a9b      	subs	r3, r3, r2
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	001a      	movs	r2, r3
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <choosePreset+0x54>)
 80011ba:	619a      	str	r2, [r3, #24]
	game.increment = game.presets[game.presetIndex][1] * 4;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <choosePreset+0x54>)
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <choosePreset+0x54>)
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	18d3      	adds	r3, r2, r3
 80011c6:	3328      	adds	r3, #40	; 0x28
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	009a      	lsls	r2, r3, #2
 80011cc:	4b02      	ldr	r3, [pc, #8]	; (80011d8 <choosePreset+0x54>)
 80011ce:	61da      	str	r2, [r3, #28]
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	20000004 	.word	0x20000004

080011dc <startGame>:


void startGame()
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	changeGameState("Playing");
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <startGame+0x4c>)
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7ff ffa6 	bl	8001134 <changeGameState>
	game.currTimes[0] = game.startTime;
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <startGame+0x50>)
 80011ea:	699a      	ldr	r2, [r3, #24]
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <startGame+0x50>)
 80011ee:	611a      	str	r2, [r3, #16]
	game.currTimes[1] = game.startTime;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <startGame+0x50>)
 80011f2:	699a      	ldr	r2, [r3, #24]
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <startGame+0x50>)
 80011f6:	615a      	str	r2, [r3, #20]
	game.currPlayer = 0;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <startGame+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
	sprintf(message, "** Start **\r\n");
 80011fe:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <startGame+0x54>)
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <startGame+0x58>)
 8001202:	0011      	movs	r1, r2
 8001204:	0018      	movs	r0, r3
 8001206:	f005 f831 	bl	800626c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), HAL_MAX_DELAY);
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <startGame+0x58>)
 800120c:	0018      	movs	r0, r3
 800120e:	f7fe ff85 	bl	800011c <strlen>
 8001212:	0003      	movs	r3, r0
 8001214:	b29a      	uxth	r2, r3
 8001216:	2301      	movs	r3, #1
 8001218:	425b      	negs	r3, r3
 800121a:	4906      	ldr	r1, [pc, #24]	; (8001234 <startGame+0x58>)
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <startGame+0x5c>)
 800121e:	f003 fd8d 	bl	8004d3c <HAL_UART_Transmit>
}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	08006cd8 	.word	0x08006cd8
 800122c:	20000004 	.word	0x20000004
 8001230:	08006ce0 	.word	0x08006ce0
 8001234:	2000009c 	.word	0x2000009c
 8001238:	20000288 	.word	0x20000288

0800123c <pauseGame>:


void pauseGame()
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	changeGameState("Paused");
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <pauseGame+0x14>)
 8001242:	0018      	movs	r0, r3
 8001244:	f7ff ff76 	bl	8001134 <changeGameState>
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	08006cf0 	.word	0x08006cf0

08001254 <resumeGame>:


void resumeGame()
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	changeGameState("Playing");
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <resumeGame+0x14>)
 800125a:	0018      	movs	r0, r3
 800125c:	f7ff ff6a 	bl	8001134 <changeGameState>
}
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	08006cd8 	.word	0x08006cd8

0800126c <endGame>:


void endGame()
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	changeGameState("Setting");
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <endGame+0x3c>)
 8001272:	0018      	movs	r0, r3
 8001274:	f7ff ff5e 	bl	8001134 <changeGameState>
	changePlayer(0);
 8001278:	2000      	movs	r0, #0
 800127a:	f000 f89d 	bl	80013b8 <changePlayer>
	sprintf(message, "<br>** End **\r\n");
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <endGame+0x40>)
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <endGame+0x44>)
 8001282:	0011      	movs	r1, r2
 8001284:	0018      	movs	r0, r3
 8001286:	f004 fff1 	bl	800626c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), HAL_MAX_DELAY);
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <endGame+0x44>)
 800128c:	0018      	movs	r0, r3
 800128e:	f7fe ff45 	bl	800011c <strlen>
 8001292:	0003      	movs	r3, r0
 8001294:	b29a      	uxth	r2, r3
 8001296:	2301      	movs	r3, #1
 8001298:	425b      	negs	r3, r3
 800129a:	4905      	ldr	r1, [pc, #20]	; (80012b0 <endGame+0x44>)
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <endGame+0x48>)
 800129e:	f003 fd4d 	bl	8004d3c <HAL_UART_Transmit>
}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	08006cf8 	.word	0x08006cf8
 80012ac:	08006d00 	.word	0x08006d00
 80012b0:	2000009c 	.word	0x2000009c
 80012b4:	20000288 	.word	0x20000288

080012b8 <updateTime>:


void updateTime()
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af04      	add	r7, sp, #16
	game.currTimes[game.currPlayer]--;			// decrement time
 80012be:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <updateTime+0xec>)
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	4a38      	ldr	r2, [pc, #224]	; (80013a4 <updateTime+0xec>)
 80012c4:	1d19      	adds	r1, r3, #4
 80012c6:	0089      	lsls	r1, r1, #2
 80012c8:	588a      	ldr	r2, [r1, r2]
 80012ca:	1e51      	subs	r1, r2, #1
 80012cc:	4a35      	ldr	r2, [pc, #212]	; (80013a4 <updateTime+0xec>)
 80012ce:	3304      	adds	r3, #4
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	5099      	str	r1, [r3, r2]

    int p0_min = game.currTimes[0]/(4*60);
 80012d4:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <updateTime+0xec>)
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	21f0      	movs	r1, #240	; 0xf0
 80012da:	0018      	movs	r0, r3
 80012dc:	f7fe ffba 	bl	8000254 <__divsi3>
 80012e0:	0003      	movs	r3, r0
 80012e2:	60fb      	str	r3, [r7, #12]
    int p0_sec = (game.currTimes[0]/4)%60;
 80012e4:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <updateTime+0xec>)
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	da00      	bge.n	80012ee <updateTime+0x36>
 80012ec:	3303      	adds	r3, #3
 80012ee:	109b      	asrs	r3, r3, #2
 80012f0:	213c      	movs	r1, #60	; 0x3c
 80012f2:	0018      	movs	r0, r3
 80012f4:	f7ff f894 	bl	8000420 <__aeabi_idivmod>
 80012f8:	000b      	movs	r3, r1
 80012fa:	60bb      	str	r3, [r7, #8]
    int p1_min = game.currTimes[1]/(4*60);
 80012fc:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <updateTime+0xec>)
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	21f0      	movs	r1, #240	; 0xf0
 8001302:	0018      	movs	r0, r3
 8001304:	f7fe ffa6 	bl	8000254 <__divsi3>
 8001308:	0003      	movs	r3, r0
 800130a:	607b      	str	r3, [r7, #4]
    int p1_sec = (game.currTimes[1]/4)%60;
 800130c:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <updateTime+0xec>)
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	2b00      	cmp	r3, #0
 8001312:	da00      	bge.n	8001316 <updateTime+0x5e>
 8001314:	3303      	adds	r3, #3
 8001316:	109b      	asrs	r3, r3, #2
 8001318:	213c      	movs	r1, #60	; 0x3c
 800131a:	0018      	movs	r0, r3
 800131c:	f7ff f880 	bl	8000420 <__aeabi_idivmod>
 8001320:	000b      	movs	r3, r1
 8001322:	603b      	str	r3, [r7, #0]

	sprintf(message,"Live: White: %02d:%02d Black: %02d:%02d\r\n"
 8001324:	68bc      	ldr	r4, [r7, #8]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	491f      	ldr	r1, [pc, #124]	; (80013a8 <updateTime+0xf0>)
 800132a:	4820      	ldr	r0, [pc, #128]	; (80013ac <updateTime+0xf4>)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	0023      	movs	r3, r4
 8001336:	f004 ff99 	bl	800626c <siprintf>
		    		,p0_min,p0_sec,p1_min,p1_sec);
	HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), HAL_MAX_DELAY);
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <updateTime+0xf4>)
 800133c:	0018      	movs	r0, r3
 800133e:	f7fe feed 	bl	800011c <strlen>
 8001342:	0003      	movs	r3, r0
 8001344:	b29a      	uxth	r2, r3
 8001346:	2301      	movs	r3, #1
 8001348:	425b      	negs	r3, r3
 800134a:	4918      	ldr	r1, [pc, #96]	; (80013ac <updateTime+0xf4>)
 800134c:	4818      	ldr	r0, [pc, #96]	; (80013b0 <updateTime+0xf8>)
 800134e:	f003 fcf5 	bl	8004d3c <HAL_UART_Transmit>

	if(game.currTimes[game.currPlayer] <= 0)	// if time runs out, end the game
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <updateTime+0xec>)
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <updateTime+0xec>)
 8001358:	3204      	adds	r2, #4
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	58d3      	ldr	r3, [r2, r3]
 800135e:	2b00      	cmp	r3, #0
 8001360:	dc1b      	bgt.n	800139a <updateTime+0xe2>
	{
	    sprintf(message,"Player%d flagged!\nWhite: %02d:%02d Black: %02d:%02d\r\n",
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <updateTime+0xec>)
 8001364:	68da      	ldr	r2, [r3, #12]
 8001366:	68fc      	ldr	r4, [r7, #12]
 8001368:	4912      	ldr	r1, [pc, #72]	; (80013b4 <updateTime+0xfc>)
 800136a:	4810      	ldr	r0, [pc, #64]	; (80013ac <updateTime+0xf4>)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	0023      	movs	r3, r4
 800137a:	f004 ff77 	bl	800626c <siprintf>
	    		game.currPlayer,p0_min,p0_sec,p1_min,p1_sec);
		HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), HAL_MAX_DELAY);
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <updateTime+0xf4>)
 8001380:	0018      	movs	r0, r3
 8001382:	f7fe fecb 	bl	800011c <strlen>
 8001386:	0003      	movs	r3, r0
 8001388:	b29a      	uxth	r2, r3
 800138a:	2301      	movs	r3, #1
 800138c:	425b      	negs	r3, r3
 800138e:	4907      	ldr	r1, [pc, #28]	; (80013ac <updateTime+0xf4>)
 8001390:	4807      	ldr	r0, [pc, #28]	; (80013b0 <updateTime+0xf8>)
 8001392:	f003 fcd3 	bl	8004d3c <HAL_UART_Transmit>
		endGame();
 8001396:	f7ff ff69 	bl	800126c <endGame>
	}
}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b005      	add	sp, #20
 80013a0:	bd90      	pop	{r4, r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	20000004 	.word	0x20000004
 80013a8:	08006d10 	.word	0x08006d10
 80013ac:	2000009c 	.word	0x2000009c
 80013b0:	20000288 	.word	0x20000288
 80013b4:	08006d3c 	.word	0x08006d3c

080013b8 <changePlayer>:


void changePlayer(int selectedPlayer)		// switch player
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	if(game.currPlayer != selectedPlayer)	// ensures that nothing will happen if player clicks the same button twice
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <changePlayer+0x44>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d013      	beq.n	80013f2 <changePlayer+0x3a>
	{
		game.currTimes[game.currPlayer] += game.increment;	// add increment
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <changePlayer+0x44>)
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <changePlayer+0x44>)
 80013d0:	3204      	adds	r2, #4
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	58d0      	ldr	r0, [r2, r3]
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <changePlayer+0x44>)
 80013d8:	69d9      	ldr	r1, [r3, #28]
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <changePlayer+0x44>)
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	1841      	adds	r1, r0, r1
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <changePlayer+0x44>)
 80013e2:	3204      	adds	r2, #4
 80013e4:	0092      	lsls	r2, r2, #2
 80013e6:	50d1      	str	r1, [r2, r3]

		sendTime();
 80013e8:	f000 f86e 	bl	80014c8 <sendTime>

		game.currPlayer = selectedPlayer;					// switch player
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <changePlayer+0x44>)
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	60da      	str	r2, [r3, #12]
	}
}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b002      	add	sp, #8
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	20000004 	.word	0x20000004

08001400 <changePrintStringPreset>:


void changePrintStringPreset()				// format preset string to be displayed
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
    int startTime = game.presets[game.presetIndex][0];		// get startTime
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <changePrintStringPreset+0x3c>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4a0c      	ldr	r2, [pc, #48]	; (800143c <changePrintStringPreset+0x3c>)
 800140c:	3304      	adds	r3, #4
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	18d3      	adds	r3, r2, r3
 8001412:	3304      	adds	r3, #4
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	607b      	str	r3, [r7, #4]
    int increment = game.presets[game.presetIndex][1];		// get increment
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <changePrintStringPreset+0x3c>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4a07      	ldr	r2, [pc, #28]	; (800143c <changePrintStringPreset+0x3c>)
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	18d3      	adds	r3, r2, r3
 8001422:	3328      	adds	r3, #40	; 0x28
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	603b      	str	r3, [r7, #0]
    sprintf(printString, "%02d.PLU5.%02d", startTime, increment);	// formatted string saved in printString variable
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	4904      	ldr	r1, [pc, #16]	; (8001440 <changePrintStringPreset+0x40>)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <changePrintStringPreset+0x44>)
 8001430:	f004 ff1c 	bl	800626c <siprintf>
}
 8001434:	46c0      	nop			; (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	b002      	add	sp, #8
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000004 	.word	0x20000004
 8001440:	08006d74 	.word	0x08006d74
 8001444:	20000088 	.word	0x20000088

08001448 <changePrintStringGame>:


void changePrintStringGame()				// format current times to be displayed
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b087      	sub	sp, #28
 800144c:	af02      	add	r7, sp, #8
	// players times in minutes and seconds instead of multiplies of 250ms
    int p0_min = game.currTimes[0]/(4*60);
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <changePrintStringGame+0x74>)
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	21f0      	movs	r1, #240	; 0xf0
 8001454:	0018      	movs	r0, r3
 8001456:	f7fe fefd 	bl	8000254 <__divsi3>
 800145a:	0003      	movs	r3, r0
 800145c:	60fb      	str	r3, [r7, #12]
    int p0_sec = (game.currTimes[0]/4)%60;
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <changePrintStringGame+0x74>)
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	da00      	bge.n	8001468 <changePrintStringGame+0x20>
 8001466:	3303      	adds	r3, #3
 8001468:	109b      	asrs	r3, r3, #2
 800146a:	213c      	movs	r1, #60	; 0x3c
 800146c:	0018      	movs	r0, r3
 800146e:	f7fe ffd7 	bl	8000420 <__aeabi_idivmod>
 8001472:	000b      	movs	r3, r1
 8001474:	60bb      	str	r3, [r7, #8]
    int p1_min = game.currTimes[1]/(4*60);
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <changePrintStringGame+0x74>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	21f0      	movs	r1, #240	; 0xf0
 800147c:	0018      	movs	r0, r3
 800147e:	f7fe fee9 	bl	8000254 <__divsi3>
 8001482:	0003      	movs	r3, r0
 8001484:	607b      	str	r3, [r7, #4]
    int p1_sec = (game.currTimes[1]/4)%60;
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <changePrintStringGame+0x74>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	2b00      	cmp	r3, #0
 800148c:	da00      	bge.n	8001490 <changePrintStringGame+0x48>
 800148e:	3303      	adds	r3, #3
 8001490:	109b      	asrs	r3, r3, #2
 8001492:	213c      	movs	r1, #60	; 0x3c
 8001494:	0018      	movs	r0, r3
 8001496:	f7fe ffc3 	bl	8000420 <__aeabi_idivmod>
 800149a:	000b      	movs	r3, r1
 800149c:	603b      	str	r3, [r7, #0]

    sprintf(printString, "%02d.%02d.%02d.%02d",	//formatted times string saved in printString variable
 800149e:	68bc      	ldr	r4, [r7, #8]
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	4907      	ldr	r1, [pc, #28]	; (80014c0 <changePrintStringGame+0x78>)
 80014a4:	4807      	ldr	r0, [pc, #28]	; (80014c4 <changePrintStringGame+0x7c>)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	0023      	movs	r3, r4
 80014b0:	f004 fedc 	bl	800626c <siprintf>
    		p0_min, p0_sec, p1_min, p1_sec);
}
 80014b4:	46c0      	nop			; (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b005      	add	sp, #20
 80014ba:	bd90      	pop	{r4, r7, pc}
 80014bc:	20000004 	.word	0x20000004
 80014c0:	08006d84 	.word	0x08006d84
 80014c4:	20000088 	.word	0x20000088

080014c8 <sendTime>:

void sendTime()
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	int p_min = game.currTimes[game.currPlayer]/(4*60);
 80014ce:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <sendTime+0x80>)
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <sendTime+0x80>)
 80014d4:	3204      	adds	r2, #4
 80014d6:	0092      	lsls	r2, r2, #2
 80014d8:	58d3      	ldr	r3, [r2, r3]
 80014da:	21f0      	movs	r1, #240	; 0xf0
 80014dc:	0018      	movs	r0, r3
 80014de:	f7fe feb9 	bl	8000254 <__divsi3>
 80014e2:	0003      	movs	r3, r0
 80014e4:	607b      	str	r3, [r7, #4]
	int p_sec = (game.currTimes[game.currPlayer]/4)%60;
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <sendTime+0x80>)
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <sendTime+0x80>)
 80014ec:	3204      	adds	r2, #4
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	58d3      	ldr	r3, [r2, r3]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da00      	bge.n	80014f8 <sendTime+0x30>
 80014f6:	3303      	adds	r3, #3
 80014f8:	109b      	asrs	r3, r3, #2
 80014fa:	213c      	movs	r1, #60	; 0x3c
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7fe ff8f 	bl	8000420 <__aeabi_idivmod>
 8001502:	000b      	movs	r3, r1
 8001504:	603b      	str	r3, [r7, #0]

	if (game.currPlayer == 0)
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <sendTime+0x80>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d106      	bne.n	800151c <sendTime+0x54>
	{
		sprintf(message,"White: %02d:%02d \r\n",p_min,p_sec);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	490e      	ldr	r1, [pc, #56]	; (800154c <sendTime+0x84>)
 8001514:	480e      	ldr	r0, [pc, #56]	; (8001550 <sendTime+0x88>)
 8001516:	f004 fea9 	bl	800626c <siprintf>
 800151a:	e005      	b.n	8001528 <sendTime+0x60>
	}
	else
	{
		sprintf(message,"Black: %02d:%02d\r\n",p_min,p_sec);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <sendTime+0x8c>)
 8001522:	480b      	ldr	r0, [pc, #44]	; (8001550 <sendTime+0x88>)
 8001524:	f004 fea2 	bl	800626c <siprintf>
	}

	HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), HAL_MAX_DELAY);
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <sendTime+0x88>)
 800152a:	0018      	movs	r0, r3
 800152c:	f7fe fdf6 	bl	800011c <strlen>
 8001530:	0003      	movs	r3, r0
 8001532:	b29a      	uxth	r2, r3
 8001534:	2301      	movs	r3, #1
 8001536:	425b      	negs	r3, r3
 8001538:	4905      	ldr	r1, [pc, #20]	; (8001550 <sendTime+0x88>)
 800153a:	4807      	ldr	r0, [pc, #28]	; (8001558 <sendTime+0x90>)
 800153c:	f003 fbfe 	bl	8004d3c <HAL_UART_Transmit>

}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b002      	add	sp, #8
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000004 	.word	0x20000004
 800154c:	08006d98 	.word	0x08006d98
 8001550:	2000009c 	.word	0x2000009c
 8001554:	08006dac 	.word	0x08006dac
 8001558:	20000288 	.word	0x20000288

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001560:	f001 f872 	bl	8002648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001564:	f000 f824 	bl	80015b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001568:	f000 f9d6 	bl	8001918 <MX_GPIO_Init>
  MX_TIM3_Init();
 800156c:	f000 f950 	bl	8001810 <MX_TIM3_Init>
  MX_SPI1_Init();
 8001570:	f000 f88a 	bl	8001688 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001574:	f000 f8c0 	bl	80016f8 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001578:	f004 f948 	bl	800580c <MX_FATFS_Init>
  MX_USART1_UART_Init();
 800157c:	f000 f99c 	bl	80018b8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001580:	f000 f8f2 	bl	8001768 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  initialise_monitor_handles();	//semihosting
 8001584:	f004 fc36 	bl	8005df4 <initialise_monitor_handles>
  HAL_TIM_Base_Start_IT(&htim3);
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <main+0x48>)
 800158a:	0018      	movs	r0, r3
 800158c:	f002 fff6 	bl	800457c <HAL_TIM_Base_Start_IT>

  MAX7219_Init(&hspi1);
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <main+0x4c>)
 8001592:	0018      	movs	r0, r3
 8001594:	f000 fda2 	bl	80020dc <MAX7219_Init>
  MAX7219_PutString(0, printString);	// initial display
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <main+0x50>)
 800159a:	0019      	movs	r1, r3
 800159c:	2000      	movs	r0, #0
 800159e:	f000 fd8d 	bl	80020bc <MAX7219_PutString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <main+0x46>
 80015a4:	20000248 	.word	0x20000248
 80015a8:	20000158 	.word	0x20000158
 80015ac:	20000088 	.word	0x20000088

080015b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b09f      	sub	sp, #124	; 0x7c
 80015b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b6:	2440      	movs	r4, #64	; 0x40
 80015b8:	193b      	adds	r3, r7, r4
 80015ba:	0018      	movs	r0, r3
 80015bc:	2338      	movs	r3, #56	; 0x38
 80015be:	001a      	movs	r2, r3
 80015c0:	2100      	movs	r1, #0
 80015c2:	f004 fda0 	bl	8006106 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c6:	232c      	movs	r3, #44	; 0x2c
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	0018      	movs	r0, r3
 80015cc:	2314      	movs	r3, #20
 80015ce:	001a      	movs	r2, r3
 80015d0:	2100      	movs	r1, #0
 80015d2:	f004 fd98 	bl	8006106 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	0018      	movs	r0, r3
 80015da:	2328      	movs	r3, #40	; 0x28
 80015dc:	001a      	movs	r2, r3
 80015de:	2100      	movs	r1, #0
 80015e0:	f004 fd91 	bl	8006106 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e4:	4b26      	ldr	r3, [pc, #152]	; (8001680 <SystemClock_Config+0xd0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a26      	ldr	r2, [pc, #152]	; (8001684 <SystemClock_Config+0xd4>)
 80015ea:	401a      	ands	r2, r3
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <SystemClock_Config+0xd0>)
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	0109      	lsls	r1, r1, #4
 80015f2:	430a      	orrs	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80015f6:	0021      	movs	r1, r4
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	2210      	movs	r2, #16
 80015fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015fe:	187b      	adds	r3, r7, r1
 8001600:	2201      	movs	r2, #1
 8001602:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001604:	187b      	adds	r3, r7, r1
 8001606:	2200      	movs	r2, #0
 8001608:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800160a:	187b      	adds	r3, r7, r1
 800160c:	22a0      	movs	r2, #160	; 0xa0
 800160e:	0212      	lsls	r2, r2, #8
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001612:	187b      	adds	r3, r7, r1
 8001614:	2200      	movs	r2, #0
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001618:	187b      	adds	r3, r7, r1
 800161a:	0018      	movs	r0, r3
 800161c:	f001 fb48 	bl	8002cb0 <HAL_RCC_OscConfig>
 8001620:	1e03      	subs	r3, r0, #0
 8001622:	d001      	beq.n	8001628 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001624:	f000 fa28 	bl	8001a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001628:	212c      	movs	r1, #44	; 0x2c
 800162a:	187b      	adds	r3, r7, r1
 800162c:	220f      	movs	r2, #15
 800162e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001630:	187b      	adds	r3, r7, r1
 8001632:	2200      	movs	r2, #0
 8001634:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001636:	187b      	adds	r3, r7, r1
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800163c:	187b      	adds	r3, r7, r1
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001642:	187b      	adds	r3, r7, r1
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001648:	187b      	adds	r3, r7, r1
 800164a:	2100      	movs	r1, #0
 800164c:	0018      	movs	r0, r3
 800164e:	f001 ff03 	bl	8003458 <HAL_RCC_ClockConfig>
 8001652:	1e03      	subs	r3, r0, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001656:	f000 fa0f 	bl	8001a78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	0018      	movs	r0, r3
 800166a:	f002 f919 	bl	80038a0 <HAL_RCCEx_PeriphCLKConfig>
 800166e:	1e03      	subs	r3, r0, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001672:	f000 fa01 	bl	8001a78 <Error_Handler>
  }
}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	b01f      	add	sp, #124	; 0x7c
 800167c:	bd90      	pop	{r4, r7, pc}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	40007000 	.word	0x40007000
 8001684:	ffffe7ff 	.word	0xffffe7ff

08001688 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_SPI1_Init+0x68>)
 800168e:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <MX_SPI1_Init+0x6c>)
 8001690:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_SPI1_Init+0x68>)
 8001694:	2282      	movs	r2, #130	; 0x82
 8001696:	0052      	lsls	r2, r2, #1
 8001698:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_SPI1_Init+0x68>)
 800169c:	2280      	movs	r2, #128	; 0x80
 800169e:	0212      	lsls	r2, r2, #8
 80016a0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	0092      	lsls	r2, r2, #2
 80016ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016d6:	2207      	movs	r2, #7
 80016d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016dc:	0018      	movs	r0, r3
 80016de:	f002 fa7d 	bl	8003bdc <HAL_SPI_Init>
 80016e2:	1e03      	subs	r3, r0, #0
 80016e4:	d001      	beq.n	80016ea <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80016e6:	f000 f9c7 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000158 	.word	0x20000158
 80016f4:	40013000 	.word	0x40013000

080016f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MX_SPI2_Init+0x68>)
 80016fe:	4a19      	ldr	r2, [pc, #100]	; (8001764 <MX_SPI2_Init+0x6c>)
 8001700:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <MX_SPI2_Init+0x68>)
 8001704:	2282      	movs	r2, #130	; 0x82
 8001706:	0052      	lsls	r2, r2, #1
 8001708:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <MX_SPI2_Init+0x68>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <MX_SPI2_Init+0x68>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <MX_SPI2_Init+0x68>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800171c:	4b10      	ldr	r3, [pc, #64]	; (8001760 <MX_SPI2_Init+0x68>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <MX_SPI2_Init+0x68>)
 8001724:	2280      	movs	r2, #128	; 0x80
 8001726:	0092      	lsls	r2, r2, #2
 8001728:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800172a:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <MX_SPI2_Init+0x68>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <MX_SPI2_Init+0x68>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <MX_SPI2_Init+0x68>)
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <MX_SPI2_Init+0x68>)
 800173e:	2200      	movs	r2, #0
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <MX_SPI2_Init+0x68>)
 8001744:	2207      	movs	r2, #7
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <MX_SPI2_Init+0x68>)
 800174a:	0018      	movs	r0, r3
 800174c:	f002 fa46 	bl	8003bdc <HAL_SPI_Init>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d001      	beq.n	8001758 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001754:	f000 f990 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	200001b0 	.word	0x200001b0
 8001764:	40003800 	.word	0x40003800

08001768 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176e:	2308      	movs	r3, #8
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	0018      	movs	r0, r3
 8001774:	2310      	movs	r3, #16
 8001776:	001a      	movs	r2, r3
 8001778:	2100      	movs	r1, #0
 800177a:	f004 fcc4 	bl	8006106 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177e:	003b      	movs	r3, r7
 8001780:	0018      	movs	r0, r3
 8001782:	2308      	movs	r3, #8
 8001784:	001a      	movs	r2, r3
 8001786:	2100      	movs	r1, #0
 8001788:	f004 fcbd 	bl	8006106 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <MX_TIM2_Init+0xa4>)
 800178e:	2280      	movs	r2, #128	; 0x80
 8001790:	05d2      	lsls	r2, r2, #23
 8001792:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2080;
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <MX_TIM2_Init+0xa4>)
 8001796:	2282      	movs	r2, #130	; 0x82
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <MX_TIM2_Init+0xa4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <MX_TIM2_Init+0xa4>)
 80017a4:	22fa      	movs	r2, #250	; 0xfa
 80017a6:	0092      	lsls	r2, r2, #2
 80017a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <MX_TIM2_Init+0xa4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017b0:	4b16      	ldr	r3, [pc, #88]	; (800180c <MX_TIM2_Init+0xa4>)
 80017b2:	2280      	movs	r2, #128	; 0x80
 80017b4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <MX_TIM2_Init+0xa4>)
 80017b8:	0018      	movs	r0, r3
 80017ba:	f002 fe9f 	bl	80044fc <HAL_TIM_Base_Init>
 80017be:	1e03      	subs	r3, r0, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80017c2:	f000 f959 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c6:	2108      	movs	r1, #8
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	2280      	movs	r2, #128	; 0x80
 80017cc:	0152      	lsls	r2, r2, #5
 80017ce:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017d0:	187a      	adds	r2, r7, r1
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_TIM2_Init+0xa4>)
 80017d4:	0011      	movs	r1, r2
 80017d6:	0018      	movs	r0, r3
 80017d8:	f003 f80a 	bl	80047f0 <HAL_TIM_ConfigClockSource>
 80017dc:	1e03      	subs	r3, r0, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80017e0:	f000 f94a 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e4:	003b      	movs	r3, r7
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ea:	003b      	movs	r3, r7
 80017ec:	2200      	movs	r2, #0
 80017ee:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017f0:	003a      	movs	r2, r7
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_TIM2_Init+0xa4>)
 80017f4:	0011      	movs	r1, r2
 80017f6:	0018      	movs	r0, r3
 80017f8:	f003 f9ee 	bl	8004bd8 <HAL_TIMEx_MasterConfigSynchronization>
 80017fc:	1e03      	subs	r3, r0, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001800:	f000 f93a 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	b006      	add	sp, #24
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000208 	.word	0x20000208

08001810 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	2308      	movs	r3, #8
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	0018      	movs	r0, r3
 800181c:	2310      	movs	r3, #16
 800181e:	001a      	movs	r2, r3
 8001820:	2100      	movs	r1, #0
 8001822:	f004 fc70 	bl	8006106 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001826:	003b      	movs	r3, r7
 8001828:	0018      	movs	r0, r3
 800182a:	2308      	movs	r3, #8
 800182c:	001a      	movs	r2, r3
 800182e:	2100      	movs	r1, #0
 8001830:	f004 fc69 	bl	8006106 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <MX_TIM3_Init+0xa0>)
 8001836:	4a1f      	ldr	r2, [pc, #124]	; (80018b4 <MX_TIM3_Init+0xa4>)
 8001838:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2080;
 800183a:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <MX_TIM3_Init+0xa0>)
 800183c:	2282      	movs	r2, #130	; 0x82
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001842:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <MX_TIM3_Init+0xa0>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 250;
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <MX_TIM3_Init+0xa0>)
 800184a:	22fa      	movs	r2, #250	; 0xfa
 800184c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <MX_TIM3_Init+0xa0>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001854:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_TIM3_Init+0xa0>)
 8001856:	2280      	movs	r2, #128	; 0x80
 8001858:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <MX_TIM3_Init+0xa0>)
 800185c:	0018      	movs	r0, r3
 800185e:	f002 fe4d 	bl	80044fc <HAL_TIM_Base_Init>
 8001862:	1e03      	subs	r3, r0, #0
 8001864:	d001      	beq.n	800186a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001866:	f000 f907 	bl	8001a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800186a:	2108      	movs	r1, #8
 800186c:	187b      	adds	r3, r7, r1
 800186e:	2280      	movs	r2, #128	; 0x80
 8001870:	0152      	lsls	r2, r2, #5
 8001872:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001874:	187a      	adds	r2, r7, r1
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_TIM3_Init+0xa0>)
 8001878:	0011      	movs	r1, r2
 800187a:	0018      	movs	r0, r3
 800187c:	f002 ffb8 	bl	80047f0 <HAL_TIM_ConfigClockSource>
 8001880:	1e03      	subs	r3, r0, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001884:	f000 f8f8 	bl	8001a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001888:	003b      	movs	r3, r7
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188e:	003b      	movs	r3, r7
 8001890:	2200      	movs	r2, #0
 8001892:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001894:	003a      	movs	r2, r7
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_TIM3_Init+0xa0>)
 8001898:	0011      	movs	r1, r2
 800189a:	0018      	movs	r0, r3
 800189c:	f003 f99c 	bl	8004bd8 <HAL_TIMEx_MasterConfigSynchronization>
 80018a0:	1e03      	subs	r3, r0, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80018a4:	f000 f8e8 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b006      	add	sp, #24
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000248 	.word	0x20000248
 80018b4:	40000400 	.word	0x40000400

080018b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018be:	4a15      	ldr	r2, [pc, #84]	; (8001914 <MX_USART1_UART_Init+0x5c>)
 80018c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018c4:	2296      	movs	r2, #150	; 0x96
 80018c6:	0192      	lsls	r2, r2, #6
 80018c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018de:	220c      	movs	r2, #12
 80018e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018fa:	4b05      	ldr	r3, [pc, #20]	; (8001910 <MX_USART1_UART_Init+0x58>)
 80018fc:	0018      	movs	r0, r3
 80018fe:	f003 f9c9 	bl	8004c94 <HAL_UART_Init>
 8001902:	1e03      	subs	r3, r0, #0
 8001904:	d001      	beq.n	800190a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001906:	f000 f8b7 	bl	8001a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000288 	.word	0x20000288
 8001914:	40013800 	.word	0x40013800

08001918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b08b      	sub	sp, #44	; 0x2c
 800191c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191e:	2414      	movs	r4, #20
 8001920:	193b      	adds	r3, r7, r4
 8001922:	0018      	movs	r0, r3
 8001924:	2314      	movs	r3, #20
 8001926:	001a      	movs	r2, r3
 8001928:	2100      	movs	r1, #0
 800192a:	f004 fbec 	bl	8006106 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	4b4f      	ldr	r3, [pc, #316]	; (8001a6c <MX_GPIO_Init+0x154>)
 8001930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001932:	4b4e      	ldr	r3, [pc, #312]	; (8001a6c <MX_GPIO_Init+0x154>)
 8001934:	2104      	movs	r1, #4
 8001936:	430a      	orrs	r2, r1
 8001938:	62da      	str	r2, [r3, #44]	; 0x2c
 800193a:	4b4c      	ldr	r3, [pc, #304]	; (8001a6c <MX_GPIO_Init+0x154>)
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	2204      	movs	r2, #4
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001946:	4b49      	ldr	r3, [pc, #292]	; (8001a6c <MX_GPIO_Init+0x154>)
 8001948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194a:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <MX_GPIO_Init+0x154>)
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	430a      	orrs	r2, r1
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c
 8001952:	4b46      	ldr	r3, [pc, #280]	; (8001a6c <MX_GPIO_Init+0x154>)
 8001954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <MX_GPIO_Init+0x154>)
 8001960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001962:	4b42      	ldr	r3, [pc, #264]	; (8001a6c <MX_GPIO_Init+0x154>)
 8001964:	2101      	movs	r1, #1
 8001966:	430a      	orrs	r2, r1
 8001968:	62da      	str	r2, [r3, #44]	; 0x2c
 800196a:	4b40      	ldr	r3, [pc, #256]	; (8001a6c <MX_GPIO_Init+0x154>)
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	2201      	movs	r2, #1
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	4b3d      	ldr	r3, [pc, #244]	; (8001a6c <MX_GPIO_Init+0x154>)
 8001978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800197a:	4b3c      	ldr	r3, [pc, #240]	; (8001a6c <MX_GPIO_Init+0x154>)
 800197c:	2102      	movs	r1, #2
 800197e:	430a      	orrs	r2, r1
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
 8001982:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <MX_GPIO_Init+0x154>)
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	2202      	movs	r2, #2
 8001988:	4013      	ands	r3, r2
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_RESET);
 800198e:	23a0      	movs	r3, #160	; 0xa0
 8001990:	05db      	lsls	r3, r3, #23
 8001992:	2200      	movs	r2, #0
 8001994:	2110      	movs	r1, #16
 8001996:	0018      	movs	r0, r3
 8001998:	f001 f946 	bl	8002c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	019b      	lsls	r3, r3, #6
 80019a0:	4833      	ldr	r0, [pc, #204]	; (8001a70 <MX_GPIO_Init+0x158>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	0019      	movs	r1, r3
 80019a6:	f001 f93f 	bl	8002c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : player0_Pin player1_Pin preset_reset_Pin start_pause_Pin */
  GPIO_InitStruct.Pin = player0_Pin|player1_Pin|preset_reset_Pin|start_pause_Pin;
 80019aa:	193b      	adds	r3, r7, r4
 80019ac:	220f      	movs	r2, #15
 80019ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019b0:	193b      	adds	r3, r7, r4
 80019b2:	2288      	movs	r2, #136	; 0x88
 80019b4:	0352      	lsls	r2, r2, #13
 80019b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	193b      	adds	r3, r7, r4
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019be:	193b      	adds	r3, r7, r4
 80019c0:	4a2c      	ldr	r2, [pc, #176]	; (8001a74 <MX_GPIO_Init+0x15c>)
 80019c2:	0019      	movs	r1, r3
 80019c4:	0010      	movs	r0, r2
 80019c6:	f000 ffb1 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 80019ca:	193b      	adds	r3, r7, r4
 80019cc:	2208      	movs	r2, #8
 80019ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	193b      	adds	r3, r7, r4
 80019d2:	2202      	movs	r2, #2
 80019d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	193b      	adds	r3, r7, r4
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	193b      	adds	r3, r7, r4
 80019de:	2203      	movs	r2, #3
 80019e0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80019e2:	193b      	adds	r3, r7, r4
 80019e4:	2204      	movs	r2, #4
 80019e6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80019e8:	193a      	adds	r2, r7, r4
 80019ea:	23a0      	movs	r3, #160	; 0xa0
 80019ec:	05db      	lsls	r3, r3, #23
 80019ee:	0011      	movs	r1, r2
 80019f0:	0018      	movs	r0, r3
 80019f2:	f000 ff9b 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX7219_CS_Pin */
  GPIO_InitStruct.Pin = MAX7219_CS_Pin;
 80019f6:	193b      	adds	r3, r7, r4
 80019f8:	2210      	movs	r2, #16
 80019fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fc:	193b      	adds	r3, r7, r4
 80019fe:	2201      	movs	r2, #1
 8001a00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	193b      	adds	r3, r7, r4
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	193b      	adds	r3, r7, r4
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MAX7219_CS_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	193a      	adds	r2, r7, r4
 8001a10:	23a0      	movs	r3, #160	; 0xa0
 8001a12:	05db      	lsls	r3, r3, #23
 8001a14:	0011      	movs	r1, r2
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 ff88 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a1c:	0021      	movs	r1, r4
 8001a1e:	187b      	adds	r3, r7, r1
 8001a20:	2280      	movs	r2, #128	; 0x80
 8001a22:	0192      	lsls	r2, r2, #6
 8001a24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	2201      	movs	r2, #1
 8001a2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	187b      	adds	r3, r7, r1
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <MX_GPIO_Init+0x158>)
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	0010      	movs	r0, r2
 8001a40:	f000 ff74 	bl	800292c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	2005      	movs	r0, #5
 8001a4a:	f000 ff3d 	bl	80028c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001a4e:	2005      	movs	r0, #5
 8001a50:	f000 ff4f 	bl	80028f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2100      	movs	r1, #0
 8001a58:	2006      	movs	r0, #6
 8001a5a:	f000 ff35 	bl	80028c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001a5e:	2006      	movs	r0, #6
 8001a60:	f000 ff47 	bl	80028f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b00b      	add	sp, #44	; 0x2c
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	50000400 	.word	0x50000400
 8001a74:	50000800 	.word	0x50000800

08001a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7c:	b672      	cpsid	i
}
 8001a7e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <Error_Handler+0x8>
	...

08001a84 <MAX7219_SendToDevice>:
				// Z - same as 2
		0x63,	// *
};

MAX7219_STATUS MAX7219_SendToDevice(uint8_t DeviceNumber, uint8_t Register, uint8_t Data)
{
 8001a84:	b590      	push	{r4, r7, lr}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	0004      	movs	r4, r0
 8001a8c:	0008      	movs	r0, r1
 8001a8e:	0011      	movs	r1, r2
 8001a90:	1dfb      	adds	r3, r7, #7
 8001a92:	1c22      	adds	r2, r4, #0
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	1dbb      	adds	r3, r7, #6
 8001a98:	1c02      	adds	r2, r0, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	1d7b      	adds	r3, r7, #5
 8001a9e:	1c0a      	adds	r2, r1, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
	uint8_t Offset = DeviceNumber * 2;
 8001aa2:	240f      	movs	r4, #15
 8001aa4:	193a      	adds	r2, r7, r4
 8001aa6:	1dfb      	adds	r3, r7, #7
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	18db      	adds	r3, r3, r3
 8001aac:	7013      	strb	r3, [r2, #0]

	memset(Max7219SpiBuffer, 0x00, (MAX7219_DEVICES * 2));
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <MAX7219_SendToDevice+0x94>)
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f004 fb26 	bl	8006106 <memset>
	Max7219SpiBuffer[(MAX7219_DEVICES * 2)-Offset-2] = Register;
 8001aba:	193b      	adds	r3, r7, r4
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	4a15      	ldr	r2, [pc, #84]	; (8001b18 <MAX7219_SendToDevice+0x94>)
 8001ac4:	1db9      	adds	r1, r7, #6
 8001ac6:	7809      	ldrb	r1, [r1, #0]
 8001ac8:	54d1      	strb	r1, [r2, r3]
	Max7219SpiBuffer[(MAX7219_DEVICES * 2)-Offset-1] = Data;
 8001aca:	193b      	adds	r3, r7, r4
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	4a11      	ldr	r2, [pc, #68]	; (8001b18 <MAX7219_SendToDevice+0x94>)
 8001ad4:	1d79      	adds	r1, r7, #5
 8001ad6:	7809      	ldrb	r1, [r1, #0]
 8001ad8:	54d1      	strb	r1, [r2, r3]

#ifndef SPI_CS_HARDWARE_CONTROL
	HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_RESET);
 8001ada:	23a0      	movs	r3, #160	; 0xa0
 8001adc:	05db      	lsls	r3, r3, #23
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2110      	movs	r1, #16
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f001 f8a0 	bl	8002c28 <HAL_GPIO_WritePin>
#endif

	if(HAL_OK != HAL_SPI_Transmit(max7219_spi, Max7219SpiBuffer, (MAX7219_DEVICES * 2), 10))
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <MAX7219_SendToDevice+0x98>)
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	490a      	ldr	r1, [pc, #40]	; (8001b18 <MAX7219_SendToDevice+0x94>)
 8001aee:	230a      	movs	r3, #10
 8001af0:	2204      	movs	r2, #4
 8001af2:	f002 f907 	bl	8003d04 <HAL_SPI_Transmit>
 8001af6:	1e03      	subs	r3, r0, #0
 8001af8:	d001      	beq.n	8001afe <MAX7219_SendToDevice+0x7a>
	{
		return MAX7219_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e007      	b.n	8001b0e <MAX7219_SendToDevice+0x8a>
	}

#ifndef SPI_CS_HARDWARE_CONTROL
	HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET);
 8001afe:	23a0      	movs	r3, #160	; 0xa0
 8001b00:	05db      	lsls	r3, r3, #23
 8001b02:	2201      	movs	r2, #1
 8001b04:	2110      	movs	r1, #16
 8001b06:	0018      	movs	r0, r3
 8001b08:	f001 f88e 	bl	8002c28 <HAL_GPIO_WritePin>
#endif

	return MAX7219_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b005      	add	sp, #20
 8001b14:	bd90      	pop	{r4, r7, pc}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	20000314 	.word	0x20000314
 8001b1c:	20000310 	.word	0x20000310

08001b20 <MAX7219_SetDecodeMode>:

MAX7219_STATUS MAX7219_SetDecodeMode(uint8_t DeviceNumber, MAX7219_DecodeMode DecodeMode)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	0002      	movs	r2, r0
 8001b28:	1dfb      	adds	r3, r7, #7
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	1dbb      	adds	r3, r7, #6
 8001b2e:	1c0a      	adds	r2, r1, #0
 8001b30:	701a      	strb	r2, [r3, #0]
	if(DeviceNumber >= MAX7219_DEVICES || DecodeMode > 4)
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d803      	bhi.n	8001b42 <MAX7219_SetDecodeMode+0x22>
 8001b3a:	1dbb      	adds	r3, r7, #6
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d901      	bls.n	8001b46 <MAX7219_SetDecodeMode+0x26>
	{
		return MAX7219_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00c      	b.n	8001b60 <MAX7219_SetDecodeMode+0x40>
	}

	if(MAX7219_OK != MAX7219_SendToDevice(DeviceNumber, MAX7219_DECODE_MODE_REGISTER, DecodeMode))
 8001b46:	1dbb      	adds	r3, r7, #6
 8001b48:	781a      	ldrb	r2, [r3, #0]
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2109      	movs	r1, #9
 8001b50:	0018      	movs	r0, r3
 8001b52:	f7ff ff97 	bl	8001a84 <MAX7219_SendToDevice>
 8001b56:	1e03      	subs	r3, r0, #0
 8001b58:	d001      	beq.n	8001b5e <MAX7219_SetDecodeMode+0x3e>
	{
		return MAX7219_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <MAX7219_SetDecodeMode+0x40>
	}

	return MAX7219_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b002      	add	sp, #8
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <MAX7219_SetIntensity>:

MAX7219_STATUS MAX7219_SetIntensity(uint8_t DeviceNumber, uint8_t Intensity)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	0002      	movs	r2, r0
 8001b70:	1dfb      	adds	r3, r7, #7
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	1dbb      	adds	r3, r7, #6
 8001b76:	1c0a      	adds	r2, r1, #0
 8001b78:	701a      	strb	r2, [r3, #0]
	if(DeviceNumber >= MAX7219_DEVICES || Intensity > 16)
 8001b7a:	1dfb      	adds	r3, r7, #7
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d803      	bhi.n	8001b8a <MAX7219_SetIntensity+0x22>
 8001b82:	1dbb      	adds	r3, r7, #6
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b10      	cmp	r3, #16
 8001b88:	d901      	bls.n	8001b8e <MAX7219_SetIntensity+0x26>
	{
		return MAX7219_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00c      	b.n	8001ba8 <MAX7219_SetIntensity+0x40>
	}

	if(MAX7219_OK != MAX7219_SendToDevice(DeviceNumber, MAX7219_INTENSITY_REGISTER, Intensity))
 8001b8e:	1dbb      	adds	r3, r7, #6
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	1dfb      	adds	r3, r7, #7
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	210a      	movs	r1, #10
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7ff ff73 	bl	8001a84 <MAX7219_SendToDevice>
 8001b9e:	1e03      	subs	r3, r0, #0
 8001ba0:	d001      	beq.n	8001ba6 <MAX7219_SetIntensity+0x3e>
	{
		return MAX7219_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <MAX7219_SetIntensity+0x40>
	}

	return MAX7219_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	0018      	movs	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <MAX7219_SetScanLimit>:

MAX7219_STATUS MAX7219_SetScanLimit(uint8_t DeviceNumber, MAX7219_ScanLimit Limit)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	1dfb      	adds	r3, r7, #7
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	1dbb      	adds	r3, r7, #6
 8001bbe:	1c0a      	adds	r2, r1, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
	if(DeviceNumber >= MAX7219_DEVICES || Limit > 8)
 8001bc2:	1dfb      	adds	r3, r7, #7
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d803      	bhi.n	8001bd2 <MAX7219_SetScanLimit+0x22>
 8001bca:	1dbb      	adds	r3, r7, #6
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d901      	bls.n	8001bd6 <MAX7219_SetScanLimit+0x26>
	{
		return MAX7219_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00c      	b.n	8001bf0 <MAX7219_SetScanLimit+0x40>
	}

	if(MAX7219_OK != MAX7219_SendToDevice(DeviceNumber, MAX7219_SCAN_LIMIT_REGISTER, Limit))
 8001bd6:	1dbb      	adds	r3, r7, #6
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	1dfb      	adds	r3, r7, #7
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	210b      	movs	r1, #11
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7ff ff4f 	bl	8001a84 <MAX7219_SendToDevice>
 8001be6:	1e03      	subs	r3, r0, #0
 8001be8:	d001      	beq.n	8001bee <MAX7219_SetScanLimit+0x3e>
	{
		return MAX7219_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <MAX7219_SetScanLimit+0x40>
	}

	return MAX7219_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b002      	add	sp, #8
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <MAX7219_Shutdown>:

MAX7219_STATUS MAX7219_Shutdown(uint8_t DeviceNumber, MAX7219_ShutdownMode Shutdown)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	0002      	movs	r2, r0
 8001c00:	1dfb      	adds	r3, r7, #7
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	1dbb      	adds	r3, r7, #6
 8001c06:	1c0a      	adds	r2, r1, #0
 8001c08:	701a      	strb	r2, [r3, #0]
	if(DeviceNumber >= MAX7219_DEVICES)
 8001c0a:	1dfb      	adds	r3, r7, #7
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d901      	bls.n	8001c16 <MAX7219_Shutdown+0x1e>
	{
		return MAX7219_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e010      	b.n	8001c38 <MAX7219_Shutdown+0x40>
	}

	if(MAX7219_OK != MAX7219_SendToDevice(DeviceNumber, MAX7219_SHUTDOWN_REGISTER, Shutdown?1:0))
 8001c16:	1dbb      	adds	r3, r7, #6
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	1e5a      	subs	r2, r3, #1
 8001c1c:	4193      	sbcs	r3, r2
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	001a      	movs	r2, r3
 8001c22:	1dfb      	adds	r3, r7, #7
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	210c      	movs	r1, #12
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7ff ff2b 	bl	8001a84 <MAX7219_SendToDevice>
 8001c2e:	1e03      	subs	r3, r0, #0
 8001c30:	d001      	beq.n	8001c36 <MAX7219_Shutdown+0x3e>
	{
		return MAX7219_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <MAX7219_Shutdown+0x40>
	}

	return MAX7219_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	0018      	movs	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b002      	add	sp, #8
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <MAX7219_SetDisplayTest>:

MAX7219_STATUS MAX7219_SetDisplayTest(uint8_t DeviceNumber, MAX7219_TestMode Enable)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	0002      	movs	r2, r0
 8001c48:	1dfb      	adds	r3, r7, #7
 8001c4a:	701a      	strb	r2, [r3, #0]
 8001c4c:	1dbb      	adds	r3, r7, #6
 8001c4e:	1c0a      	adds	r2, r1, #0
 8001c50:	701a      	strb	r2, [r3, #0]
	if(DeviceNumber >= MAX7219_DEVICES)
 8001c52:	1dfb      	adds	r3, r7, #7
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d901      	bls.n	8001c5e <MAX7219_SetDisplayTest+0x1e>
	{
		return MAX7219_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e010      	b.n	8001c80 <MAX7219_SetDisplayTest+0x40>
	}

	if(MAX7219_OK != MAX7219_SendToDevice(DeviceNumber, MAX7219_DISPLAY_TEST_REGISTER, Enable?1:0))
 8001c5e:	1dbb      	adds	r3, r7, #6
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	1e5a      	subs	r2, r3, #1
 8001c64:	4193      	sbcs	r3, r2
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	001a      	movs	r2, r3
 8001c6a:	1dfb      	adds	r3, r7, #7
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	210f      	movs	r1, #15
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7ff ff07 	bl	8001a84 <MAX7219_SendToDevice>
 8001c76:	1e03      	subs	r3, r0, #0
 8001c78:	d001      	beq.n	8001c7e <MAX7219_SetDisplayTest+0x3e>
	{
		return MAX7219_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <MAX7219_SetDisplayTest+0x40>
	}

	return MAX7219_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b002      	add	sp, #8
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <MAX7219_SetDigit>:

MAX7219_STATUS MAX7219_SetDigit(uint8_t DeviceNumber, uint8_t Digit, uint8_t Value, uint8_t Dot)
{
 8001c88:	b5b0      	push	{r4, r5, r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	0005      	movs	r5, r0
 8001c90:	000c      	movs	r4, r1
 8001c92:	0010      	movs	r0, r2
 8001c94:	0019      	movs	r1, r3
 8001c96:	1dfb      	adds	r3, r7, #7
 8001c98:	1c2a      	adds	r2, r5, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	1dbb      	adds	r3, r7, #6
 8001c9e:	1c22      	adds	r2, r4, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	1d7b      	adds	r3, r7, #5
 8001ca4:	1c02      	adds	r2, r0, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	1c0a      	adds	r2, r1, #0
 8001cac:	701a      	strb	r2, [r3, #0]
	uint8_t ValueToSend;
	if(DeviceNumber >= MAX7219_DEVICES)
 8001cae:	1dfb      	adds	r3, r7, #7
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d901      	bls.n	8001cba <MAX7219_SetDigit+0x32>
	{
		return MAX7219_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e0b9      	b.n	8001e2e <MAX7219_SetDigit+0x1a6>
	}

	if(Digit > 7 || Digit < 0)
 8001cba:	1dbb      	adds	r3, r7, #6
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b07      	cmp	r3, #7
 8001cc0:	d901      	bls.n	8001cc6 <MAX7219_SetDigit+0x3e>
	{
		return MAX7219_OUT_OF_RANGE;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e0b3      	b.n	8001e2e <MAX7219_SetDigit+0x1a6>
	}

	switch (Value)
 8001cc6:	1d7b      	adds	r3, r7, #5
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b7a      	cmp	r3, #122	; 0x7a
 8001ccc:	d900      	bls.n	8001cd0 <MAX7219_SetDigit+0x48>
 8001cce:	e08f      	b.n	8001df0 <MAX7219_SetDigit+0x168>
 8001cd0:	009a      	lsls	r2, r3, #2
 8001cd2:	4b59      	ldr	r3, [pc, #356]	; (8001e38 <MAX7219_SetDigit+0x1b0>)
 8001cd4:	18d3      	adds	r3, r2, r3
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	469f      	mov	pc, r3
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
			ValueToSend = Max7219_Digits[Value+1];
 8001cda:	1d7b      	adds	r3, r7, #5
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	230f      	movs	r3, #15
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	4955      	ldr	r1, [pc, #340]	; (8001e3c <MAX7219_SetDigit+0x1b4>)
 8001ce6:	5c8a      	ldrb	r2, [r1, r2]
 8001ce8:	701a      	strb	r2, [r3, #0]
			break;
 8001cea:	e083      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			ValueToSend = Max7219_Digits[Value-47];
 8001cec:	1d7b      	adds	r3, r7, #5
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	3b2f      	subs	r3, #47	; 0x2f
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	4950      	ldr	r1, [pc, #320]	; (8001e3c <MAX7219_SetDigit+0x1b4>)
 8001cfa:	5c8a      	ldrb	r2, [r1, r2]
 8001cfc:	701a      	strb	r2, [r3, #0]
			break;
 8001cfe:	e079      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case ' ':
			ValueToSend = Max7219_Digits[0];
 8001d00:	230f      	movs	r3, #15
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
			break;
 8001d08:	e074      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'a':
		case 'A':
			ValueToSend = Max7219_Digits[11];
 8001d0a:	230f      	movs	r3, #15
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	2277      	movs	r2, #119	; 0x77
 8001d10:	701a      	strb	r2, [r3, #0]
			break;
 8001d12:	e06f      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'b':
		case 'B':
			ValueToSend = Max7219_Digits[12];
 8001d14:	230f      	movs	r3, #15
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	221f      	movs	r2, #31
 8001d1a:	701a      	strb	r2, [r3, #0]
			break;
 8001d1c:	e06a      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'c':
			ValueToSend = Max7219_Digits[13];
 8001d1e:	230f      	movs	r3, #15
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	220d      	movs	r2, #13
 8001d24:	701a      	strb	r2, [r3, #0]
			break;
 8001d26:	e065      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'C':
			ValueToSend = Max7219_Digits[14];
 8001d28:	230f      	movs	r3, #15
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	224e      	movs	r2, #78	; 0x4e
 8001d2e:	701a      	strb	r2, [r3, #0]
			break;
 8001d30:	e060      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'd':
		case 'D':
			ValueToSend = Max7219_Digits[15];
 8001d32:	230f      	movs	r3, #15
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	223d      	movs	r2, #61	; 0x3d
 8001d38:	701a      	strb	r2, [r3, #0]
			break;
 8001d3a:	e05b      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'e':
			ValueToSend = Max7219_Digits[16];
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	226f      	movs	r2, #111	; 0x6f
 8001d42:	701a      	strb	r2, [r3, #0]
			break;
 8001d44:	e056      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'E':
			ValueToSend = Max7219_Digits[17];
 8001d46:	230f      	movs	r3, #15
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	224f      	movs	r2, #79	; 0x4f
 8001d4c:	701a      	strb	r2, [r3, #0]
			break;
 8001d4e:	e051      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'F':
		case 'f':
			ValueToSend = Max7219_Digits[18];
 8001d50:	230f      	movs	r3, #15
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	2247      	movs	r2, #71	; 0x47
 8001d56:	701a      	strb	r2, [r3, #0]
			break;
 8001d58:	e04c      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'h':
			ValueToSend = Max7219_Digits[19];
 8001d5a:	230f      	movs	r3, #15
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	221e      	movs	r2, #30
 8001d60:	701a      	strb	r2, [r3, #0]
			break;
 8001d62:	e047      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'H':
			ValueToSend = Max7219_Digits[20];
 8001d64:	230f      	movs	r3, #15
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	2237      	movs	r2, #55	; 0x37
 8001d6a:	701a      	strb	r2, [r3, #0]
			break;
 8001d6c:	e042      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'i':
		case 'I':
			ValueToSend = Max7219_Digits[21];
 8001d6e:	230f      	movs	r3, #15
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	2206      	movs	r2, #6
 8001d74:	701a      	strb	r2, [r3, #0]
			break;
 8001d76:	e03d      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'j':
		case 'J':
			ValueToSend = Max7219_Digits[22];
 8001d78:	230f      	movs	r3, #15
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	2238      	movs	r2, #56	; 0x38
 8001d7e:	701a      	strb	r2, [r3, #0]
			break;
 8001d80:	e038      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'l':
		case 'L':
			ValueToSend = Max7219_Digits[23];
 8001d82:	230f      	movs	r3, #15
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	220e      	movs	r2, #14
 8001d88:	701a      	strb	r2, [r3, #0]
			break;
 8001d8a:	e033      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'n':
		case 'N':
			ValueToSend = Max7219_Digits[24];
 8001d8c:	230f      	movs	r3, #15
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	2215      	movs	r2, #21
 8001d92:	701a      	strb	r2, [r3, #0]
			break;
 8001d94:	e02e      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'o':
		case 'O':
			ValueToSend = Max7219_Digits[25];
 8001d96:	230f      	movs	r3, #15
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	221d      	movs	r2, #29
 8001d9c:	701a      	strb	r2, [r3, #0]
			break;
 8001d9e:	e029      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'p':
		case 'P':
			ValueToSend = Max7219_Digits[26];
 8001da0:	230f      	movs	r3, #15
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	2267      	movs	r2, #103	; 0x67
 8001da6:	701a      	strb	r2, [r3, #0]
			break;
 8001da8:	e024      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'r':
		case 'R':
			ValueToSend = Max7219_Digits[27];
 8001daa:	230f      	movs	r3, #15
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	2205      	movs	r2, #5
 8001db0:	701a      	strb	r2, [r3, #0]
			break;
 8001db2:	e01f      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 's':
		case 'S':
			ValueToSend = Max7219_Digits[6];
 8001db4:	230f      	movs	r3, #15
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	225b      	movs	r2, #91	; 0x5b
 8001dba:	701a      	strb	r2, [r3, #0]
			break;
 8001dbc:	e01a      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'u':
			ValueToSend = Max7219_Digits[28];
 8001dbe:	230f      	movs	r3, #15
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	221c      	movs	r2, #28
 8001dc4:	701a      	strb	r2, [r3, #0]
			break;
 8001dc6:	e015      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'U':
			ValueToSend = Max7219_Digits[29];
 8001dc8:	230f      	movs	r3, #15
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	223e      	movs	r2, #62	; 0x3e
 8001dce:	701a      	strb	r2, [r3, #0]
			break;
 8001dd0:	e010      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'y':
		case 'Y':
			ValueToSend = Max7219_Digits[30];
 8001dd2:	230f      	movs	r3, #15
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	223b      	movs	r2, #59	; 0x3b
 8001dd8:	701a      	strb	r2, [r3, #0]
			break;
 8001dda:	e00b      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case 'z':
		case 'Z':
			ValueToSend = Max7219_Digits[3];
 8001ddc:	230f      	movs	r3, #15
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	226d      	movs	r2, #109	; 0x6d
 8001de2:	701a      	strb	r2, [r3, #0]
			break;
 8001de4:	e006      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		case '*':
			ValueToSend = Max7219_Digits[31];
 8001de6:	230f      	movs	r3, #15
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	2263      	movs	r2, #99	; 0x63
 8001dec:	701a      	strb	r2, [r3, #0]
			break;
 8001dee:	e001      	b.n	8001df4 <MAX7219_SetDigit+0x16c>
		default:
			return MAX7219_UNSUPPORTED_CHAR;
 8001df0:	2302      	movs	r3, #2
 8001df2:	e01c      	b.n	8001e2e <MAX7219_SetDigit+0x1a6>
			break;
	}

	if(MAX7219_OK != MAX7219_SendToDevice(DeviceNumber, (MAX7219_DIGIT0_REGISTER + Digit), ValueToSend|(Dot?0x80:0x00)))
 8001df4:	1dbb      	adds	r3, r7, #6
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	b2d9      	uxtb	r1, r3
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <MAX7219_SetDigit+0x182>
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	425b      	negs	r3, r3
 8001e08:	e000      	b.n	8001e0c <MAX7219_SetDigit+0x184>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	18ba      	adds	r2, r7, r2
 8001e10:	7812      	ldrb	r2, [r2, #0]
 8001e12:	b252      	sxtb	r2, r2
 8001e14:	4313      	orrs	r3, r2
 8001e16:	b25b      	sxtb	r3, r3
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	1dfb      	adds	r3, r7, #7
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7ff fe30 	bl	8001a84 <MAX7219_SendToDevice>
 8001e24:	1e03      	subs	r3, r0, #0
 8001e26:	d001      	beq.n	8001e2c <MAX7219_SetDigit+0x1a4>
	{
		return MAX7219_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <MAX7219_SetDigit+0x1a6>
	}

	return MAX7219_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b004      	add	sp, #16
 8001e34:	bdb0      	pop	{r4, r5, r7, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	08006e30 	.word	0x08006e30
 8001e3c:	08006e10 	.word	0x08006e10

08001e40 <MAX7219_ClearAll>:

MAX7219_STATUS MAX7219_ClearAll(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for(i = 0; i < MAX7219_DEVICES; i++)
 8001e46:	1dfb      	adds	r3, r7, #7
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	e01d      	b.n	8001e8a <MAX7219_ClearAll+0x4a>
	{
		for(j = 0; j < 8; j++)
 8001e4e:	1dbb      	adds	r3, r7, #6
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
 8001e54:	e010      	b.n	8001e78 <MAX7219_ClearAll+0x38>
		{
			if(MAX7219_OK != MAX7219_SetDigit(i, j, ' ', 0)) return MAX7219_ERROR;
 8001e56:	1dbb      	adds	r3, r7, #6
 8001e58:	7819      	ldrb	r1, [r3, #0]
 8001e5a:	1dfb      	adds	r3, r7, #7
 8001e5c:	7818      	ldrb	r0, [r3, #0]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2220      	movs	r2, #32
 8001e62:	f7ff ff11 	bl	8001c88 <MAX7219_SetDigit>
 8001e66:	1e03      	subs	r3, r0, #0
 8001e68:	d001      	beq.n	8001e6e <MAX7219_ClearAll+0x2e>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e012      	b.n	8001e94 <MAX7219_ClearAll+0x54>
		for(j = 0; j < 8; j++)
 8001e6e:	1dbb      	adds	r3, r7, #6
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	1dbb      	adds	r3, r7, #6
 8001e74:	3201      	adds	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
 8001e78:	1dbb      	adds	r3, r7, #6
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b07      	cmp	r3, #7
 8001e7e:	d9ea      	bls.n	8001e56 <MAX7219_ClearAll+0x16>
	for(i = 0; i < MAX7219_DEVICES; i++)
 8001e80:	1dfb      	adds	r3, r7, #7
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	1dfb      	adds	r3, r7, #7
 8001e86:	3201      	adds	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
 8001e8a:	1dfb      	adds	r3, r7, #7
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d9dd      	bls.n	8001e4e <MAX7219_ClearAll+0xe>
		}
	}
	return MAX7219_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	0018      	movs	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b002      	add	sp, #8
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <MAX7219_PutStringHelper>:

MAX7219_STATUS MAX7219_PutStringHelper(char *String, uint8_t Adjust, int Start)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	230b      	movs	r3, #11
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	1c0a      	adds	r2, r1, #0
 8001eac:	701a      	strb	r2, [r3, #0]
	uint8_t StringLength;
	int Offset;
	uint8_t Device;
	uint8_t Dot = 0;
 8001eae:	231a      	movs	r3, #26
 8001eb0:	18fb      	adds	r3, r7, r3
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
	uint8_t Commas = 0;
 8001eb6:	2319      	movs	r3, #25
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
	char tmp;
	uint8_t i;

	StringLength = strlen(String);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7fe f92b 	bl	800011c <strlen>
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	2317      	movs	r3, #23
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < StringLength; i++)
 8001ece:	2318      	movs	r3, #24
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	e01a      	b.n	8001f0e <MAX7219_PutStringHelper+0x72>
	{
		if(String[i] == '.' || String[i] == ',')
 8001ed8:	2118      	movs	r1, #24
 8001eda:	187b      	adds	r3, r7, r1
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	18d3      	adds	r3, r2, r3
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8001ee6:	d006      	beq.n	8001ef6 <MAX7219_PutStringHelper+0x5a>
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	18d3      	adds	r3, r2, r3
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b2c      	cmp	r3, #44	; 0x2c
 8001ef4:	d105      	bne.n	8001f02 <MAX7219_PutStringHelper+0x66>
		{
			Commas++;
 8001ef6:	2119      	movs	r1, #25
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	781a      	ldrb	r2, [r3, #0]
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	3201      	adds	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < StringLength; i++)
 8001f02:	2118      	movs	r1, #24
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	187b      	adds	r3, r7, r1
 8001f0a:	3201      	adds	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
 8001f0e:	2318      	movs	r3, #24
 8001f10:	18fa      	adds	r2, r7, r3
 8001f12:	2117      	movs	r1, #23
 8001f14:	187b      	adds	r3, r7, r1
 8001f16:	7812      	ldrb	r2, [r2, #0]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d3dc      	bcc.n	8001ed8 <MAX7219_PutStringHelper+0x3c>
		}
	}

	if(Adjust == 0) // Right
 8001f1e:	230b      	movs	r3, #11
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d11c      	bne.n	8001f62 <MAX7219_PutStringHelper+0xc6>
	{
		Offset = (MAX7219_DEVICES * 8) - StringLength + Commas;
 8001f28:	187b      	adds	r3, r7, r1
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2210      	movs	r2, #16
 8001f2e:	1ad2      	subs	r2, r2, r3
 8001f30:	2319      	movs	r3, #25
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	18d3      	adds	r3, r2, r3
 8001f38:	61fb      	str	r3, [r7, #28]
		Device = Offset / 8;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	da00      	bge.n	8001f42 <MAX7219_PutStringHelper+0xa6>
 8001f40:	3307      	adds	r3, #7
 8001f42:	10db      	asrs	r3, r3, #3
 8001f44:	001a      	movs	r2, r3
 8001f46:	231b      	movs	r3, #27
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	701a      	strb	r2, [r3, #0]
		Offset %= 8;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	4a5a      	ldr	r2, [pc, #360]	; (80020b8 <MAX7219_PutStringHelper+0x21c>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	d504      	bpl.n	8001f5e <MAX7219_PutStringHelper+0xc2>
 8001f54:	3b01      	subs	r3, #1
 8001f56:	2208      	movs	r2, #8
 8001f58:	4252      	negs	r2, r2
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	e09b      	b.n	800209a <MAX7219_PutStringHelper+0x1fe>
	}
	else if(Adjust == 1) // Left
 8001f62:	230b      	movs	r3, #11
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d106      	bne.n	8001f7a <MAX7219_PutStringHelper+0xde>
	{
		Offset = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
		Device = 0;
 8001f70:	231b      	movs	r3, #27
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	e08f      	b.n	800209a <MAX7219_PutStringHelper+0x1fe>
	}
	else if(Adjust == 2) // Center
 8001f7a:	230b      	movs	r3, #11
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d121      	bne.n	8001fc8 <MAX7219_PutStringHelper+0x12c>
	{
		Offset = ((MAX7219_DEVICES * 8) - StringLength + Commas) / 2;
 8001f84:	2317      	movs	r3, #23
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2210      	movs	r2, #16
 8001f8c:	1ad2      	subs	r2, r2, r3
 8001f8e:	2319      	movs	r3, #25
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	18d3      	adds	r3, r2, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da00      	bge.n	8001f9c <MAX7219_PutStringHelper+0x100>
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	105b      	asrs	r3, r3, #1
 8001f9e:	61fb      	str	r3, [r7, #28]
		Device = Offset / 8;
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	da00      	bge.n	8001fa8 <MAX7219_PutStringHelper+0x10c>
 8001fa6:	3307      	adds	r3, #7
 8001fa8:	10db      	asrs	r3, r3, #3
 8001faa:	001a      	movs	r2, r3
 8001fac:	231b      	movs	r3, #27
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	701a      	strb	r2, [r3, #0]
		Offset %= 8;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	4a40      	ldr	r2, [pc, #256]	; (80020b8 <MAX7219_PutStringHelper+0x21c>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d504      	bpl.n	8001fc4 <MAX7219_PutStringHelper+0x128>
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	4252      	negs	r2, r2
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	e068      	b.n	800209a <MAX7219_PutStringHelper+0x1fe>
	}
	else if(Adjust == 3) // Center
 8001fc8:	230b      	movs	r3, #11
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d125      	bne.n	800201e <MAX7219_PutStringHelper+0x182>
	{
		Offset = Start;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	61fb      	str	r3, [r7, #28]

		if(Offset < 0)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	da04      	bge.n	8001fe6 <MAX7219_PutStringHelper+0x14a>
		{
			Device = 0;
 8001fdc:	231b      	movs	r3, #27
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
 8001fe4:	e059      	b.n	800209a <MAX7219_PutStringHelper+0x1fe>
		}
		else if(Offset > (MAX7219_DEVICES * 7))
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	2b0e      	cmp	r3, #14
 8001fea:	dd04      	ble.n	8001ff6 <MAX7219_PutStringHelper+0x15a>
		{
			Device = MAX7219_DEVICES - 1;
 8001fec:	231b      	movs	r3, #27
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	e051      	b.n	800209a <MAX7219_PutStringHelper+0x1fe>
		}
		else
		{
			Device = Offset / 8;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da00      	bge.n	8001ffe <MAX7219_PutStringHelper+0x162>
 8001ffc:	3307      	adds	r3, #7
 8001ffe:	10db      	asrs	r3, r3, #3
 8002000:	001a      	movs	r2, r3
 8002002:	231b      	movs	r3, #27
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	701a      	strb	r2, [r3, #0]
			Offset %= 8;
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	4a2b      	ldr	r2, [pc, #172]	; (80020b8 <MAX7219_PutStringHelper+0x21c>)
 800200c:	4013      	ands	r3, r2
 800200e:	d504      	bpl.n	800201a <MAX7219_PutStringHelper+0x17e>
 8002010:	3b01      	subs	r3, #1
 8002012:	2208      	movs	r2, #8
 8002014:	4252      	negs	r2, r2
 8002016:	4313      	orrs	r3, r2
 8002018:	3301      	adds	r3, #1
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	e03d      	b.n	800209a <MAX7219_PutStringHelper+0x1fe>
		}

	}
	else
	{
		return MAX7219_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e045      	b.n	80020ae <MAX7219_PutStringHelper+0x212>
	}

	while((tmp = *String))
	{
		if(*(String+1) == '.' || *(String+1) == ',')
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	3301      	adds	r3, #1
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b2e      	cmp	r3, #46	; 0x2e
 800202a:	d004      	beq.n	8002036 <MAX7219_PutStringHelper+0x19a>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3301      	adds	r3, #1
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b2c      	cmp	r3, #44	; 0x2c
 8002034:	d107      	bne.n	8002046 <MAX7219_PutStringHelper+0x1aa>
		{
			Dot = 1;
 8002036:	231a      	movs	r3, #26
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
			String++;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3301      	adds	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	e003      	b.n	800204e <MAX7219_PutStringHelper+0x1b2>
		}
		else
		{
			Dot = 0;
 8002046:	231a      	movs	r3, #26
 8002048:	18fb      	adds	r3, r7, r3
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
		}

		if(MAX7219_ERROR == MAX7219_SetDigit(Device, (7-(Offset++)), tmp, Dot)) return MAX7219_ERROR;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	61fa      	str	r2, [r7, #28]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2207      	movs	r2, #7
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	b2d9      	uxtb	r1, r3
 800205c:	231a      	movs	r3, #26
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	781c      	ldrb	r4, [r3, #0]
 8002062:	2316      	movs	r3, #22
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	781a      	ldrb	r2, [r3, #0]
 8002068:	231b      	movs	r3, #27
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	7818      	ldrb	r0, [r3, #0]
 800206e:	0023      	movs	r3, r4
 8002070:	f7ff fe0a 	bl	8001c88 <MAX7219_SetDigit>
 8002074:	0003      	movs	r3, r0
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <MAX7219_PutStringHelper+0x1e2>
 800207a:	2301      	movs	r3, #1
 800207c:	e017      	b.n	80020ae <MAX7219_PutStringHelper+0x212>

		if(Offset > 7)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	2b07      	cmp	r3, #7
 8002082:	dd07      	ble.n	8002094 <MAX7219_PutStringHelper+0x1f8>
		{
			Device++;
 8002084:	211b      	movs	r1, #27
 8002086:	187b      	adds	r3, r7, r1
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	187b      	adds	r3, r7, r1
 800208c:	3201      	adds	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
			Offset = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
		}
		String++;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3301      	adds	r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
	while((tmp = *String))
 800209a:	2116      	movs	r1, #22
 800209c:	187b      	adds	r3, r7, r1
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	7812      	ldrb	r2, [r2, #0]
 80020a2:	701a      	strb	r2, [r3, #0]
 80020a4:	187b      	adds	r3, r7, r1
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ba      	bne.n	8002022 <MAX7219_PutStringHelper+0x186>
	}

	return MAX7219_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	0018      	movs	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b009      	add	sp, #36	; 0x24
 80020b4:	bd90      	pop	{r4, r7, pc}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	80000007 	.word	0x80000007

080020bc <MAX7219_PutString>:

MAX7219_STATUS MAX7219_PutString(int Start, char *String)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
	return MAX7219_PutStringHelper(String, 3, Start);
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2103      	movs	r1, #3
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7ff fee5 	bl	8001e9c <MAX7219_PutStringHelper>
 80020d2:	0003      	movs	r3, r0
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}

080020dc <MAX7219_Init>:
{
	return MAX7219_PutStringHelper(String, 2, 0);
}

MAX7219_STATUS MAX7219_Init(SPI_HandleTypeDef *hspi)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	max7219_spi = hspi;
 80020e4:	4b2a      	ldr	r3, [pc, #168]	; (8002190 <MAX7219_Init+0xb4>)
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	601a      	str	r2, [r3, #0]

	for(i = 0; i < MAX7219_DEVICES; i++)
 80020ea:	230f      	movs	r3, #15
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	e042      	b.n	800217a <MAX7219_Init+0x9e>
	{
		if(MAX7219_OK != MAX7219_SetDecodeMode(i, NoDecode)) return MAX7219_ERROR;
 80020f4:	230f      	movs	r3, #15
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2100      	movs	r1, #0
 80020fc:	0018      	movs	r0, r3
 80020fe:	f7ff fd0f 	bl	8001b20 <MAX7219_SetDecodeMode>
 8002102:	1e03      	subs	r3, r0, #0
 8002104:	d001      	beq.n	800210a <MAX7219_Init+0x2e>
 8002106:	2301      	movs	r3, #1
 8002108:	e03d      	b.n	8002186 <MAX7219_Init+0xaa>
		if(MAX7219_OK != MAX7219_SetIntensity(i, 1)) return MAX7219_ERROR;
 800210a:	230f      	movs	r3, #15
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2101      	movs	r1, #1
 8002112:	0018      	movs	r0, r3
 8002114:	f7ff fd28 	bl	8001b68 <MAX7219_SetIntensity>
 8002118:	1e03      	subs	r3, r0, #0
 800211a:	d001      	beq.n	8002120 <MAX7219_Init+0x44>
 800211c:	2301      	movs	r3, #1
 800211e:	e032      	b.n	8002186 <MAX7219_Init+0xaa>
		if(MAX7219_OK != MAX7219_SetScanLimit(i, ScanDigit0_7)) return MAX7219_ERROR;
 8002120:	230f      	movs	r3, #15
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2107      	movs	r1, #7
 8002128:	0018      	movs	r0, r3
 800212a:	f7ff fd41 	bl	8001bb0 <MAX7219_SetScanLimit>
 800212e:	1e03      	subs	r3, r0, #0
 8002130:	d001      	beq.n	8002136 <MAX7219_Init+0x5a>
 8002132:	2301      	movs	r3, #1
 8002134:	e027      	b.n	8002186 <MAX7219_Init+0xaa>
		if(MAX7219_OK != MAX7219_SetDisplayTest(i, TestOff)) return MAX7219_ERROR;
 8002136:	230f      	movs	r3, #15
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2100      	movs	r1, #0
 800213e:	0018      	movs	r0, r3
 8002140:	f7ff fd7e 	bl	8001c40 <MAX7219_SetDisplayTest>
 8002144:	1e03      	subs	r3, r0, #0
 8002146:	d001      	beq.n	800214c <MAX7219_Init+0x70>
 8002148:	2301      	movs	r3, #1
 800214a:	e01c      	b.n	8002186 <MAX7219_Init+0xaa>
		if(MAX7219_OK != MAX7219_Shutdown(i, NormalOperation)) return MAX7219_ERROR;
 800214c:	230f      	movs	r3, #15
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2101      	movs	r1, #1
 8002154:	0018      	movs	r0, r3
 8002156:	f7ff fd4f 	bl	8001bf8 <MAX7219_Shutdown>
 800215a:	1e03      	subs	r3, r0, #0
 800215c:	d001      	beq.n	8002162 <MAX7219_Init+0x86>
 800215e:	2301      	movs	r3, #1
 8002160:	e011      	b.n	8002186 <MAX7219_Init+0xaa>
		if(MAX7219_OK != MAX7219_ClearAll()) return MAX7219_ERROR;
 8002162:	f7ff fe6d 	bl	8001e40 <MAX7219_ClearAll>
 8002166:	1e03      	subs	r3, r0, #0
 8002168:	d001      	beq.n	800216e <MAX7219_Init+0x92>
 800216a:	2301      	movs	r3, #1
 800216c:	e00b      	b.n	8002186 <MAX7219_Init+0xaa>
	for(i = 0; i < MAX7219_DEVICES; i++)
 800216e:	210f      	movs	r1, #15
 8002170:	187b      	adds	r3, r7, r1
 8002172:	781a      	ldrb	r2, [r3, #0]
 8002174:	187b      	adds	r3, r7, r1
 8002176:	3201      	adds	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	230f      	movs	r3, #15
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d9b7      	bls.n	80020f4 <MAX7219_Init+0x18>
	}

	return MAX7219_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b004      	add	sp, #16
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	20000310 	.word	0x20000310

08002194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002198:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <HAL_MspInit+0x24>)
 800219a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_MspInit+0x24>)
 800219e:	2101      	movs	r1, #1
 80021a0:	430a      	orrs	r2, r1
 80021a2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <HAL_MspInit+0x24>)
 80021a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <HAL_MspInit+0x24>)
 80021aa:	2180      	movs	r1, #128	; 0x80
 80021ac:	0549      	lsls	r1, r1, #21
 80021ae:	430a      	orrs	r2, r1
 80021b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40021000 	.word	0x40021000

080021bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b08b      	sub	sp, #44	; 0x2c
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	2414      	movs	r4, #20
 80021c6:	193b      	adds	r3, r7, r4
 80021c8:	0018      	movs	r0, r3
 80021ca:	2314      	movs	r3, #20
 80021cc:	001a      	movs	r2, r3
 80021ce:	2100      	movs	r1, #0
 80021d0:	f003 ff99 	bl	8006106 <memset>
  if(hspi->Instance==SPI1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a3c      	ldr	r2, [pc, #240]	; (80022cc <HAL_SPI_MspInit+0x110>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d12a      	bne.n	8002234 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021de:	4b3c      	ldr	r3, [pc, #240]	; (80022d0 <HAL_SPI_MspInit+0x114>)
 80021e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e2:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_SPI_MspInit+0x114>)
 80021e4:	2180      	movs	r1, #128	; 0x80
 80021e6:	0149      	lsls	r1, r1, #5
 80021e8:	430a      	orrs	r2, r1
 80021ea:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ec:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <HAL_SPI_MspInit+0x114>)
 80021ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f0:	4b37      	ldr	r3, [pc, #220]	; (80022d0 <HAL_SPI_MspInit+0x114>)
 80021f2:	2101      	movs	r1, #1
 80021f4:	430a      	orrs	r2, r1
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80021f8:	4b35      	ldr	r3, [pc, #212]	; (80022d0 <HAL_SPI_MspInit+0x114>)
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	2201      	movs	r2, #1
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002204:	0021      	movs	r1, r4
 8002206:	187b      	adds	r3, r7, r1
 8002208:	22a0      	movs	r2, #160	; 0xa0
 800220a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	187b      	adds	r3, r7, r1
 800220e:	2202      	movs	r2, #2
 8002210:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	187b      	adds	r3, r7, r1
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002218:	187b      	adds	r3, r7, r1
 800221a:	2203      	movs	r2, #3
 800221c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800221e:	187b      	adds	r3, r7, r1
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002224:	187a      	adds	r2, r7, r1
 8002226:	23a0      	movs	r3, #160	; 0xa0
 8002228:	05db      	lsls	r3, r3, #23
 800222a:	0011      	movs	r1, r2
 800222c:	0018      	movs	r0, r3
 800222e:	f000 fb7d 	bl	800292c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002232:	e046      	b.n	80022c2 <HAL_SPI_MspInit+0x106>
  else if(hspi->Instance==SPI2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a26      	ldr	r2, [pc, #152]	; (80022d4 <HAL_SPI_MspInit+0x118>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d141      	bne.n	80022c2 <HAL_SPI_MspInit+0x106>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_SPI_MspInit+0x114>)
 8002240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002242:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <HAL_SPI_MspInit+0x114>)
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	01c9      	lsls	r1, r1, #7
 8002248:	430a      	orrs	r2, r1
 800224a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <HAL_SPI_MspInit+0x114>)
 800224e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002250:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <HAL_SPI_MspInit+0x114>)
 8002252:	2102      	movs	r1, #2
 8002254:	430a      	orrs	r2, r1
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_SPI_MspInit+0x114>)
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	2202      	movs	r2, #2
 800225e:	4013      	ands	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002264:	2114      	movs	r1, #20
 8002266:	187b      	adds	r3, r7, r1
 8002268:	2280      	movs	r2, #128	; 0x80
 800226a:	00d2      	lsls	r2, r2, #3
 800226c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	000c      	movs	r4, r1
 8002270:	193b      	adds	r3, r7, r4
 8002272:	2202      	movs	r2, #2
 8002274:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	193b      	adds	r3, r7, r4
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227c:	193b      	adds	r3, r7, r4
 800227e:	2203      	movs	r2, #3
 8002280:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002282:	193b      	adds	r3, r7, r4
 8002284:	2205      	movs	r2, #5
 8002286:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002288:	193b      	adds	r3, r7, r4
 800228a:	4a13      	ldr	r2, [pc, #76]	; (80022d8 <HAL_SPI_MspInit+0x11c>)
 800228c:	0019      	movs	r1, r3
 800228e:	0010      	movs	r0, r2
 8002290:	f000 fb4c 	bl	800292c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002294:	0021      	movs	r1, r4
 8002296:	187b      	adds	r3, r7, r1
 8002298:	22c0      	movs	r2, #192	; 0xc0
 800229a:	0212      	lsls	r2, r2, #8
 800229c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	187b      	adds	r3, r7, r1
 80022a0:	2202      	movs	r2, #2
 80022a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	187b      	adds	r3, r7, r1
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022aa:	187b      	adds	r3, r7, r1
 80022ac:	2203      	movs	r2, #3
 80022ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80022b0:	187b      	adds	r3, r7, r1
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b6:	187b      	adds	r3, r7, r1
 80022b8:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <HAL_SPI_MspInit+0x11c>)
 80022ba:	0019      	movs	r1, r3
 80022bc:	0010      	movs	r0, r2
 80022be:	f000 fb35 	bl	800292c <HAL_GPIO_Init>
}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b00b      	add	sp, #44	; 0x2c
 80022c8:	bd90      	pop	{r4, r7, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	40013000 	.word	0x40013000
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40003800 	.word	0x40003800
 80022d8:	50000400 	.word	0x50000400

080022dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	05db      	lsls	r3, r3, #23
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d10e      	bne.n	800230e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_TIM_Base_MspInit+0x60>)
 80022f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_TIM_Base_MspInit+0x60>)
 80022f6:	2101      	movs	r1, #1
 80022f8:	430a      	orrs	r2, r1
 80022fa:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	200f      	movs	r0, #15
 8002302:	f000 fae1 	bl	80028c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002306:	200f      	movs	r0, #15
 8002308:	f000 faf3 	bl	80028f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800230c:	e012      	b.n	8002334 <HAL_TIM_Base_MspInit+0x58>
  else if(htim_base->Instance==TIM3)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <HAL_TIM_Base_MspInit+0x64>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d10d      	bne.n	8002334 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_TIM_Base_MspInit+0x60>)
 800231a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800231c:	4b07      	ldr	r3, [pc, #28]	; (800233c <HAL_TIM_Base_MspInit+0x60>)
 800231e:	2102      	movs	r1, #2
 8002320:	430a      	orrs	r2, r1
 8002322:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	2100      	movs	r1, #0
 8002328:	2010      	movs	r0, #16
 800232a:	f000 facd 	bl	80028c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800232e:	2010      	movs	r0, #16
 8002330:	f000 fadf 	bl	80028f2 <HAL_NVIC_EnableIRQ>
}
 8002334:	46c0      	nop			; (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000
 8002340:	40000400 	.word	0x40000400

08002344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	240c      	movs	r4, #12
 800234e:	193b      	adds	r3, r7, r4
 8002350:	0018      	movs	r0, r3
 8002352:	2314      	movs	r3, #20
 8002354:	001a      	movs	r2, r3
 8002356:	2100      	movs	r1, #0
 8002358:	f003 fed5 	bl	8006106 <memset>
  if(huart->Instance==USART1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a18      	ldr	r2, [pc, #96]	; (80023c4 <HAL_UART_MspInit+0x80>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d12a      	bne.n	80023bc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002366:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_UART_MspInit+0x84>)
 8002368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_UART_MspInit+0x84>)
 800236c:	2180      	movs	r1, #128	; 0x80
 800236e:	01c9      	lsls	r1, r1, #7
 8002370:	430a      	orrs	r2, r1
 8002372:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	4b14      	ldr	r3, [pc, #80]	; (80023c8 <HAL_UART_MspInit+0x84>)
 8002376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_UART_MspInit+0x84>)
 800237a:	2101      	movs	r1, #1
 800237c:	430a      	orrs	r2, r1
 800237e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <HAL_UART_MspInit+0x84>)
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	2201      	movs	r2, #1
 8002386:	4013      	ands	r3, r2
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800238c:	193b      	adds	r3, r7, r4
 800238e:	22c0      	movs	r2, #192	; 0xc0
 8002390:	00d2      	lsls	r2, r2, #3
 8002392:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	0021      	movs	r1, r4
 8002396:	187b      	adds	r3, r7, r1
 8002398:	2202      	movs	r2, #2
 800239a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	187b      	adds	r3, r7, r1
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	187b      	adds	r3, r7, r1
 80023a4:	2203      	movs	r2, #3
 80023a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	2204      	movs	r2, #4
 80023ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ae:	187a      	adds	r2, r7, r1
 80023b0:	23a0      	movs	r3, #160	; 0xa0
 80023b2:	05db      	lsls	r3, r3, #23
 80023b4:	0011      	movs	r1, r2
 80023b6:	0018      	movs	r0, r3
 80023b8:	f000 fab8 	bl	800292c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023bc:	46c0      	nop			; (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	b009      	add	sp, #36	; 0x24
 80023c2:	bd90      	pop	{r4, r7, pc}
 80023c4:	40013800 	.word	0x40013800
 80023c8:	40021000 	.word	0x40021000

080023cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <NMI_Handler+0x4>

080023d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d6:	e7fe      	b.n	80023d6 <HardFault_Handler+0x4>

080023d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023dc:	46c0      	nop			; (mov r8, r8)
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <SysTick_Handler+0x38>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <SysTick_Handler+0x18>
		Timer1--;
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <SysTick_Handler+0x38>)
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <SysTick_Handler+0x38>)
 8002402:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <SysTick_Handler+0x3c>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <SysTick_Handler+0x2c>
		Timer2--;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <SysTick_Handler+0x3c>)
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <SysTick_Handler+0x3c>)
 8002416:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002418:	f000 f96a 	bl	80026f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	20000150 	.word	0x20000150
 8002428:	20000152 	.word	0x20000152

0800242c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	if (EXTI->PR & EXTI_PR_PR1) // execute player0_button
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <EXTI0_1_IRQHandler+0x50>)
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	2202      	movs	r2, #2
 8002436:	4013      	ands	r3, r2
 8002438:	d008      	beq.n	800244c <EXTI0_1_IRQHandler+0x20>
	{
		if ( compareGameState("Playing") )	// only if the game is running
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <EXTI0_1_IRQHandler+0x54>)
 800243c:	0018      	movs	r0, r3
 800243e:	f7fe fe89 	bl	8001154 <compareGameState>
 8002442:	1e03      	subs	r3, r0, #0
 8002444:	d002      	beq.n	800244c <EXTI0_1_IRQHandler+0x20>
		{
		changePlayer(1);
 8002446:	2001      	movs	r0, #1
 8002448:	f7fe ffb6 	bl	80013b8 <changePlayer>
		}
	}
	if (EXTI->PR & EXTI_PR_PR0) // execute player1_button
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <EXTI0_1_IRQHandler+0x50>)
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	2201      	movs	r2, #1
 8002452:	4013      	ands	r3, r2
 8002454:	d008      	beq.n	8002468 <EXTI0_1_IRQHandler+0x3c>
	{
		if ( compareGameState("Playing") )	// only if the game is running
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <EXTI0_1_IRQHandler+0x54>)
 8002458:	0018      	movs	r0, r3
 800245a:	f7fe fe7b 	bl	8001154 <compareGameState>
 800245e:	1e03      	subs	r3, r0, #0
 8002460:	d002      	beq.n	8002468 <EXTI0_1_IRQHandler+0x3c>
		{
		changePlayer(0);
 8002462:	2000      	movs	r0, #0
 8002464:	f7fe ffa8 	bl	80013b8 <changePlayer>
		}
	}

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(player0_Pin);
 8002468:	2001      	movs	r0, #1
 800246a:	f000 fbfb 	bl	8002c64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(player1_Pin);
 800246e:	2002      	movs	r0, #2
 8002470:	f000 fbf8 	bl	8002c64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */
  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	40010400 	.word	0x40010400
 8002480:	08006dc0 	.word	0x08006dc0

08002484 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
	if (EXTI->PR & EXTI_PR_PR2) // execute preset/reset button
 8002488:	4b22      	ldr	r3, [pc, #136]	; (8002514 <EXTI2_3_IRQHandler+0x90>)
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	2204      	movs	r2, #4
 800248e:	4013      	ands	r3, r2
 8002490:	d01e      	beq.n	80024d0 <EXTI2_3_IRQHandler+0x4c>
	{
		if ( compareGameState("Setting") ) // choose preset
 8002492:	4b21      	ldr	r3, [pc, #132]	; (8002518 <EXTI2_3_IRQHandler+0x94>)
 8002494:	0018      	movs	r0, r3
 8002496:	f7fe fe5d 	bl	8001154 <compareGameState>
 800249a:	1e03      	subs	r3, r0, #0
 800249c:	d009      	beq.n	80024b2 <EXTI2_3_IRQHandler+0x2e>
		{
	        choosePreset();						// set next preset
 800249e:	f7fe fe71 	bl	8001184 <choosePreset>
	    	changePrintStringPreset();			// prepare string to display
 80024a2:	f7fe ffad 	bl	8001400 <changePrintStringPreset>
	        MAX7219_PutString(0, printString);	// display string
 80024a6:	4b1d      	ldr	r3, [pc, #116]	; (800251c <EXTI2_3_IRQHandler+0x98>)
 80024a8:	0019      	movs	r1, r3
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7ff fe06 	bl	80020bc <MAX7219_PutString>
 80024b0:	e00e      	b.n	80024d0 <EXTI2_3_IRQHandler+0x4c>
//	        printf("tim = %d[m], inc = %d[s]\n",game.startTime/(4*60),game.increment/4); #debugging
		}
		else if( compareGameState("Paused") ) // abort game
 80024b2:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <EXTI2_3_IRQHandler+0x9c>)
 80024b4:	0018      	movs	r0, r3
 80024b6:	f7fe fe4d 	bl	8001154 <compareGameState>
 80024ba:	1e03      	subs	r3, r0, #0
 80024bc:	d008      	beq.n	80024d0 <EXTI2_3_IRQHandler+0x4c>
		{
			endGame();
 80024be:	f7fe fed5 	bl	800126c <endGame>
			changePrintStringPreset();
 80024c2:	f7fe ff9d 	bl	8001400 <changePrintStringPreset>
	        MAX7219_PutString(0, printString);
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <EXTI2_3_IRQHandler+0x98>)
 80024c8:	0019      	movs	r1, r3
 80024ca:	2000      	movs	r0, #0
 80024cc:	f7ff fdf6 	bl	80020bc <MAX7219_PutString>
		}
	}

	if (EXTI->PR & EXTI_PR_PR3) // execute start/pause/resume button
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <EXTI2_3_IRQHandler+0x90>)
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	2208      	movs	r2, #8
 80024d6:	4013      	ands	r3, r2
 80024d8:	d013      	beq.n	8002502 <EXTI2_3_IRQHandler+0x7e>
	{
		if( compareGameState("Setting") )	// if the game is at Setting state, start the game
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <EXTI2_3_IRQHandler+0x94>)
 80024dc:	0018      	movs	r0, r3
 80024de:	f7fe fe39 	bl	8001154 <compareGameState>
 80024e2:	1e03      	subs	r3, r0, #0
 80024e4:	d002      	beq.n	80024ec <EXTI2_3_IRQHandler+0x68>
		{
			startGame();
 80024e6:	f7fe fe79 	bl	80011dc <startGame>
 80024ea:	e00a      	b.n	8002502 <EXTI2_3_IRQHandler+0x7e>
		}
		else if ( compareGameState("Playing") )
 80024ec:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <EXTI2_3_IRQHandler+0xa0>)
 80024ee:	0018      	movs	r0, r3
 80024f0:	f7fe fe30 	bl	8001154 <compareGameState>
 80024f4:	1e03      	subs	r3, r0, #0
 80024f6:	d002      	beq.n	80024fe <EXTI2_3_IRQHandler+0x7a>
		{
			pauseGame();
 80024f8:	f7fe fea0 	bl	800123c <pauseGame>
 80024fc:	e001      	b.n	8002502 <EXTI2_3_IRQHandler+0x7e>
		}
		else
		{
			resumeGame();
 80024fe:	f7fe fea9 	bl	8001254 <resumeGame>
		}
	}

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(preset_reset_Pin);
 8002502:	2004      	movs	r0, #4
 8002504:	f000 fbae 	bl	8002c64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(start_pause_Pin);
 8002508:	2008      	movs	r0, #8
 800250a:	f000 fbab 	bl	8002c64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */
  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40010400 	.word	0x40010400
 8002518:	08006dc8 	.word	0x08006dc8
 800251c:	20000088 	.word	0x20000088
 8002520:	08006dd0 	.word	0x08006dd0
 8002524:	08006dc0 	.word	0x08006dc0

08002528 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <TIM2_IRQHandler+0x14>)
 800252e:	0018      	movs	r0, r3
 8002530:	f002 f876 	bl	8004620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
//  HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), HAL_MAX_DELAY);
  /* USER CODE END TIM2_IRQn 1 */
}
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	20000208 	.word	0x20000208

08002540 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002544:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <TIM3_IRQHandler+0x30>)
 8002546:	0018      	movs	r0, r3
 8002548:	f002 f86a 	bl	8004620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if( compareGameState("Playing") )	//update time and display updated time every 250ms
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <TIM3_IRQHandler+0x34>)
 800254e:	0018      	movs	r0, r3
 8002550:	f7fe fe00 	bl	8001154 <compareGameState>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d008      	beq.n	800256a <TIM3_IRQHandler+0x2a>
  {
	  updateTime();							// update time
 8002558:	f7fe feae 	bl	80012b8 <updateTime>
	  changePrintStringGame();				// prepare string to display
 800255c:	f7fe ff74 	bl	8001448 <changePrintStringGame>
	  MAX7219_PutString(0, printString);	// display string
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <TIM3_IRQHandler+0x38>)
 8002562:	0019      	movs	r1, r3
 8002564:	2000      	movs	r0, #0
 8002566:	f7ff fda9 	bl	80020bc <MAX7219_PutString>
  }


  /* USER CODE END TIM3_IRQn 1 */
}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000248 	.word	0x20000248
 8002574:	08006dc0 	.word	0x08006dc0
 8002578:	20000088 	.word	0x20000088

0800257c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002584:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <_sbrk+0x5c>)
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <_sbrk+0x60>)
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <_sbrk+0x64>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <_sbrk+0x64>)
 800259a:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <_sbrk+0x68>)
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	18d3      	adds	r3, r2, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d207      	bcs.n	80025bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025ac:	f003 fc7c 	bl	8005ea8 <__errno>
 80025b0:	0003      	movs	r3, r0
 80025b2:	220c      	movs	r2, #12
 80025b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b6:	2301      	movs	r3, #1
 80025b8:	425b      	negs	r3, r3
 80025ba:	e009      	b.n	80025d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <_sbrk+0x64>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025c2:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <_sbrk+0x64>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	18d2      	adds	r2, r2, r3
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <_sbrk+0x64>)
 80025cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80025ce:	68fb      	ldr	r3, [r7, #12]
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b006      	add	sp, #24
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20005000 	.word	0x20005000
 80025dc:	00000400 	.word	0x00000400
 80025e0:	20000318 	.word	0x20000318
 80025e4:	200003f0 	.word	0x200003f0

080025e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025ec:	46c0      	nop			; (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80025f4:	480d      	ldr	r0, [pc, #52]	; (800262c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80025f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025f8:	f7ff fff6 	bl	80025e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025fc:	480c      	ldr	r0, [pc, #48]	; (8002630 <LoopForever+0x6>)
  ldr r1, =_edata
 80025fe:	490d      	ldr	r1, [pc, #52]	; (8002634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002600:	4a0d      	ldr	r2, [pc, #52]	; (8002638 <LoopForever+0xe>)
  movs r3, #0
 8002602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002604:	e002      	b.n	800260c <LoopCopyDataInit>

08002606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260a:	3304      	adds	r3, #4

0800260c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800260c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800260e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002610:	d3f9      	bcc.n	8002606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002612:	4a0a      	ldr	r2, [pc, #40]	; (800263c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002614:	4c0a      	ldr	r4, [pc, #40]	; (8002640 <LoopForever+0x16>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002618:	e001      	b.n	800261e <LoopFillZerobss>

0800261a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800261c:	3204      	adds	r2, #4

0800261e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800261e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002620:	d3fb      	bcc.n	800261a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002622:	f003 fd49 	bl	80060b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002626:	f7fe ff99 	bl	800155c <main>

0800262a <LoopForever>:

LoopForever:
    b LoopForever
 800262a:	e7fe      	b.n	800262a <LoopForever>
   ldr   r0, =_estack
 800262c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002634:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8002638:	0800714c 	.word	0x0800714c
  ldr r2, =_sbss
 800263c:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8002640:	200003f0 	.word	0x200003f0

08002644 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002644:	e7fe      	b.n	8002644 <ADC1_COMP_IRQHandler>
	...

08002648 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800264e:	1dfb      	adds	r3, r7, #7
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_Init+0x3c>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <HAL_Init+0x3c>)
 800265a:	2140      	movs	r1, #64	; 0x40
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002660:	2000      	movs	r0, #0
 8002662:	f000 f811 	bl	8002688 <HAL_InitTick>
 8002666:	1e03      	subs	r3, r0, #0
 8002668:	d003      	beq.n	8002672 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800266a:	1dfb      	adds	r3, r7, #7
 800266c:	2201      	movs	r2, #1
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e001      	b.n	8002676 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002672:	f7ff fd8f 	bl	8002194 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002676:	1dfb      	adds	r3, r7, #7
 8002678:	781b      	ldrb	r3, [r3, #0]
}
 800267a:	0018      	movs	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	b002      	add	sp, #8
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	40022000 	.word	0x40022000

08002688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <HAL_InitTick+0x5c>)
 8002692:	681c      	ldr	r4, [r3, #0]
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <HAL_InitTick+0x60>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	0019      	movs	r1, r3
 800269a:	23fa      	movs	r3, #250	; 0xfa
 800269c:	0098      	lsls	r0, r3, #2
 800269e:	f7fd fd4f 	bl	8000140 <__udivsi3>
 80026a2:	0003      	movs	r3, r0
 80026a4:	0019      	movs	r1, r3
 80026a6:	0020      	movs	r0, r4
 80026a8:	f7fd fd4a 	bl	8000140 <__udivsi3>
 80026ac:	0003      	movs	r3, r0
 80026ae:	0018      	movs	r0, r3
 80026b0:	f000 f92f 	bl	8002912 <HAL_SYSTICK_Config>
 80026b4:	1e03      	subs	r3, r0, #0
 80026b6:	d001      	beq.n	80026bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e00f      	b.n	80026dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d80b      	bhi.n	80026da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	2301      	movs	r3, #1
 80026c6:	425b      	negs	r3, r3
 80026c8:	2200      	movs	r2, #0
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 f8fc 	bl	80028c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_InitTick+0x64>)
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e000      	b.n	80026dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
}
 80026dc:	0018      	movs	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	b003      	add	sp, #12
 80026e2:	bd90      	pop	{r4, r7, pc}
 80026e4:	200000a8 	.word	0x200000a8
 80026e8:	200000b0 	.word	0x200000b0
 80026ec:	200000ac 	.word	0x200000ac

080026f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_IncTick+0x1c>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	001a      	movs	r2, r3
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_IncTick+0x20>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	18d2      	adds	r2, r2, r3
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <HAL_IncTick+0x20>)
 8002702:	601a      	str	r2, [r3, #0]
}
 8002704:	46c0      	nop			; (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	200000b0 	.word	0x200000b0
 8002710:	2000031c 	.word	0x2000031c

08002714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  return uwTick;
 8002718:	4b02      	ldr	r3, [pc, #8]	; (8002724 <HAL_GetTick+0x10>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	2000031c 	.word	0x2000031c

08002728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002730:	f7ff fff0 	bl	8002714 <HAL_GetTick>
 8002734:	0003      	movs	r3, r0
 8002736:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	3301      	adds	r3, #1
 8002740:	d005      	beq.n	800274e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_Delay+0x44>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	001a      	movs	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	189b      	adds	r3, r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	f7ff ffe0 	bl	8002714 <HAL_GetTick>
 8002754:	0002      	movs	r2, r0
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	429a      	cmp	r2, r3
 800275e:	d8f7      	bhi.n	8002750 <HAL_Delay+0x28>
  {
  }
}
 8002760:	46c0      	nop			; (mov r8, r8)
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	b004      	add	sp, #16
 8002768:	bd80      	pop	{r7, pc}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	200000b0 	.word	0x200000b0

08002770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	0002      	movs	r2, r0
 8002778:	1dfb      	adds	r3, r7, #7
 800277a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800277c:	1dfb      	adds	r3, r7, #7
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b7f      	cmp	r3, #127	; 0x7f
 8002782:	d809      	bhi.n	8002798 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002784:	1dfb      	adds	r3, r7, #7
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	001a      	movs	r2, r3
 800278a:	231f      	movs	r3, #31
 800278c:	401a      	ands	r2, r3
 800278e:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <__NVIC_EnableIRQ+0x30>)
 8002790:	2101      	movs	r1, #1
 8002792:	4091      	lsls	r1, r2
 8002794:	000a      	movs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]
  }
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	b002      	add	sp, #8
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	e000e100 	.word	0xe000e100

080027a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	0002      	movs	r2, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	1dfb      	adds	r3, r7, #7
 80027b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b7f      	cmp	r3, #127	; 0x7f
 80027b8:	d828      	bhi.n	800280c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027ba:	4a2f      	ldr	r2, [pc, #188]	; (8002878 <__NVIC_SetPriority+0xd4>)
 80027bc:	1dfb      	adds	r3, r7, #7
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	33c0      	adds	r3, #192	; 0xc0
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	589b      	ldr	r3, [r3, r2]
 80027ca:	1dfa      	adds	r2, r7, #7
 80027cc:	7812      	ldrb	r2, [r2, #0]
 80027ce:	0011      	movs	r1, r2
 80027d0:	2203      	movs	r2, #3
 80027d2:	400a      	ands	r2, r1
 80027d4:	00d2      	lsls	r2, r2, #3
 80027d6:	21ff      	movs	r1, #255	; 0xff
 80027d8:	4091      	lsls	r1, r2
 80027da:	000a      	movs	r2, r1
 80027dc:	43d2      	mvns	r2, r2
 80027de:	401a      	ands	r2, r3
 80027e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	22ff      	movs	r2, #255	; 0xff
 80027e8:	401a      	ands	r2, r3
 80027ea:	1dfb      	adds	r3, r7, #7
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	0018      	movs	r0, r3
 80027f0:	2303      	movs	r3, #3
 80027f2:	4003      	ands	r3, r0
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027f8:	481f      	ldr	r0, [pc, #124]	; (8002878 <__NVIC_SetPriority+0xd4>)
 80027fa:	1dfb      	adds	r3, r7, #7
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	089b      	lsrs	r3, r3, #2
 8002802:	430a      	orrs	r2, r1
 8002804:	33c0      	adds	r3, #192	; 0xc0
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800280a:	e031      	b.n	8002870 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800280c:	4a1b      	ldr	r2, [pc, #108]	; (800287c <__NVIC_SetPriority+0xd8>)
 800280e:	1dfb      	adds	r3, r7, #7
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	0019      	movs	r1, r3
 8002814:	230f      	movs	r3, #15
 8002816:	400b      	ands	r3, r1
 8002818:	3b08      	subs	r3, #8
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3306      	adds	r3, #6
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	18d3      	adds	r3, r2, r3
 8002822:	3304      	adds	r3, #4
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	1dfa      	adds	r2, r7, #7
 8002828:	7812      	ldrb	r2, [r2, #0]
 800282a:	0011      	movs	r1, r2
 800282c:	2203      	movs	r2, #3
 800282e:	400a      	ands	r2, r1
 8002830:	00d2      	lsls	r2, r2, #3
 8002832:	21ff      	movs	r1, #255	; 0xff
 8002834:	4091      	lsls	r1, r2
 8002836:	000a      	movs	r2, r1
 8002838:	43d2      	mvns	r2, r2
 800283a:	401a      	ands	r2, r3
 800283c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	019b      	lsls	r3, r3, #6
 8002842:	22ff      	movs	r2, #255	; 0xff
 8002844:	401a      	ands	r2, r3
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	0018      	movs	r0, r3
 800284c:	2303      	movs	r3, #3
 800284e:	4003      	ands	r3, r0
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002854:	4809      	ldr	r0, [pc, #36]	; (800287c <__NVIC_SetPriority+0xd8>)
 8002856:	1dfb      	adds	r3, r7, #7
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	001c      	movs	r4, r3
 800285c:	230f      	movs	r3, #15
 800285e:	4023      	ands	r3, r4
 8002860:	3b08      	subs	r3, #8
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	430a      	orrs	r2, r1
 8002866:	3306      	adds	r3, #6
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	18c3      	adds	r3, r0, r3
 800286c:	3304      	adds	r3, #4
 800286e:	601a      	str	r2, [r3, #0]
}
 8002870:	46c0      	nop			; (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	b003      	add	sp, #12
 8002876:	bd90      	pop	{r4, r7, pc}
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	1e5a      	subs	r2, r3, #1
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	045b      	lsls	r3, r3, #17
 8002890:	429a      	cmp	r2, r3
 8002892:	d301      	bcc.n	8002898 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002894:	2301      	movs	r3, #1
 8002896:	e010      	b.n	80028ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <SysTick_Config+0x44>)
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	3a01      	subs	r2, #1
 800289e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a0:	2301      	movs	r3, #1
 80028a2:	425b      	negs	r3, r3
 80028a4:	2103      	movs	r1, #3
 80028a6:	0018      	movs	r0, r3
 80028a8:	f7ff ff7c 	bl	80027a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <SysTick_Config+0x44>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b2:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <SysTick_Config+0x44>)
 80028b4:	2207      	movs	r2, #7
 80028b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	0018      	movs	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	b002      	add	sp, #8
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	e000e010 	.word	0xe000e010

080028c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	210f      	movs	r1, #15
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	1c02      	adds	r2, r0, #0
 80028d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	187b      	adds	r3, r7, r1
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	b25b      	sxtb	r3, r3
 80028e2:	0011      	movs	r1, r2
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7ff ff5d 	bl	80027a4 <__NVIC_SetPriority>
}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b004      	add	sp, #16
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	0002      	movs	r2, r0
 80028fa:	1dfb      	adds	r3, r7, #7
 80028fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028fe:	1dfb      	adds	r3, r7, #7
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b25b      	sxtb	r3, r3
 8002904:	0018      	movs	r0, r3
 8002906:	f7ff ff33 	bl	8002770 <__NVIC_EnableIRQ>
}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b002      	add	sp, #8
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	0018      	movs	r0, r3
 800291e:	f7ff ffaf 	bl	8002880 <SysTick_Config>
 8002922:	0003      	movs	r3, r0
}
 8002924:	0018      	movs	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	b002      	add	sp, #8
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002942:	e155      	b.n	8002bf0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2101      	movs	r1, #1
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4091      	lsls	r1, r2
 800294e:	000a      	movs	r2, r1
 8002950:	4013      	ands	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d100      	bne.n	800295c <HAL_GPIO_Init+0x30>
 800295a:	e146      	b.n	8002bea <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2203      	movs	r2, #3
 8002962:	4013      	ands	r3, r2
 8002964:	2b01      	cmp	r3, #1
 8002966:	d005      	beq.n	8002974 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2203      	movs	r2, #3
 800296e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002970:	2b02      	cmp	r3, #2
 8002972:	d130      	bne.n	80029d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	2203      	movs	r2, #3
 8002980:	409a      	lsls	r2, r3
 8002982:	0013      	movs	r3, r2
 8002984:	43da      	mvns	r2, r3
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	409a      	lsls	r2, r3
 8002996:	0013      	movs	r3, r2
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029aa:	2201      	movs	r2, #1
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	409a      	lsls	r2, r3
 80029b0:	0013      	movs	r3, r2
 80029b2:	43da      	mvns	r2, r3
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	2201      	movs	r2, #1
 80029c2:	401a      	ands	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	409a      	lsls	r2, r3
 80029c8:	0013      	movs	r3, r2
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2203      	movs	r2, #3
 80029dc:	4013      	ands	r3, r2
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d017      	beq.n	8002a12 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	2203      	movs	r2, #3
 80029ee:	409a      	lsls	r2, r3
 80029f0:	0013      	movs	r3, r2
 80029f2:	43da      	mvns	r2, r3
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	409a      	lsls	r2, r3
 8002a04:	0013      	movs	r3, r2
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2203      	movs	r2, #3
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d123      	bne.n	8002a66 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	08da      	lsrs	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3208      	adds	r2, #8
 8002a26:	0092      	lsls	r2, r2, #2
 8002a28:	58d3      	ldr	r3, [r2, r3]
 8002a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2207      	movs	r2, #7
 8002a30:	4013      	ands	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	220f      	movs	r2, #15
 8002a36:	409a      	lsls	r2, r3
 8002a38:	0013      	movs	r3, r2
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2107      	movs	r1, #7
 8002a4a:	400b      	ands	r3, r1
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	0013      	movs	r3, r2
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	08da      	lsrs	r2, r3, #3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3208      	adds	r2, #8
 8002a60:	0092      	lsls	r2, r2, #2
 8002a62:	6939      	ldr	r1, [r7, #16]
 8002a64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	2203      	movs	r2, #3
 8002a72:	409a      	lsls	r2, r3
 8002a74:	0013      	movs	r3, r2
 8002a76:	43da      	mvns	r2, r3
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2203      	movs	r2, #3
 8002a84:	401a      	ands	r2, r3
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	0013      	movs	r3, r2
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	23c0      	movs	r3, #192	; 0xc0
 8002aa0:	029b      	lsls	r3, r3, #10
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d100      	bne.n	8002aa8 <HAL_GPIO_Init+0x17c>
 8002aa6:	e0a0      	b.n	8002bea <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aa8:	4b57      	ldr	r3, [pc, #348]	; (8002c08 <HAL_GPIO_Init+0x2dc>)
 8002aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aac:	4b56      	ldr	r3, [pc, #344]	; (8002c08 <HAL_GPIO_Init+0x2dc>)
 8002aae:	2101      	movs	r1, #1
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ab4:	4a55      	ldr	r2, [pc, #340]	; (8002c0c <HAL_GPIO_Init+0x2e0>)
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	3302      	adds	r3, #2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	589b      	ldr	r3, [r3, r2]
 8002ac0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	220f      	movs	r2, #15
 8002acc:	409a      	lsls	r2, r3
 8002ace:	0013      	movs	r3, r2
 8002ad0:	43da      	mvns	r2, r3
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	23a0      	movs	r3, #160	; 0xa0
 8002adc:	05db      	lsls	r3, r3, #23
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d01f      	beq.n	8002b22 <HAL_GPIO_Init+0x1f6>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4a      	ldr	r2, [pc, #296]	; (8002c10 <HAL_GPIO_Init+0x2e4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d019      	beq.n	8002b1e <HAL_GPIO_Init+0x1f2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a49      	ldr	r2, [pc, #292]	; (8002c14 <HAL_GPIO_Init+0x2e8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <HAL_GPIO_Init+0x1ee>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a48      	ldr	r2, [pc, #288]	; (8002c18 <HAL_GPIO_Init+0x2ec>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00d      	beq.n	8002b16 <HAL_GPIO_Init+0x1ea>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a47      	ldr	r2, [pc, #284]	; (8002c1c <HAL_GPIO_Init+0x2f0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d007      	beq.n	8002b12 <HAL_GPIO_Init+0x1e6>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a46      	ldr	r2, [pc, #280]	; (8002c20 <HAL_GPIO_Init+0x2f4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d101      	bne.n	8002b0e <HAL_GPIO_Init+0x1e2>
 8002b0a:	2305      	movs	r3, #5
 8002b0c:	e00a      	b.n	8002b24 <HAL_GPIO_Init+0x1f8>
 8002b0e:	2306      	movs	r3, #6
 8002b10:	e008      	b.n	8002b24 <HAL_GPIO_Init+0x1f8>
 8002b12:	2304      	movs	r3, #4
 8002b14:	e006      	b.n	8002b24 <HAL_GPIO_Init+0x1f8>
 8002b16:	2303      	movs	r3, #3
 8002b18:	e004      	b.n	8002b24 <HAL_GPIO_Init+0x1f8>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e002      	b.n	8002b24 <HAL_GPIO_Init+0x1f8>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_GPIO_Init+0x1f8>
 8002b22:	2300      	movs	r3, #0
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	2103      	movs	r1, #3
 8002b28:	400a      	ands	r2, r1
 8002b2a:	0092      	lsls	r2, r2, #2
 8002b2c:	4093      	lsls	r3, r2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b34:	4935      	ldr	r1, [pc, #212]	; (8002c0c <HAL_GPIO_Init+0x2e0>)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b42:	4b38      	ldr	r3, [pc, #224]	; (8002c24 <HAL_GPIO_Init+0x2f8>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	035b      	lsls	r3, r3, #13
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b66:	4b2f      	ldr	r3, [pc, #188]	; (8002c24 <HAL_GPIO_Init+0x2f8>)
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b6c:	4b2d      	ldr	r3, [pc, #180]	; (8002c24 <HAL_GPIO_Init+0x2f8>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	43da      	mvns	r2, r3
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	039b      	lsls	r3, r3, #14
 8002b84:	4013      	ands	r3, r2
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b90:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <HAL_GPIO_Init+0x2f8>)
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <HAL_GPIO_Init+0x2f8>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	029b      	lsls	r3, r3, #10
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002bba:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <HAL_GPIO_Init+0x2f8>)
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bc0:	4b18      	ldr	r3, [pc, #96]	; (8002c24 <HAL_GPIO_Init+0x2f8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	43da      	mvns	r2, r3
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	025b      	lsls	r3, r3, #9
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002be4:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <HAL_GPIO_Init+0x2f8>)
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	3301      	adds	r3, #1
 8002bee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	40da      	lsrs	r2, r3
 8002bf8:	1e13      	subs	r3, r2, #0
 8002bfa:	d000      	beq.n	8002bfe <HAL_GPIO_Init+0x2d2>
 8002bfc:	e6a2      	b.n	8002944 <HAL_GPIO_Init+0x18>
  }
}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b006      	add	sp, #24
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	50000400 	.word	0x50000400
 8002c14:	50000800 	.word	0x50000800
 8002c18:	50000c00 	.word	0x50000c00
 8002c1c:	50001000 	.word	0x50001000
 8002c20:	50001c00 	.word	0x50001c00
 8002c24:	40010400 	.word	0x40010400

08002c28 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	0008      	movs	r0, r1
 8002c32:	0011      	movs	r1, r2
 8002c34:	1cbb      	adds	r3, r7, #2
 8002c36:	1c02      	adds	r2, r0, #0
 8002c38:	801a      	strh	r2, [r3, #0]
 8002c3a:	1c7b      	adds	r3, r7, #1
 8002c3c:	1c0a      	adds	r2, r1, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c40:	1c7b      	adds	r3, r7, #1
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d004      	beq.n	8002c52 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c48:	1cbb      	adds	r3, r7, #2
 8002c4a:	881a      	ldrh	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002c50:	e003      	b.n	8002c5a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002c52:	1cbb      	adds	r3, r7, #2
 8002c54:	881a      	ldrh	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b002      	add	sp, #8
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	0002      	movs	r2, r0
 8002c6c:	1dbb      	adds	r3, r7, #6
 8002c6e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	1dba      	adds	r2, r7, #6
 8002c76:	8812      	ldrh	r2, [r2, #0]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d008      	beq.n	8002c8e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002c7e:	1dba      	adds	r2, r7, #6
 8002c80:	8812      	ldrh	r2, [r2, #0]
 8002c82:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c84:	1dbb      	adds	r3, r7, #6
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f000 f807 	bl	8002c9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b002      	add	sp, #8
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	40010400 	.word	0x40010400

08002c9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	0002      	movs	r2, r0
 8002ca4:	1dbb      	adds	r3, r7, #6
 8002ca6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ca8:	46c0      	nop			; (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b002      	add	sp, #8
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb0:	b5b0      	push	{r4, r5, r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f000 fbbf 	bl	8003442 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc4:	4bc9      	ldr	r3, [pc, #804]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	220c      	movs	r2, #12
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cce:	4bc7      	ldr	r3, [pc, #796]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	025b      	lsls	r3, r3, #9
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d100      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x36>
 8002ce4:	e07e      	b.n	8002de4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d007      	beq.n	8002cfc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b0c      	cmp	r3, #12
 8002cf0:	d112      	bne.n	8002d18 <HAL_RCC_OscConfig+0x68>
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	025b      	lsls	r3, r3, #9
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d10d      	bne.n	8002d18 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfc:	4bbb      	ldr	r3, [pc, #748]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	029b      	lsls	r3, r3, #10
 8002d04:	4013      	ands	r3, r2
 8002d06:	d100      	bne.n	8002d0a <HAL_RCC_OscConfig+0x5a>
 8002d08:	e06b      	b.n	8002de2 <HAL_RCC_OscConfig+0x132>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d167      	bne.n	8002de2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f000 fb95 	bl	8003442 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	025b      	lsls	r3, r3, #9
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_OscConfig+0x84>
 8002d24:	4bb1      	ldr	r3, [pc, #708]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4bb0      	ldr	r3, [pc, #704]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002d2a:	2180      	movs	r1, #128	; 0x80
 8002d2c:	0249      	lsls	r1, r1, #9
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e027      	b.n	8002d84 <HAL_RCC_OscConfig+0xd4>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	23a0      	movs	r3, #160	; 0xa0
 8002d3a:	02db      	lsls	r3, r3, #11
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d10e      	bne.n	8002d5e <HAL_RCC_OscConfig+0xae>
 8002d40:	4baa      	ldr	r3, [pc, #680]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4ba9      	ldr	r3, [pc, #676]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002d46:	2180      	movs	r1, #128	; 0x80
 8002d48:	02c9      	lsls	r1, r1, #11
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	4ba7      	ldr	r3, [pc, #668]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4ba6      	ldr	r3, [pc, #664]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002d54:	2180      	movs	r1, #128	; 0x80
 8002d56:	0249      	lsls	r1, r1, #9
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e012      	b.n	8002d84 <HAL_RCC_OscConfig+0xd4>
 8002d5e:	4ba3      	ldr	r3, [pc, #652]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	4ba2      	ldr	r3, [pc, #648]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002d64:	49a2      	ldr	r1, [pc, #648]	; (8002ff0 <HAL_RCC_OscConfig+0x340>)
 8002d66:	400a      	ands	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	4ba0      	ldr	r3, [pc, #640]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	025b      	lsls	r3, r3, #9
 8002d72:	4013      	ands	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4b9c      	ldr	r3, [pc, #624]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b9b      	ldr	r3, [pc, #620]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002d7e:	499d      	ldr	r1, [pc, #628]	; (8002ff4 <HAL_RCC_OscConfig+0x344>)
 8002d80:	400a      	ands	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d015      	beq.n	8002db8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7ff fcc2 	bl	8002714 <HAL_GetTick>
 8002d90:	0003      	movs	r3, r0
 8002d92:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d94:	e009      	b.n	8002daa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d96:	f7ff fcbd 	bl	8002714 <HAL_GetTick>
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b64      	cmp	r3, #100	; 0x64
 8002da2:	d902      	bls.n	8002daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	f000 fb4c 	bl	8003442 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002daa:	4b90      	ldr	r3, [pc, #576]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	029b      	lsls	r3, r3, #10
 8002db2:	4013      	ands	r3, r2
 8002db4:	d0ef      	beq.n	8002d96 <HAL_RCC_OscConfig+0xe6>
 8002db6:	e015      	b.n	8002de4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7ff fcac 	bl	8002714 <HAL_GetTick>
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc2:	f7ff fca7 	bl	8002714 <HAL_GetTick>
 8002dc6:	0002      	movs	r2, r0
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b64      	cmp	r3, #100	; 0x64
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e336      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dd4:	4b85      	ldr	r3, [pc, #532]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	029b      	lsls	r3, r3, #10
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d1f0      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x112>
 8002de0:	e000      	b.n	8002de4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2202      	movs	r2, #2
 8002dea:	4013      	ands	r3, r2
 8002dec:	d100      	bne.n	8002df0 <HAL_RCC_OscConfig+0x140>
 8002dee:	e099      	b.n	8002f24 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	2220      	movs	r2, #32
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002dfe:	4b7b      	ldr	r3, [pc, #492]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4b7a      	ldr	r3, [pc, #488]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002e04:	2120      	movs	r1, #32
 8002e06:	430a      	orrs	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	4393      	bics	r3, r2
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b0c      	cmp	r3, #12
 8002e1c:	d13e      	bne.n	8002e9c <HAL_RCC_OscConfig+0x1ec>
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d13b      	bne.n	8002e9c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002e24:	4b71      	ldr	r3, [pc, #452]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2204      	movs	r2, #4
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d004      	beq.n	8002e38 <HAL_RCC_OscConfig+0x188>
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e304      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e38:	4b6c      	ldr	r3, [pc, #432]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4a6e      	ldr	r2, [pc, #440]	; (8002ff8 <HAL_RCC_OscConfig+0x348>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	0019      	movs	r1, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	021a      	lsls	r2, r3, #8
 8002e48:	4b68      	ldr	r3, [pc, #416]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002e4e:	4b67      	ldr	r3, [pc, #412]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2209      	movs	r2, #9
 8002e54:	4393      	bics	r3, r2
 8002e56:	0019      	movs	r1, r3
 8002e58:	4b64      	ldr	r3, [pc, #400]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e60:	f000 fc42 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 8002e64:	0001      	movs	r1, r0
 8002e66:	4b61      	ldr	r3, [pc, #388]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	220f      	movs	r2, #15
 8002e6e:	4013      	ands	r3, r2
 8002e70:	4a62      	ldr	r2, [pc, #392]	; (8002ffc <HAL_RCC_OscConfig+0x34c>)
 8002e72:	5cd3      	ldrb	r3, [r2, r3]
 8002e74:	000a      	movs	r2, r1
 8002e76:	40da      	lsrs	r2, r3
 8002e78:	4b61      	ldr	r3, [pc, #388]	; (8003000 <HAL_RCC_OscConfig+0x350>)
 8002e7a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002e7c:	4b61      	ldr	r3, [pc, #388]	; (8003004 <HAL_RCC_OscConfig+0x354>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2513      	movs	r5, #19
 8002e82:	197c      	adds	r4, r7, r5
 8002e84:	0018      	movs	r0, r3
 8002e86:	f7ff fbff 	bl	8002688 <HAL_InitTick>
 8002e8a:	0003      	movs	r3, r0
 8002e8c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002e8e:	197b      	adds	r3, r7, r5
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d046      	beq.n	8002f24 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002e96:	197b      	adds	r3, r7, r5
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	e2d2      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d027      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002ea2:	4b52      	ldr	r3, [pc, #328]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2209      	movs	r2, #9
 8002ea8:	4393      	bics	r3, r2
 8002eaa:	0019      	movs	r1, r3
 8002eac:	4b4f      	ldr	r3, [pc, #316]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7ff fc2e 	bl	8002714 <HAL_GetTick>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ebe:	f7ff fc29 	bl	8002714 <HAL_GetTick>
 8002ec2:	0002      	movs	r2, r0
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e2b8      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ed0:	4b46      	ldr	r3, [pc, #280]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d0f1      	beq.n	8002ebe <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eda:	4b44      	ldr	r3, [pc, #272]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4a46      	ldr	r2, [pc, #280]	; (8002ff8 <HAL_RCC_OscConfig+0x348>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	021a      	lsls	r2, r3, #8
 8002eea:	4b40      	ldr	r3, [pc, #256]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002eec:	430a      	orrs	r2, r1
 8002eee:	605a      	str	r2, [r3, #4]
 8002ef0:	e018      	b.n	8002f24 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef2:	4b3e      	ldr	r3, [pc, #248]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	4b3d      	ldr	r3, [pc, #244]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002ef8:	2101      	movs	r1, #1
 8002efa:	438a      	bics	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efe:	f7ff fc09 	bl	8002714 <HAL_GetTick>
 8002f02:	0003      	movs	r3, r0
 8002f04:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f08:	f7ff fc04 	bl	8002714 <HAL_GetTick>
 8002f0c:	0002      	movs	r2, r0
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e293      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f1a:	4b34      	ldr	r3, [pc, #208]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2204      	movs	r2, #4
 8002f20:	4013      	ands	r3, r2
 8002f22:	d1f1      	bne.n	8002f08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2210      	movs	r2, #16
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d100      	bne.n	8002f30 <HAL_RCC_OscConfig+0x280>
 8002f2e:	e0a2      	b.n	8003076 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d140      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f36:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d005      	beq.n	8002f4e <HAL_RCC_OscConfig+0x29e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e279      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f4e:	4b27      	ldr	r3, [pc, #156]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4a2d      	ldr	r2, [pc, #180]	; (8003008 <HAL_RCC_OscConfig+0x358>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	0019      	movs	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f5c:	4b23      	ldr	r3, [pc, #140]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f62:	4b22      	ldr	r3, [pc, #136]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	0a19      	lsrs	r1, r3, #8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	061a      	lsls	r2, r3, #24
 8002f70:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	0b5b      	lsrs	r3, r3, #13
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	2280      	movs	r2, #128	; 0x80
 8002f80:	0212      	lsls	r2, r2, #8
 8002f82:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	210f      	movs	r1, #15
 8002f8c:	400b      	ands	r3, r1
 8002f8e:	491b      	ldr	r1, [pc, #108]	; (8002ffc <HAL_RCC_OscConfig+0x34c>)
 8002f90:	5ccb      	ldrb	r3, [r1, r3]
 8002f92:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f94:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <HAL_RCC_OscConfig+0x350>)
 8002f96:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002f98:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <HAL_RCC_OscConfig+0x354>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2513      	movs	r5, #19
 8002f9e:	197c      	adds	r4, r7, r5
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f7ff fb71 	bl	8002688 <HAL_InitTick>
 8002fa6:	0003      	movs	r3, r0
 8002fa8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002faa:	197b      	adds	r3, r7, r5
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d061      	beq.n	8003076 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002fb2:	197b      	adds	r3, r7, r5
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	e244      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d040      	beq.n	8003042 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b09      	ldr	r3, [pc, #36]	; (8002fec <HAL_RCC_OscConfig+0x33c>)
 8002fc6:	2180      	movs	r1, #128	; 0x80
 8002fc8:	0049      	lsls	r1, r1, #1
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fce:	f7ff fba1 	bl	8002714 <HAL_GetTick>
 8002fd2:	0003      	movs	r3, r0
 8002fd4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fd6:	e019      	b.n	800300c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fd8:	f7ff fb9c 	bl	8002714 <HAL_GetTick>
 8002fdc:	0002      	movs	r2, r0
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d912      	bls.n	800300c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e22b      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	fffeffff 	.word	0xfffeffff
 8002ff4:	fffbffff 	.word	0xfffbffff
 8002ff8:	ffffe0ff 	.word	0xffffe0ff
 8002ffc:	0800701c 	.word	0x0800701c
 8003000:	200000a8 	.word	0x200000a8
 8003004:	200000ac 	.word	0x200000ac
 8003008:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800300c:	4bca      	ldr	r3, [pc, #808]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4013      	ands	r3, r2
 8003016:	d0df      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003018:	4bc7      	ldr	r3, [pc, #796]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	4ac7      	ldr	r2, [pc, #796]	; (800333c <HAL_RCC_OscConfig+0x68c>)
 800301e:	4013      	ands	r3, r2
 8003020:	0019      	movs	r1, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003026:	4bc4      	ldr	r3, [pc, #784]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800302c:	4bc2      	ldr	r3, [pc, #776]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	021b      	lsls	r3, r3, #8
 8003032:	0a19      	lsrs	r1, r3, #8
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	061a      	lsls	r2, r3, #24
 800303a:	4bbf      	ldr	r3, [pc, #764]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 800303c:	430a      	orrs	r2, r1
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	e019      	b.n	8003076 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003042:	4bbd      	ldr	r3, [pc, #756]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4bbc      	ldr	r3, [pc, #752]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 8003048:	49bd      	ldr	r1, [pc, #756]	; (8003340 <HAL_RCC_OscConfig+0x690>)
 800304a:	400a      	ands	r2, r1
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7ff fb61 	bl	8002714 <HAL_GetTick>
 8003052:	0003      	movs	r3, r0
 8003054:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003058:	f7ff fb5c 	bl	8002714 <HAL_GetTick>
 800305c:	0002      	movs	r2, r0
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e1eb      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800306a:	4bb3      	ldr	r3, [pc, #716]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4013      	ands	r3, r2
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2208      	movs	r2, #8
 800307c:	4013      	ands	r3, r2
 800307e:	d036      	beq.n	80030ee <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d019      	beq.n	80030bc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003088:	4bab      	ldr	r3, [pc, #684]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 800308a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800308c:	4baa      	ldr	r3, [pc, #680]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 800308e:	2101      	movs	r1, #1
 8003090:	430a      	orrs	r2, r1
 8003092:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003094:	f7ff fb3e 	bl	8002714 <HAL_GetTick>
 8003098:	0003      	movs	r3, r0
 800309a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800309e:	f7ff fb39 	bl	8002714 <HAL_GetTick>
 80030a2:	0002      	movs	r2, r0
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e1c8      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030b0:	4ba1      	ldr	r3, [pc, #644]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 80030b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b4:	2202      	movs	r2, #2
 80030b6:	4013      	ands	r3, r2
 80030b8:	d0f1      	beq.n	800309e <HAL_RCC_OscConfig+0x3ee>
 80030ba:	e018      	b.n	80030ee <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030bc:	4b9e      	ldr	r3, [pc, #632]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 80030be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030c0:	4b9d      	ldr	r3, [pc, #628]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 80030c2:	2101      	movs	r1, #1
 80030c4:	438a      	bics	r2, r1
 80030c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7ff fb24 	bl	8002714 <HAL_GetTick>
 80030cc:	0003      	movs	r3, r0
 80030ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d2:	f7ff fb1f 	bl	8002714 <HAL_GetTick>
 80030d6:	0002      	movs	r2, r0
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e1ae      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030e4:	4b94      	ldr	r3, [pc, #592]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 80030e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e8:	2202      	movs	r2, #2
 80030ea:	4013      	ands	r3, r2
 80030ec:	d1f1      	bne.n	80030d2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2204      	movs	r2, #4
 80030f4:	4013      	ands	r3, r2
 80030f6:	d100      	bne.n	80030fa <HAL_RCC_OscConfig+0x44a>
 80030f8:	e0ae      	b.n	8003258 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fa:	2023      	movs	r0, #35	; 0x23
 80030fc:	183b      	adds	r3, r7, r0
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003102:	4b8d      	ldr	r3, [pc, #564]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 8003104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003106:	2380      	movs	r3, #128	; 0x80
 8003108:	055b      	lsls	r3, r3, #21
 800310a:	4013      	ands	r3, r2
 800310c:	d109      	bne.n	8003122 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	4b8a      	ldr	r3, [pc, #552]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 8003110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003112:	4b89      	ldr	r3, [pc, #548]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 8003114:	2180      	movs	r1, #128	; 0x80
 8003116:	0549      	lsls	r1, r1, #21
 8003118:	430a      	orrs	r2, r1
 800311a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800311c:	183b      	adds	r3, r7, r0
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003122:	4b88      	ldr	r3, [pc, #544]	; (8003344 <HAL_RCC_OscConfig+0x694>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4013      	ands	r3, r2
 800312c:	d11a      	bne.n	8003164 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800312e:	4b85      	ldr	r3, [pc, #532]	; (8003344 <HAL_RCC_OscConfig+0x694>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	4b84      	ldr	r3, [pc, #528]	; (8003344 <HAL_RCC_OscConfig+0x694>)
 8003134:	2180      	movs	r1, #128	; 0x80
 8003136:	0049      	lsls	r1, r1, #1
 8003138:	430a      	orrs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313c:	f7ff faea 	bl	8002714 <HAL_GetTick>
 8003140:	0003      	movs	r3, r0
 8003142:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003146:	f7ff fae5 	bl	8002714 <HAL_GetTick>
 800314a:	0002      	movs	r2, r0
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b64      	cmp	r3, #100	; 0x64
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e174      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003158:	4b7a      	ldr	r3, [pc, #488]	; (8003344 <HAL_RCC_OscConfig+0x694>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4013      	ands	r3, r2
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	2380      	movs	r3, #128	; 0x80
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	429a      	cmp	r2, r3
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0x4d0>
 8003170:	4b71      	ldr	r3, [pc, #452]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 8003172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003174:	4b70      	ldr	r3, [pc, #448]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 8003176:	2180      	movs	r1, #128	; 0x80
 8003178:	0049      	lsls	r1, r1, #1
 800317a:	430a      	orrs	r2, r1
 800317c:	651a      	str	r2, [r3, #80]	; 0x50
 800317e:	e031      	b.n	80031e4 <HAL_RCC_OscConfig+0x534>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10c      	bne.n	80031a2 <HAL_RCC_OscConfig+0x4f2>
 8003188:	4b6b      	ldr	r3, [pc, #428]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 800318a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800318c:	4b6a      	ldr	r3, [pc, #424]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 800318e:	496c      	ldr	r1, [pc, #432]	; (8003340 <HAL_RCC_OscConfig+0x690>)
 8003190:	400a      	ands	r2, r1
 8003192:	651a      	str	r2, [r3, #80]	; 0x50
 8003194:	4b68      	ldr	r3, [pc, #416]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 8003196:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003198:	4b67      	ldr	r3, [pc, #412]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 800319a:	496b      	ldr	r1, [pc, #428]	; (8003348 <HAL_RCC_OscConfig+0x698>)
 800319c:	400a      	ands	r2, r1
 800319e:	651a      	str	r2, [r3, #80]	; 0x50
 80031a0:	e020      	b.n	80031e4 <HAL_RCC_OscConfig+0x534>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	23a0      	movs	r3, #160	; 0xa0
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d10e      	bne.n	80031cc <HAL_RCC_OscConfig+0x51c>
 80031ae:	4b62      	ldr	r3, [pc, #392]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 80031b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031b2:	4b61      	ldr	r3, [pc, #388]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 80031b4:	2180      	movs	r1, #128	; 0x80
 80031b6:	00c9      	lsls	r1, r1, #3
 80031b8:	430a      	orrs	r2, r1
 80031ba:	651a      	str	r2, [r3, #80]	; 0x50
 80031bc:	4b5e      	ldr	r3, [pc, #376]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 80031be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031c0:	4b5d      	ldr	r3, [pc, #372]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 80031c2:	2180      	movs	r1, #128	; 0x80
 80031c4:	0049      	lsls	r1, r1, #1
 80031c6:	430a      	orrs	r2, r1
 80031c8:	651a      	str	r2, [r3, #80]	; 0x50
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0x534>
 80031cc:	4b5a      	ldr	r3, [pc, #360]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 80031ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031d0:	4b59      	ldr	r3, [pc, #356]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 80031d2:	495b      	ldr	r1, [pc, #364]	; (8003340 <HAL_RCC_OscConfig+0x690>)
 80031d4:	400a      	ands	r2, r1
 80031d6:	651a      	str	r2, [r3, #80]	; 0x50
 80031d8:	4b57      	ldr	r3, [pc, #348]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 80031da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031dc:	4b56      	ldr	r3, [pc, #344]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 80031de:	495a      	ldr	r1, [pc, #360]	; (8003348 <HAL_RCC_OscConfig+0x698>)
 80031e0:	400a      	ands	r2, r1
 80031e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ec:	f7ff fa92 	bl	8002714 <HAL_GetTick>
 80031f0:	0003      	movs	r3, r0
 80031f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031f4:	e009      	b.n	800320a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7ff fa8d 	bl	8002714 <HAL_GetTick>
 80031fa:	0002      	movs	r2, r0
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	4a52      	ldr	r2, [pc, #328]	; (800334c <HAL_RCC_OscConfig+0x69c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e11b      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800320a:	4b4b      	ldr	r3, [pc, #300]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 800320c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4013      	ands	r3, r2
 8003214:	d0ef      	beq.n	80031f6 <HAL_RCC_OscConfig+0x546>
 8003216:	e014      	b.n	8003242 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003218:	f7ff fa7c 	bl	8002714 <HAL_GetTick>
 800321c:	0003      	movs	r3, r0
 800321e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003220:	e009      	b.n	8003236 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7ff fa77 	bl	8002714 <HAL_GetTick>
 8003226:	0002      	movs	r2, r0
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	4a47      	ldr	r2, [pc, #284]	; (800334c <HAL_RCC_OscConfig+0x69c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e105      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003236:	4b40      	ldr	r3, [pc, #256]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 8003238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4013      	ands	r3, r2
 8003240:	d1ef      	bne.n	8003222 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003242:	2323      	movs	r3, #35	; 0x23
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d105      	bne.n	8003258 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324c:	4b3a      	ldr	r3, [pc, #232]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 800324e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003250:	4b39      	ldr	r3, [pc, #228]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 8003252:	493f      	ldr	r1, [pc, #252]	; (8003350 <HAL_RCC_OscConfig+0x6a0>)
 8003254:	400a      	ands	r2, r1
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2220      	movs	r2, #32
 800325e:	4013      	ands	r3, r2
 8003260:	d049      	beq.n	80032f6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d026      	beq.n	80032b8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800326a:	4b33      	ldr	r3, [pc, #204]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	4b32      	ldr	r3, [pc, #200]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 8003270:	2101      	movs	r1, #1
 8003272:	430a      	orrs	r2, r1
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	4b30      	ldr	r3, [pc, #192]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 8003278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327a:	4b2f      	ldr	r3, [pc, #188]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 800327c:	2101      	movs	r1, #1
 800327e:	430a      	orrs	r2, r1
 8003280:	635a      	str	r2, [r3, #52]	; 0x34
 8003282:	4b34      	ldr	r3, [pc, #208]	; (8003354 <HAL_RCC_OscConfig+0x6a4>)
 8003284:	6a1a      	ldr	r2, [r3, #32]
 8003286:	4b33      	ldr	r3, [pc, #204]	; (8003354 <HAL_RCC_OscConfig+0x6a4>)
 8003288:	2180      	movs	r1, #128	; 0x80
 800328a:	0189      	lsls	r1, r1, #6
 800328c:	430a      	orrs	r2, r1
 800328e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7ff fa40 	bl	8002714 <HAL_GetTick>
 8003294:	0003      	movs	r3, r0
 8003296:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800329a:	f7ff fa3b 	bl	8002714 <HAL_GetTick>
 800329e:	0002      	movs	r2, r0
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e0ca      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032ac:	4b22      	ldr	r3, [pc, #136]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2202      	movs	r2, #2
 80032b2:	4013      	ands	r3, r2
 80032b4:	d0f1      	beq.n	800329a <HAL_RCC_OscConfig+0x5ea>
 80032b6:	e01e      	b.n	80032f6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80032b8:	4b1f      	ldr	r3, [pc, #124]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	4b1e      	ldr	r3, [pc, #120]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 80032be:	2101      	movs	r1, #1
 80032c0:	438a      	bics	r2, r1
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	4b23      	ldr	r3, [pc, #140]	; (8003354 <HAL_RCC_OscConfig+0x6a4>)
 80032c6:	6a1a      	ldr	r2, [r3, #32]
 80032c8:	4b22      	ldr	r3, [pc, #136]	; (8003354 <HAL_RCC_OscConfig+0x6a4>)
 80032ca:	4923      	ldr	r1, [pc, #140]	; (8003358 <HAL_RCC_OscConfig+0x6a8>)
 80032cc:	400a      	ands	r2, r1
 80032ce:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7ff fa20 	bl	8002714 <HAL_GetTick>
 80032d4:	0003      	movs	r3, r0
 80032d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032da:	f7ff fa1b 	bl	8002714 <HAL_GetTick>
 80032de:	0002      	movs	r2, r0
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e0aa      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032ec:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2202      	movs	r2, #2
 80032f2:	4013      	ands	r3, r2
 80032f4:	d1f1      	bne.n	80032da <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d100      	bne.n	8003300 <HAL_RCC_OscConfig+0x650>
 80032fe:	e09f      	b.n	8003440 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b0c      	cmp	r3, #12
 8003304:	d100      	bne.n	8003308 <HAL_RCC_OscConfig+0x658>
 8003306:	e078      	b.n	80033fa <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	2b02      	cmp	r3, #2
 800330e:	d159      	bne.n	80033c4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003310:	4b09      	ldr	r3, [pc, #36]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_RCC_OscConfig+0x688>)
 8003316:	4911      	ldr	r1, [pc, #68]	; (800335c <HAL_RCC_OscConfig+0x6ac>)
 8003318:	400a      	ands	r2, r1
 800331a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7ff f9fa 	bl	8002714 <HAL_GetTick>
 8003320:	0003      	movs	r3, r0
 8003322:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003324:	e01c      	b.n	8003360 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003326:	f7ff f9f5 	bl	8002714 <HAL_GetTick>
 800332a:	0002      	movs	r2, r0
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d915      	bls.n	8003360 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e084      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
 8003338:	40021000 	.word	0x40021000
 800333c:	ffff1fff 	.word	0xffff1fff
 8003340:	fffffeff 	.word	0xfffffeff
 8003344:	40007000 	.word	0x40007000
 8003348:	fffffbff 	.word	0xfffffbff
 800334c:	00001388 	.word	0x00001388
 8003350:	efffffff 	.word	0xefffffff
 8003354:	40010000 	.word	0x40010000
 8003358:	ffffdfff 	.word	0xffffdfff
 800335c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003360:	4b3a      	ldr	r3, [pc, #232]	; (800344c <HAL_RCC_OscConfig+0x79c>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	049b      	lsls	r3, r3, #18
 8003368:	4013      	ands	r3, r2
 800336a:	d1dc      	bne.n	8003326 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800336c:	4b37      	ldr	r3, [pc, #220]	; (800344c <HAL_RCC_OscConfig+0x79c>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4a37      	ldr	r2, [pc, #220]	; (8003450 <HAL_RCC_OscConfig+0x7a0>)
 8003372:	4013      	ands	r3, r2
 8003374:	0019      	movs	r1, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	431a      	orrs	r2, r3
 8003386:	4b31      	ldr	r3, [pc, #196]	; (800344c <HAL_RCC_OscConfig+0x79c>)
 8003388:	430a      	orrs	r2, r1
 800338a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800338c:	4b2f      	ldr	r3, [pc, #188]	; (800344c <HAL_RCC_OscConfig+0x79c>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4b2e      	ldr	r3, [pc, #184]	; (800344c <HAL_RCC_OscConfig+0x79c>)
 8003392:	2180      	movs	r1, #128	; 0x80
 8003394:	0449      	lsls	r1, r1, #17
 8003396:	430a      	orrs	r2, r1
 8003398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339a:	f7ff f9bb 	bl	8002714 <HAL_GetTick>
 800339e:	0003      	movs	r3, r0
 80033a0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a4:	f7ff f9b6 	bl	8002714 <HAL_GetTick>
 80033a8:	0002      	movs	r2, r0
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e045      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80033b6:	4b25      	ldr	r3, [pc, #148]	; (800344c <HAL_RCC_OscConfig+0x79c>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	049b      	lsls	r3, r3, #18
 80033be:	4013      	ands	r3, r2
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0x6f4>
 80033c2:	e03d      	b.n	8003440 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c4:	4b21      	ldr	r3, [pc, #132]	; (800344c <HAL_RCC_OscConfig+0x79c>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4b20      	ldr	r3, [pc, #128]	; (800344c <HAL_RCC_OscConfig+0x79c>)
 80033ca:	4922      	ldr	r1, [pc, #136]	; (8003454 <HAL_RCC_OscConfig+0x7a4>)
 80033cc:	400a      	ands	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7ff f9a0 	bl	8002714 <HAL_GetTick>
 80033d4:	0003      	movs	r3, r0
 80033d6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033da:	f7ff f99b 	bl	8002714 <HAL_GetTick>
 80033de:	0002      	movs	r2, r0
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e02a      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80033ec:	4b17      	ldr	r3, [pc, #92]	; (800344c <HAL_RCC_OscConfig+0x79c>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	2380      	movs	r3, #128	; 0x80
 80033f2:	049b      	lsls	r3, r3, #18
 80033f4:	4013      	ands	r3, r2
 80033f6:	d1f0      	bne.n	80033da <HAL_RCC_OscConfig+0x72a>
 80033f8:	e022      	b.n	8003440 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e01d      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003406:	4b11      	ldr	r3, [pc, #68]	; (800344c <HAL_RCC_OscConfig+0x79c>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	025b      	lsls	r3, r3, #9
 8003412:	401a      	ands	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	429a      	cmp	r2, r3
 800341a:	d10f      	bne.n	800343c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	23f0      	movs	r3, #240	; 0xf0
 8003420:	039b      	lsls	r3, r3, #14
 8003422:	401a      	ands	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d107      	bne.n	800343c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	23c0      	movs	r3, #192	; 0xc0
 8003430:	041b      	lsls	r3, r3, #16
 8003432:	401a      	ands	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b00a      	add	sp, #40	; 0x28
 8003448:	bdb0      	pop	{r4, r5, r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	40021000 	.word	0x40021000
 8003450:	ff02ffff 	.word	0xff02ffff
 8003454:	feffffff 	.word	0xfeffffff

08003458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003458:	b5b0      	push	{r4, r5, r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e128      	b.n	80036be <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800346c:	4b96      	ldr	r3, [pc, #600]	; (80036c8 <HAL_RCC_ClockConfig+0x270>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2201      	movs	r2, #1
 8003472:	4013      	ands	r3, r2
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d91e      	bls.n	80034b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b93      	ldr	r3, [pc, #588]	; (80036c8 <HAL_RCC_ClockConfig+0x270>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2201      	movs	r2, #1
 8003480:	4393      	bics	r3, r2
 8003482:	0019      	movs	r1, r3
 8003484:	4b90      	ldr	r3, [pc, #576]	; (80036c8 <HAL_RCC_ClockConfig+0x270>)
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800348c:	f7ff f942 	bl	8002714 <HAL_GetTick>
 8003490:	0003      	movs	r3, r0
 8003492:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003494:	e009      	b.n	80034aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003496:	f7ff f93d 	bl	8002714 <HAL_GetTick>
 800349a:	0002      	movs	r2, r0
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	4a8a      	ldr	r2, [pc, #552]	; (80036cc <HAL_RCC_ClockConfig+0x274>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e109      	b.n	80036be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034aa:	4b87      	ldr	r3, [pc, #540]	; (80036c8 <HAL_RCC_ClockConfig+0x270>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2201      	movs	r2, #1
 80034b0:	4013      	ands	r3, r2
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d1ee      	bne.n	8003496 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2202      	movs	r2, #2
 80034be:	4013      	ands	r3, r2
 80034c0:	d009      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c2:	4b83      	ldr	r3, [pc, #524]	; (80036d0 <HAL_RCC_ClockConfig+0x278>)
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	22f0      	movs	r2, #240	; 0xf0
 80034c8:	4393      	bics	r3, r2
 80034ca:	0019      	movs	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	4b7f      	ldr	r3, [pc, #508]	; (80036d0 <HAL_RCC_ClockConfig+0x278>)
 80034d2:	430a      	orrs	r2, r1
 80034d4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2201      	movs	r2, #1
 80034dc:	4013      	ands	r3, r2
 80034de:	d100      	bne.n	80034e2 <HAL_RCC_ClockConfig+0x8a>
 80034e0:	e089      	b.n	80035f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d107      	bne.n	80034fa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034ea:	4b79      	ldr	r3, [pc, #484]	; (80036d0 <HAL_RCC_ClockConfig+0x278>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	029b      	lsls	r3, r3, #10
 80034f2:	4013      	ands	r3, r2
 80034f4:	d120      	bne.n	8003538 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e0e1      	b.n	80036be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d107      	bne.n	8003512 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003502:	4b73      	ldr	r3, [pc, #460]	; (80036d0 <HAL_RCC_ClockConfig+0x278>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	049b      	lsls	r3, r3, #18
 800350a:	4013      	ands	r3, r2
 800350c:	d114      	bne.n	8003538 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e0d5      	b.n	80036be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d106      	bne.n	8003528 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800351a:	4b6d      	ldr	r3, [pc, #436]	; (80036d0 <HAL_RCC_ClockConfig+0x278>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2204      	movs	r2, #4
 8003520:	4013      	ands	r3, r2
 8003522:	d109      	bne.n	8003538 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0ca      	b.n	80036be <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003528:	4b69      	ldr	r3, [pc, #420]	; (80036d0 <HAL_RCC_ClockConfig+0x278>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4013      	ands	r3, r2
 8003532:	d101      	bne.n	8003538 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0c2      	b.n	80036be <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003538:	4b65      	ldr	r3, [pc, #404]	; (80036d0 <HAL_RCC_ClockConfig+0x278>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2203      	movs	r2, #3
 800353e:	4393      	bics	r3, r2
 8003540:	0019      	movs	r1, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	4b62      	ldr	r3, [pc, #392]	; (80036d0 <HAL_RCC_ClockConfig+0x278>)
 8003548:	430a      	orrs	r2, r1
 800354a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800354c:	f7ff f8e2 	bl	8002714 <HAL_GetTick>
 8003550:	0003      	movs	r3, r0
 8003552:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b02      	cmp	r3, #2
 800355a:	d111      	bne.n	8003580 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800355c:	e009      	b.n	8003572 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800355e:	f7ff f8d9 	bl	8002714 <HAL_GetTick>
 8003562:	0002      	movs	r2, r0
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	4a58      	ldr	r2, [pc, #352]	; (80036cc <HAL_RCC_ClockConfig+0x274>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e0a5      	b.n	80036be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003572:	4b57      	ldr	r3, [pc, #348]	; (80036d0 <HAL_RCC_ClockConfig+0x278>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	220c      	movs	r2, #12
 8003578:	4013      	ands	r3, r2
 800357a:	2b08      	cmp	r3, #8
 800357c:	d1ef      	bne.n	800355e <HAL_RCC_ClockConfig+0x106>
 800357e:	e03a      	b.n	80035f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b03      	cmp	r3, #3
 8003586:	d111      	bne.n	80035ac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003588:	e009      	b.n	800359e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800358a:	f7ff f8c3 	bl	8002714 <HAL_GetTick>
 800358e:	0002      	movs	r2, r0
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	4a4d      	ldr	r2, [pc, #308]	; (80036cc <HAL_RCC_ClockConfig+0x274>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d901      	bls.n	800359e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e08f      	b.n	80036be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800359e:	4b4c      	ldr	r3, [pc, #304]	; (80036d0 <HAL_RCC_ClockConfig+0x278>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	220c      	movs	r2, #12
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b0c      	cmp	r3, #12
 80035a8:	d1ef      	bne.n	800358a <HAL_RCC_ClockConfig+0x132>
 80035aa:	e024      	b.n	80035f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d11b      	bne.n	80035ec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80035b4:	e009      	b.n	80035ca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b6:	f7ff f8ad 	bl	8002714 <HAL_GetTick>
 80035ba:	0002      	movs	r2, r0
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	4a42      	ldr	r2, [pc, #264]	; (80036cc <HAL_RCC_ClockConfig+0x274>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e079      	b.n	80036be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ca:	4b41      	ldr	r3, [pc, #260]	; (80036d0 <HAL_RCC_ClockConfig+0x278>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	220c      	movs	r2, #12
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d1ef      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x15e>
 80035d6:	e00e      	b.n	80035f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d8:	f7ff f89c 	bl	8002714 <HAL_GetTick>
 80035dc:	0002      	movs	r2, r0
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	4a3a      	ldr	r2, [pc, #232]	; (80036cc <HAL_RCC_ClockConfig+0x274>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e068      	b.n	80036be <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80035ec:	4b38      	ldr	r3, [pc, #224]	; (80036d0 <HAL_RCC_ClockConfig+0x278>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	220c      	movs	r2, #12
 80035f2:	4013      	ands	r3, r2
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f6:	4b34      	ldr	r3, [pc, #208]	; (80036c8 <HAL_RCC_ClockConfig+0x270>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2201      	movs	r2, #1
 80035fc:	4013      	ands	r3, r2
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d21e      	bcs.n	8003642 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003604:	4b30      	ldr	r3, [pc, #192]	; (80036c8 <HAL_RCC_ClockConfig+0x270>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2201      	movs	r2, #1
 800360a:	4393      	bics	r3, r2
 800360c:	0019      	movs	r1, r3
 800360e:	4b2e      	ldr	r3, [pc, #184]	; (80036c8 <HAL_RCC_ClockConfig+0x270>)
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003616:	f7ff f87d 	bl	8002714 <HAL_GetTick>
 800361a:	0003      	movs	r3, r0
 800361c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	e009      	b.n	8003634 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003620:	f7ff f878 	bl	8002714 <HAL_GetTick>
 8003624:	0002      	movs	r2, r0
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	4a28      	ldr	r2, [pc, #160]	; (80036cc <HAL_RCC_ClockConfig+0x274>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e044      	b.n	80036be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003634:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <HAL_RCC_ClockConfig+0x270>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2201      	movs	r2, #1
 800363a:	4013      	ands	r3, r2
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d1ee      	bne.n	8003620 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2204      	movs	r2, #4
 8003648:	4013      	ands	r3, r2
 800364a:	d009      	beq.n	8003660 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800364c:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <HAL_RCC_ClockConfig+0x278>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4a20      	ldr	r2, [pc, #128]	; (80036d4 <HAL_RCC_ClockConfig+0x27c>)
 8003652:	4013      	ands	r3, r2
 8003654:	0019      	movs	r1, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <HAL_RCC_ClockConfig+0x278>)
 800365c:	430a      	orrs	r2, r1
 800365e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2208      	movs	r2, #8
 8003666:	4013      	ands	r3, r2
 8003668:	d00a      	beq.n	8003680 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800366a:	4b19      	ldr	r3, [pc, #100]	; (80036d0 <HAL_RCC_ClockConfig+0x278>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	4a1a      	ldr	r2, [pc, #104]	; (80036d8 <HAL_RCC_ClockConfig+0x280>)
 8003670:	4013      	ands	r3, r2
 8003672:	0019      	movs	r1, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	00da      	lsls	r2, r3, #3
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <HAL_RCC_ClockConfig+0x278>)
 800367c:	430a      	orrs	r2, r1
 800367e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003680:	f000 f832 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 8003684:	0001      	movs	r1, r0
 8003686:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <HAL_RCC_ClockConfig+0x278>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	220f      	movs	r2, #15
 800368e:	4013      	ands	r3, r2
 8003690:	4a12      	ldr	r2, [pc, #72]	; (80036dc <HAL_RCC_ClockConfig+0x284>)
 8003692:	5cd3      	ldrb	r3, [r2, r3]
 8003694:	000a      	movs	r2, r1
 8003696:	40da      	lsrs	r2, r3
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <HAL_RCC_ClockConfig+0x288>)
 800369a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <HAL_RCC_ClockConfig+0x28c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	250b      	movs	r5, #11
 80036a2:	197c      	adds	r4, r7, r5
 80036a4:	0018      	movs	r0, r3
 80036a6:	f7fe ffef 	bl	8002688 <HAL_InitTick>
 80036aa:	0003      	movs	r3, r0
 80036ac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80036ae:	197b      	adds	r3, r7, r5
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80036b6:	197b      	adds	r3, r7, r5
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	e000      	b.n	80036be <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	0018      	movs	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b004      	add	sp, #16
 80036c4:	bdb0      	pop	{r4, r5, r7, pc}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	40022000 	.word	0x40022000
 80036cc:	00001388 	.word	0x00001388
 80036d0:	40021000 	.word	0x40021000
 80036d4:	fffff8ff 	.word	0xfffff8ff
 80036d8:	ffffc7ff 	.word	0xffffc7ff
 80036dc:	0800701c 	.word	0x0800701c
 80036e0:	200000a8 	.word	0x200000a8
 80036e4:	200000ac 	.word	0x200000ac

080036e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e8:	b5b0      	push	{r4, r5, r7, lr}
 80036ea:	b08e      	sub	sp, #56	; 0x38
 80036ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80036ee:	4b4c      	ldr	r3, [pc, #304]	; (8003820 <HAL_RCC_GetSysClockFreq+0x138>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f6:	230c      	movs	r3, #12
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b0c      	cmp	r3, #12
 80036fc:	d014      	beq.n	8003728 <HAL_RCC_GetSysClockFreq+0x40>
 80036fe:	d900      	bls.n	8003702 <HAL_RCC_GetSysClockFreq+0x1a>
 8003700:	e07b      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x112>
 8003702:	2b04      	cmp	r3, #4
 8003704:	d002      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0x24>
 8003706:	2b08      	cmp	r3, #8
 8003708:	d00b      	beq.n	8003722 <HAL_RCC_GetSysClockFreq+0x3a>
 800370a:	e076      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800370c:	4b44      	ldr	r3, [pc, #272]	; (8003820 <HAL_RCC_GetSysClockFreq+0x138>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2210      	movs	r2, #16
 8003712:	4013      	ands	r3, r2
 8003714:	d002      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003716:	4b43      	ldr	r3, [pc, #268]	; (8003824 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003718:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800371a:	e07c      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800371c:	4b42      	ldr	r3, [pc, #264]	; (8003828 <HAL_RCC_GetSysClockFreq+0x140>)
 800371e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003720:	e079      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003722:	4b42      	ldr	r3, [pc, #264]	; (800382c <HAL_RCC_GetSysClockFreq+0x144>)
 8003724:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003726:	e076      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372a:	0c9a      	lsrs	r2, r3, #18
 800372c:	230f      	movs	r3, #15
 800372e:	401a      	ands	r2, r3
 8003730:	4b3f      	ldr	r3, [pc, #252]	; (8003830 <HAL_RCC_GetSysClockFreq+0x148>)
 8003732:	5c9b      	ldrb	r3, [r3, r2]
 8003734:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003738:	0d9a      	lsrs	r2, r3, #22
 800373a:	2303      	movs	r3, #3
 800373c:	4013      	ands	r3, r2
 800373e:	3301      	adds	r3, #1
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003742:	4b37      	ldr	r3, [pc, #220]	; (8003820 <HAL_RCC_GetSysClockFreq+0x138>)
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	025b      	lsls	r3, r3, #9
 800374a:	4013      	ands	r3, r2
 800374c:	d01a      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	4a35      	ldr	r2, [pc, #212]	; (800382c <HAL_RCC_GetSysClockFreq+0x144>)
 8003758:	2300      	movs	r3, #0
 800375a:	69b8      	ldr	r0, [r7, #24]
 800375c:	69f9      	ldr	r1, [r7, #28]
 800375e:	f7fc fe85 	bl	800046c <__aeabi_lmul>
 8003762:	0002      	movs	r2, r0
 8003764:	000b      	movs	r3, r1
 8003766:	0010      	movs	r0, r2
 8003768:	0019      	movs	r1, r3
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f7fc fe59 	bl	800042c <__aeabi_uldivmod>
 800377a:	0002      	movs	r2, r0
 800377c:	000b      	movs	r3, r1
 800377e:	0013      	movs	r3, r2
 8003780:	637b      	str	r3, [r7, #52]	; 0x34
 8003782:	e037      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003784:	4b26      	ldr	r3, [pc, #152]	; (8003820 <HAL_RCC_GetSysClockFreq+0x138>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2210      	movs	r2, #16
 800378a:	4013      	ands	r3, r2
 800378c:	d01a      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	4a23      	ldr	r2, [pc, #140]	; (8003824 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003798:	2300      	movs	r3, #0
 800379a:	68b8      	ldr	r0, [r7, #8]
 800379c:	68f9      	ldr	r1, [r7, #12]
 800379e:	f7fc fe65 	bl	800046c <__aeabi_lmul>
 80037a2:	0002      	movs	r2, r0
 80037a4:	000b      	movs	r3, r1
 80037a6:	0010      	movs	r0, r2
 80037a8:	0019      	movs	r1, r3
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	603b      	str	r3, [r7, #0]
 80037ae:	2300      	movs	r3, #0
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f7fc fe39 	bl	800042c <__aeabi_uldivmod>
 80037ba:	0002      	movs	r2, r0
 80037bc:	000b      	movs	r3, r1
 80037be:	0013      	movs	r3, r2
 80037c0:	637b      	str	r3, [r7, #52]	; 0x34
 80037c2:	e017      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	0018      	movs	r0, r3
 80037c8:	2300      	movs	r3, #0
 80037ca:	0019      	movs	r1, r3
 80037cc:	4a16      	ldr	r2, [pc, #88]	; (8003828 <HAL_RCC_GetSysClockFreq+0x140>)
 80037ce:	2300      	movs	r3, #0
 80037d0:	f7fc fe4c 	bl	800046c <__aeabi_lmul>
 80037d4:	0002      	movs	r2, r0
 80037d6:	000b      	movs	r3, r1
 80037d8:	0010      	movs	r0, r2
 80037da:	0019      	movs	r1, r3
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	001c      	movs	r4, r3
 80037e0:	2300      	movs	r3, #0
 80037e2:	001d      	movs	r5, r3
 80037e4:	0022      	movs	r2, r4
 80037e6:	002b      	movs	r3, r5
 80037e8:	f7fc fe20 	bl	800042c <__aeabi_uldivmod>
 80037ec:	0002      	movs	r2, r0
 80037ee:	000b      	movs	r3, r1
 80037f0:	0013      	movs	r3, r2
 80037f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80037f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037f8:	e00d      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80037fa:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCC_GetSysClockFreq+0x138>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	0b5b      	lsrs	r3, r3, #13
 8003800:	2207      	movs	r2, #7
 8003802:	4013      	ands	r3, r2
 8003804:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	3301      	adds	r3, #1
 800380a:	2280      	movs	r2, #128	; 0x80
 800380c:	0212      	lsls	r2, r2, #8
 800380e:	409a      	lsls	r2, r3
 8003810:	0013      	movs	r3, r2
 8003812:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003814:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003818:	0018      	movs	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	b00e      	add	sp, #56	; 0x38
 800381e:	bdb0      	pop	{r4, r5, r7, pc}
 8003820:	40021000 	.word	0x40021000
 8003824:	003d0900 	.word	0x003d0900
 8003828:	00f42400 	.word	0x00f42400
 800382c:	007a1200 	.word	0x007a1200
 8003830:	08007034 	.word	0x08007034

08003834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003838:	4b02      	ldr	r3, [pc, #8]	; (8003844 <HAL_RCC_GetHCLKFreq+0x10>)
 800383a:	681b      	ldr	r3, [r3, #0]
}
 800383c:	0018      	movs	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	200000a8 	.word	0x200000a8

08003848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800384c:	f7ff fff2 	bl	8003834 <HAL_RCC_GetHCLKFreq>
 8003850:	0001      	movs	r1, r0
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	2207      	movs	r2, #7
 800385a:	4013      	ands	r3, r2
 800385c:	4a04      	ldr	r2, [pc, #16]	; (8003870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800385e:	5cd3      	ldrb	r3, [r2, r3]
 8003860:	40d9      	lsrs	r1, r3
 8003862:	000b      	movs	r3, r1
}
 8003864:	0018      	movs	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	40021000 	.word	0x40021000
 8003870:	0800702c 	.word	0x0800702c

08003874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003878:	f7ff ffdc 	bl	8003834 <HAL_RCC_GetHCLKFreq>
 800387c:	0001      	movs	r1, r0
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	0adb      	lsrs	r3, r3, #11
 8003884:	2207      	movs	r2, #7
 8003886:	4013      	ands	r3, r2
 8003888:	4a04      	ldr	r2, [pc, #16]	; (800389c <HAL_RCC_GetPCLK2Freq+0x28>)
 800388a:	5cd3      	ldrb	r3, [r2, r3]
 800388c:	40d9      	lsrs	r1, r3
 800388e:	000b      	movs	r3, r1
}
 8003890:	0018      	movs	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	40021000 	.word	0x40021000
 800389c:	0800702c 	.word	0x0800702c

080038a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80038a8:	2317      	movs	r3, #23
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2220      	movs	r2, #32
 80038b6:	4013      	ands	r3, r2
 80038b8:	d106      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	4013      	ands	r3, r2
 80038c4:	d100      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80038c6:	e104      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038c8:	4bb9      	ldr	r3, [pc, #740]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	055b      	lsls	r3, r3, #21
 80038d0:	4013      	ands	r3, r2
 80038d2:	d10a      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d4:	4bb6      	ldr	r3, [pc, #728]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d8:	4bb5      	ldr	r3, [pc, #724]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038da:	2180      	movs	r1, #128	; 0x80
 80038dc:	0549      	lsls	r1, r1, #21
 80038de:	430a      	orrs	r2, r1
 80038e0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80038e2:	2317      	movs	r3, #23
 80038e4:	18fb      	adds	r3, r7, r3
 80038e6:	2201      	movs	r2, #1
 80038e8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ea:	4bb2      	ldr	r3, [pc, #712]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	4013      	ands	r3, r2
 80038f4:	d11a      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f6:	4baf      	ldr	r3, [pc, #700]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4bae      	ldr	r3, [pc, #696]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80038fc:	2180      	movs	r1, #128	; 0x80
 80038fe:	0049      	lsls	r1, r1, #1
 8003900:	430a      	orrs	r2, r1
 8003902:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003904:	f7fe ff06 	bl	8002714 <HAL_GetTick>
 8003908:	0003      	movs	r3, r0
 800390a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390c:	e008      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800390e:	f7fe ff01 	bl	8002714 <HAL_GetTick>
 8003912:	0002      	movs	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b64      	cmp	r3, #100	; 0x64
 800391a:	d901      	bls.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e143      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003920:	4ba4      	ldr	r3, [pc, #656]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4013      	ands	r3, r2
 800392a:	d0f0      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800392c:	4ba0      	ldr	r3, [pc, #640]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	23c0      	movs	r3, #192	; 0xc0
 8003932:	039b      	lsls	r3, r3, #14
 8003934:	4013      	ands	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	23c0      	movs	r3, #192	; 0xc0
 800393e:	039b      	lsls	r3, r3, #14
 8003940:	4013      	ands	r3, r2
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	429a      	cmp	r2, r3
 8003946:	d107      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	23c0      	movs	r3, #192	; 0xc0
 800394e:	039b      	lsls	r3, r3, #14
 8003950:	4013      	ands	r3, r2
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	429a      	cmp	r2, r3
 8003956:	d013      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	23c0      	movs	r3, #192	; 0xc0
 800395e:	029b      	lsls	r3, r3, #10
 8003960:	401a      	ands	r2, r3
 8003962:	23c0      	movs	r3, #192	; 0xc0
 8003964:	029b      	lsls	r3, r3, #10
 8003966:	429a      	cmp	r2, r3
 8003968:	d10a      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800396a:	4b91      	ldr	r3, [pc, #580]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	029b      	lsls	r3, r3, #10
 8003972:	401a      	ands	r2, r3
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	029b      	lsls	r3, r3, #10
 8003978:	429a      	cmp	r2, r3
 800397a:	d101      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e113      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003980:	4b8b      	ldr	r3, [pc, #556]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003982:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003984:	23c0      	movs	r3, #192	; 0xc0
 8003986:	029b      	lsls	r3, r3, #10
 8003988:	4013      	ands	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d049      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	23c0      	movs	r3, #192	; 0xc0
 8003998:	029b      	lsls	r3, r3, #10
 800399a:	4013      	ands	r3, r2
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d004      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2220      	movs	r2, #32
 80039a8:	4013      	ands	r3, r2
 80039aa:	d10d      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	23c0      	movs	r3, #192	; 0xc0
 80039b2:	029b      	lsls	r3, r3, #10
 80039b4:	4013      	ands	r3, r2
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d034      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	2380      	movs	r3, #128	; 0x80
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	4013      	ands	r3, r2
 80039c6:	d02e      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80039c8:	4b79      	ldr	r3, [pc, #484]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039cc:	4a7a      	ldr	r2, [pc, #488]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039d2:	4b77      	ldr	r3, [pc, #476]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039d6:	4b76      	ldr	r3, [pc, #472]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039d8:	2180      	movs	r1, #128	; 0x80
 80039da:	0309      	lsls	r1, r1, #12
 80039dc:	430a      	orrs	r2, r1
 80039de:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039e0:	4b73      	ldr	r3, [pc, #460]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039e4:	4b72      	ldr	r3, [pc, #456]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039e6:	4975      	ldr	r1, [pc, #468]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80039e8:	400a      	ands	r2, r1
 80039ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80039ec:	4b70      	ldr	r3, [pc, #448]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4013      	ands	r3, r2
 80039fa:	d014      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fc:	f7fe fe8a 	bl	8002714 <HAL_GetTick>
 8003a00:	0003      	movs	r3, r0
 8003a02:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a04:	e009      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a06:	f7fe fe85 	bl	8002714 <HAL_GetTick>
 8003a0a:	0002      	movs	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	4a6b      	ldr	r2, [pc, #428]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e0c6      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a1a:	4b65      	ldr	r3, [pc, #404]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4013      	ands	r3, r2
 8003a24:	d0ef      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d01f      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	23c0      	movs	r3, #192	; 0xc0
 8003a38:	029b      	lsls	r3, r3, #10
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	23c0      	movs	r3, #192	; 0xc0
 8003a3e:	029b      	lsls	r3, r3, #10
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d10c      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003a44:	4b5a      	ldr	r3, [pc, #360]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a5e      	ldr	r2, [pc, #376]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	23c0      	movs	r3, #192	; 0xc0
 8003a54:	039b      	lsls	r3, r3, #14
 8003a56:	401a      	ands	r2, r3
 8003a58:	4b55      	ldr	r3, [pc, #340]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	4b54      	ldr	r3, [pc, #336]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	23c0      	movs	r3, #192	; 0xc0
 8003a68:	029b      	lsls	r3, r3, #10
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	4b50      	ldr	r3, [pc, #320]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2220      	movs	r2, #32
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d01f      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	23c0      	movs	r3, #192	; 0xc0
 8003a82:	029b      	lsls	r3, r3, #10
 8003a84:	401a      	ands	r2, r3
 8003a86:	23c0      	movs	r3, #192	; 0xc0
 8003a88:	029b      	lsls	r3, r3, #10
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003a8e:	4b48      	ldr	r3, [pc, #288]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a4c      	ldr	r2, [pc, #304]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	0019      	movs	r1, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	23c0      	movs	r3, #192	; 0xc0
 8003a9e:	039b      	lsls	r3, r3, #14
 8003aa0:	401a      	ands	r2, r3
 8003aa2:	4b43      	ldr	r3, [pc, #268]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	4b41      	ldr	r3, [pc, #260]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003aaa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	23c0      	movs	r3, #192	; 0xc0
 8003ab2:	029b      	lsls	r3, r3, #10
 8003ab4:	401a      	ands	r2, r3
 8003ab6:	4b3e      	ldr	r3, [pc, #248]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003abc:	2317      	movs	r3, #23
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d105      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac6:	4b3a      	ldr	r3, [pc, #232]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aca:	4b39      	ldr	r3, [pc, #228]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003acc:	493e      	ldr	r1, [pc, #248]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003ace:	400a      	ands	r2, r1
 8003ad0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d009      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003adc:	4b34      	ldr	r3, [pc, #208]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	4393      	bics	r3, r2
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003aec:	430a      	orrs	r2, r1
 8003aee:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2202      	movs	r2, #2
 8003af6:	4013      	ands	r3, r2
 8003af8:	d009      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003afa:	4b2d      	ldr	r3, [pc, #180]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afe:	220c      	movs	r2, #12
 8003b00:	4393      	bics	r3, r2
 8003b02:	0019      	movs	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2204      	movs	r2, #4
 8003b14:	4013      	ands	r3, r2
 8003b16:	d009      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b18:	4b25      	ldr	r3, [pc, #148]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1c:	4a2b      	ldr	r2, [pc, #172]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	0019      	movs	r1, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2208      	movs	r2, #8
 8003b32:	4013      	ands	r3, r2
 8003b34:	d009      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b36:	4b1e      	ldr	r3, [pc, #120]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3a:	4a25      	ldr	r2, [pc, #148]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	0019      	movs	r1, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699a      	ldr	r2, [r3, #24]
 8003b44:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b46:	430a      	orrs	r2, r1
 8003b48:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	2380      	movs	r3, #128	; 0x80
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	4013      	ands	r3, r2
 8003b54:	d009      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b56:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5a:	4a17      	ldr	r2, [pc, #92]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	0019      	movs	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b66:	430a      	orrs	r2, r1
 8003b68:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2240      	movs	r2, #64	; 0x40
 8003b70:	4013      	ands	r3, r2
 8003b72:	d009      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b74:	4b0e      	ldr	r3, [pc, #56]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b78:	4a16      	ldr	r2, [pc, #88]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	0019      	movs	r1, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b82:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b84:	430a      	orrs	r2, r1
 8003b86:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2280      	movs	r2, #128	; 0x80
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d009      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003b92:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b96:	4a10      	ldr	r2, [pc, #64]	; (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	0019      	movs	r1, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1a      	ldr	r2, [r3, #32]
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	0018      	movs	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b006      	add	sp, #24
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40007000 	.word	0x40007000
 8003bb8:	fffcffff 	.word	0xfffcffff
 8003bbc:	fff7ffff 	.word	0xfff7ffff
 8003bc0:	00001388 	.word	0x00001388
 8003bc4:	ffcfffff 	.word	0xffcfffff
 8003bc8:	efffffff 	.word	0xefffffff
 8003bcc:	fffff3ff 	.word	0xfffff3ff
 8003bd0:	ffffcfff 	.word	0xffffcfff
 8003bd4:	fbffffff 	.word	0xfbffffff
 8003bd8:	fff3ffff 	.word	0xfff3ffff

08003bdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e083      	b.n	8003cf6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	2382      	movs	r3, #130	; 0x82
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d009      	beq.n	8003c16 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	61da      	str	r2, [r3, #28]
 8003c08:	e005      	b.n	8003c16 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2251      	movs	r2, #81	; 0x51
 8003c20:	5c9b      	ldrb	r3, [r3, r2]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d107      	bne.n	8003c38 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2250      	movs	r2, #80	; 0x50
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	0018      	movs	r0, r3
 8003c34:	f7fe fac2 	bl	80021bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2251      	movs	r2, #81	; 0x51
 8003c3c:	2102      	movs	r1, #2
 8003c3e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2140      	movs	r1, #64	; 0x40
 8003c4c:	438a      	bics	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	2382      	movs	r3, #130	; 0x82
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	401a      	ands	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6899      	ldr	r1, [r3, #8]
 8003c5e:	2384      	movs	r3, #132	; 0x84
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	400b      	ands	r3, r1
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68d9      	ldr	r1, [r3, #12]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	400b      	ands	r3, r1
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2102      	movs	r1, #2
 8003c78:	400b      	ands	r3, r1
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	2101      	movs	r1, #1
 8003c82:	400b      	ands	r3, r1
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6999      	ldr	r1, [r3, #24]
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	400b      	ands	r3, r1
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	2138      	movs	r1, #56	; 0x38
 8003c98:	400b      	ands	r3, r1
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	2180      	movs	r1, #128	; 0x80
 8003ca2:	400b      	ands	r3, r1
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	0011      	movs	r1, r2
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cac:	2380      	movs	r3, #128	; 0x80
 8003cae:	019b      	lsls	r3, r3, #6
 8003cb0:	401a      	ands	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	0c1b      	lsrs	r3, r3, #16
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	0019      	movs	r1, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	2210      	movs	r2, #16
 8003ccc:	401a      	ands	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4907      	ldr	r1, [pc, #28]	; (8003d00 <HAL_SPI_Init+0x124>)
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2251      	movs	r2, #81	; 0x51
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b002      	add	sp, #8
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	fffff7ff 	.word	0xfffff7ff

08003d04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	1dbb      	adds	r3, r7, #6
 8003d12:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d14:	231f      	movs	r3, #31
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2250      	movs	r2, #80	; 0x50
 8003d20:	5c9b      	ldrb	r3, [r3, r2]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_SPI_Transmit+0x26>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e145      	b.n	8003fb6 <HAL_SPI_Transmit+0x2b2>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2250      	movs	r2, #80	; 0x50
 8003d2e:	2101      	movs	r1, #1
 8003d30:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d32:	f7fe fcef 	bl	8002714 <HAL_GetTick>
 8003d36:	0003      	movs	r3, r0
 8003d38:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003d3a:	2316      	movs	r3, #22
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	1dba      	adds	r2, r7, #6
 8003d40:	8812      	ldrh	r2, [r2, #0]
 8003d42:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2251      	movs	r2, #81	; 0x51
 8003d48:	5c9b      	ldrb	r3, [r3, r2]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d004      	beq.n	8003d5a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003d50:	231f      	movs	r3, #31
 8003d52:	18fb      	adds	r3, r7, r3
 8003d54:	2202      	movs	r2, #2
 8003d56:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d58:	e126      	b.n	8003fa8 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_SPI_Transmit+0x64>
 8003d60:	1dbb      	adds	r3, r7, #6
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d104      	bne.n	8003d72 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003d68:	231f      	movs	r3, #31
 8003d6a:	18fb      	adds	r3, r7, r3
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d70:	e11a      	b.n	8003fa8 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2251      	movs	r2, #81	; 0x51
 8003d76:	2103      	movs	r1, #3
 8003d78:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1dba      	adds	r2, r7, #6
 8003d8a:	8812      	ldrh	r2, [r2, #0]
 8003d8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1dba      	adds	r2, r7, #6
 8003d92:	8812      	ldrh	r2, [r2, #0]
 8003d94:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d110      	bne.n	8003de2 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2140      	movs	r1, #64	; 0x40
 8003dcc:	438a      	bics	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2180      	movs	r1, #128	; 0x80
 8003ddc:	01c9      	lsls	r1, r1, #7
 8003dde:	430a      	orrs	r2, r1
 8003de0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2240      	movs	r2, #64	; 0x40
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b40      	cmp	r3, #64	; 0x40
 8003dee:	d007      	beq.n	8003e00 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2140      	movs	r1, #64	; 0x40
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d152      	bne.n	8003eb2 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <HAL_SPI_Transmit+0x11a>
 8003e14:	2316      	movs	r3, #22
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d143      	bne.n	8003ea6 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	881a      	ldrh	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	1c9a      	adds	r2, r3, #2
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e42:	e030      	b.n	8003ea6 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d112      	bne.n	8003e78 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	881a      	ldrh	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	1c9a      	adds	r2, r3, #2
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e76:	e016      	b.n	8003ea6 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e78:	f7fe fc4c 	bl	8002714 <HAL_GetTick>
 8003e7c:	0002      	movs	r2, r0
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d802      	bhi.n	8003e8e <HAL_SPI_Transmit+0x18a>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	d102      	bne.n	8003e94 <HAL_SPI_Transmit+0x190>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d108      	bne.n	8003ea6 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8003e94:	231f      	movs	r3, #31
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	2203      	movs	r2, #3
 8003e9a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2251      	movs	r2, #81	; 0x51
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	5499      	strb	r1, [r3, r2]
          goto error;
 8003ea4:	e080      	b.n	8003fa8 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1c9      	bne.n	8003e44 <HAL_SPI_Transmit+0x140>
 8003eb0:	e053      	b.n	8003f5a <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <HAL_SPI_Transmit+0x1c0>
 8003eba:	2316      	movs	r3, #22
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d145      	bne.n	8003f50 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	7812      	ldrb	r2, [r2, #0]
 8003ed0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003eea:	e031      	b.n	8003f50 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d113      	bne.n	8003f22 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	7812      	ldrb	r2, [r2, #0]
 8003f06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f20:	e016      	b.n	8003f50 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f22:	f7fe fbf7 	bl	8002714 <HAL_GetTick>
 8003f26:	0002      	movs	r2, r0
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d802      	bhi.n	8003f38 <HAL_SPI_Transmit+0x234>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	3301      	adds	r3, #1
 8003f36:	d102      	bne.n	8003f3e <HAL_SPI_Transmit+0x23a>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d108      	bne.n	8003f50 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 8003f3e:	231f      	movs	r3, #31
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	2203      	movs	r2, #3
 8003f44:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2251      	movs	r2, #81	; 0x51
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	5499      	strb	r1, [r3, r2]
          goto error;
 8003f4e:	e02b      	b.n	8003fa8 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1c8      	bne.n	8003eec <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	6839      	ldr	r1, [r7, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	0018      	movs	r0, r3
 8003f62:	f000 fa85 	bl	8004470 <SPI_EndRxTxTransaction>
 8003f66:	1e03      	subs	r3, r0, #0
 8003f68:	d002      	beq.n	8003f70 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f78:	2300      	movs	r3, #0
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d004      	beq.n	8003fa0 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8003f96:	231f      	movs	r3, #31
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	e003      	b.n	8003fa8 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2251      	movs	r2, #81	; 0x51
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2250      	movs	r2, #80	; 0x50
 8003fac:	2100      	movs	r1, #0
 8003fae:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003fb0:	231f      	movs	r3, #31
 8003fb2:	18fb      	adds	r3, r7, r3
 8003fb4:	781b      	ldrb	r3, [r3, #0]
}
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b008      	add	sp, #32
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b08c      	sub	sp, #48	; 0x30
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	001a      	movs	r2, r3
 8003fcc:	1cbb      	adds	r3, r7, #2
 8003fce:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fd4:	232b      	movs	r3, #43	; 0x2b
 8003fd6:	18fb      	adds	r3, r7, r3
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2250      	movs	r2, #80	; 0x50
 8003fe0:	5c9b      	ldrb	r3, [r3, r2]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_SPI_TransmitReceive+0x2c>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e1b0      	b.n	800434c <HAL_SPI_TransmitReceive+0x38e>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2250      	movs	r2, #80	; 0x50
 8003fee:	2101      	movs	r1, #1
 8003ff0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ff2:	f7fe fb8f 	bl	8002714 <HAL_GetTick>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ffa:	2023      	movs	r0, #35	; 0x23
 8003ffc:	183b      	adds	r3, r7, r0
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	2151      	movs	r1, #81	; 0x51
 8004002:	5c52      	ldrb	r2, [r2, r1]
 8004004:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800400c:	231a      	movs	r3, #26
 800400e:	18fb      	adds	r3, r7, r3
 8004010:	1cba      	adds	r2, r7, #2
 8004012:	8812      	ldrh	r2, [r2, #0]
 8004014:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004016:	183b      	adds	r3, r7, r0
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d011      	beq.n	8004042 <HAL_SPI_TransmitReceive+0x84>
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	2382      	movs	r3, #130	; 0x82
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	429a      	cmp	r2, r3
 8004026:	d107      	bne.n	8004038 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d103      	bne.n	8004038 <HAL_SPI_TransmitReceive+0x7a>
 8004030:	183b      	adds	r3, r7, r0
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b04      	cmp	r3, #4
 8004036:	d004      	beq.n	8004042 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004038:	232b      	movs	r3, #43	; 0x2b
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	2202      	movs	r2, #2
 800403e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004040:	e17d      	b.n	800433e <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d006      	beq.n	8004056 <HAL_SPI_TransmitReceive+0x98>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_SPI_TransmitReceive+0x98>
 800404e:	1cbb      	adds	r3, r7, #2
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d104      	bne.n	8004060 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004056:	232b      	movs	r3, #43	; 0x2b
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	2201      	movs	r2, #1
 800405c:	701a      	strb	r2, [r3, #0]
    goto error;
 800405e:	e16e      	b.n	800433e <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2251      	movs	r2, #81	; 0x51
 8004064:	5c9b      	ldrb	r3, [r3, r2]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b04      	cmp	r3, #4
 800406a:	d003      	beq.n	8004074 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2251      	movs	r2, #81	; 0x51
 8004070:	2105      	movs	r1, #5
 8004072:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1cba      	adds	r2, r7, #2
 8004084:	8812      	ldrh	r2, [r2, #0]
 8004086:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1cba      	adds	r2, r7, #2
 800408c:	8812      	ldrh	r2, [r2, #0]
 800408e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1cba      	adds	r2, r7, #2
 800409a:	8812      	ldrh	r2, [r2, #0]
 800409c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1cba      	adds	r2, r7, #2
 80040a2:	8812      	ldrh	r2, [r2, #0]
 80040a4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2240      	movs	r2, #64	; 0x40
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b40      	cmp	r3, #64	; 0x40
 80040be:	d007      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2140      	movs	r1, #64	; 0x40
 80040cc:	430a      	orrs	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	2380      	movs	r3, #128	; 0x80
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	429a      	cmp	r2, r3
 80040da:	d000      	beq.n	80040de <HAL_SPI_TransmitReceive+0x120>
 80040dc:	e07f      	b.n	80041de <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_SPI_TransmitReceive+0x134>
 80040e6:	231a      	movs	r3, #26
 80040e8:	18fb      	adds	r3, r7, r3
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d000      	beq.n	80040f2 <HAL_SPI_TransmitReceive+0x134>
 80040f0:	e06a      	b.n	80041c8 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	881a      	ldrh	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	1c9a      	adds	r2, r3, #2
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004116:	e057      	b.n	80041c8 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2202      	movs	r2, #2
 8004120:	4013      	ands	r3, r2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d11b      	bne.n	800415e <HAL_SPI_TransmitReceive+0x1a0>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d016      	beq.n	800415e <HAL_SPI_TransmitReceive+0x1a0>
 8004130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004132:	2b01      	cmp	r3, #1
 8004134:	d113      	bne.n	800415e <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	881a      	ldrh	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	1c9a      	adds	r2, r3, #2
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004150:	b29b      	uxth	r3, r3
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2201      	movs	r2, #1
 8004166:	4013      	ands	r3, r2
 8004168:	2b01      	cmp	r3, #1
 800416a:	d119      	bne.n	80041a0 <HAL_SPI_TransmitReceive+0x1e2>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d014      	beq.n	80041a0 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	b292      	uxth	r2, r2
 8004182:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	1c9a      	adds	r2, r3, #2
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800419c:	2301      	movs	r3, #1
 800419e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041a0:	f7fe fab8 	bl	8002714 <HAL_GetTick>
 80041a4:	0002      	movs	r2, r0
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d80b      	bhi.n	80041c8 <HAL_SPI_TransmitReceive+0x20a>
 80041b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b2:	3301      	adds	r3, #1
 80041b4:	d008      	beq.n	80041c8 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 80041b6:	232b      	movs	r3, #43	; 0x2b
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	2203      	movs	r2, #3
 80041bc:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2251      	movs	r2, #81	; 0x51
 80041c2:	2101      	movs	r1, #1
 80041c4:	5499      	strb	r1, [r3, r2]
        goto error;
 80041c6:	e0ba      	b.n	800433e <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1a2      	bne.n	8004118 <HAL_SPI_TransmitReceive+0x15a>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d19d      	bne.n	8004118 <HAL_SPI_TransmitReceive+0x15a>
 80041dc:	e083      	b.n	80042e6 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_SPI_TransmitReceive+0x234>
 80041e6:	231a      	movs	r3, #26
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d000      	beq.n	80041f2 <HAL_SPI_TransmitReceive+0x234>
 80041f0:	e06f      	b.n	80042d2 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	7812      	ldrb	r2, [r2, #0]
 80041fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004218:	e05b      	b.n	80042d2 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2202      	movs	r2, #2
 8004222:	4013      	ands	r3, r2
 8004224:	2b02      	cmp	r3, #2
 8004226:	d11c      	bne.n	8004262 <HAL_SPI_TransmitReceive+0x2a4>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d017      	beq.n	8004262 <HAL_SPI_TransmitReceive+0x2a4>
 8004232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004234:	2b01      	cmp	r3, #1
 8004236:	d114      	bne.n	8004262 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	330c      	adds	r3, #12
 8004242:	7812      	ldrb	r2, [r2, #0]
 8004244:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2201      	movs	r2, #1
 800426a:	4013      	ands	r3, r2
 800426c:	2b01      	cmp	r3, #1
 800426e:	d119      	bne.n	80042a4 <HAL_SPI_TransmitReceive+0x2e6>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d014      	beq.n	80042a4 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042a0:	2301      	movs	r3, #1
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042a4:	f7fe fa36 	bl	8002714 <HAL_GetTick>
 80042a8:	0002      	movs	r2, r0
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d802      	bhi.n	80042ba <HAL_SPI_TransmitReceive+0x2fc>
 80042b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b6:	3301      	adds	r3, #1
 80042b8:	d102      	bne.n	80042c0 <HAL_SPI_TransmitReceive+0x302>
 80042ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d108      	bne.n	80042d2 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 80042c0:	232b      	movs	r3, #43	; 0x2b
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	2203      	movs	r2, #3
 80042c6:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2251      	movs	r2, #81	; 0x51
 80042cc:	2101      	movs	r1, #1
 80042ce:	5499      	strb	r1, [r3, r2]
        goto error;
 80042d0:	e035      	b.n	800433e <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d19e      	bne.n	800421a <HAL_SPI_TransmitReceive+0x25c>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d199      	bne.n	800421a <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	0018      	movs	r0, r3
 80042ee:	f000 f8bf 	bl	8004470 <SPI_EndRxTxTransaction>
 80042f2:	1e03      	subs	r3, r0, #0
 80042f4:	d007      	beq.n	8004306 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 80042f6:	232b      	movs	r3, #43	; 0x2b
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004304:	e01b      	b.n	800433e <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004328:	2b00      	cmp	r3, #0
 800432a:	d004      	beq.n	8004336 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 800432c:	232b      	movs	r3, #43	; 0x2b
 800432e:	18fb      	adds	r3, r7, r3
 8004330:	2201      	movs	r2, #1
 8004332:	701a      	strb	r2, [r3, #0]
 8004334:	e003      	b.n	800433e <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2251      	movs	r2, #81	; 0x51
 800433a:	2101      	movs	r1, #1
 800433c:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2250      	movs	r2, #80	; 0x50
 8004342:	2100      	movs	r1, #0
 8004344:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004346:	232b      	movs	r3, #43	; 0x2b
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	781b      	ldrb	r3, [r3, #0]
}
 800434c:	0018      	movs	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	b00c      	add	sp, #48	; 0x30
 8004352:	bd80      	pop	{r7, pc}

08004354 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	603b      	str	r3, [r7, #0]
 8004360:	1dfb      	adds	r3, r7, #7
 8004362:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004364:	f7fe f9d6 	bl	8002714 <HAL_GetTick>
 8004368:	0002      	movs	r2, r0
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	18d3      	adds	r3, r2, r3
 8004372:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004374:	f7fe f9ce 	bl	8002714 <HAL_GetTick>
 8004378:	0003      	movs	r3, r0
 800437a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800437c:	4b3a      	ldr	r3, [pc, #232]	; (8004468 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	015b      	lsls	r3, r3, #5
 8004382:	0d1b      	lsrs	r3, r3, #20
 8004384:	69fa      	ldr	r2, [r7, #28]
 8004386:	4353      	muls	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800438a:	e058      	b.n	800443e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	3301      	adds	r3, #1
 8004390:	d055      	beq.n	800443e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004392:	f7fe f9bf 	bl	8002714 <HAL_GetTick>
 8004396:	0002      	movs	r2, r0
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	69fa      	ldr	r2, [r7, #28]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d902      	bls.n	80043a8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d142      	bne.n	800442e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	21e0      	movs	r1, #224	; 0xe0
 80043b4:	438a      	bics	r2, r1
 80043b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	2382      	movs	r3, #130	; 0x82
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d113      	bne.n	80043ec <SPI_WaitFlagStateUntilTimeout+0x98>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	2380      	movs	r3, #128	; 0x80
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d005      	beq.n	80043dc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	429a      	cmp	r2, r3
 80043da:	d107      	bne.n	80043ec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2140      	movs	r1, #64	; 0x40
 80043e8:	438a      	bics	r2, r1
 80043ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043f0:	2380      	movs	r3, #128	; 0x80
 80043f2:	019b      	lsls	r3, r3, #6
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d110      	bne.n	800441a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	491a      	ldr	r1, [pc, #104]	; (800446c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004404:	400a      	ands	r2, r1
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2180      	movs	r1, #128	; 0x80
 8004414:	0189      	lsls	r1, r1, #6
 8004416:	430a      	orrs	r2, r1
 8004418:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2251      	movs	r2, #81	; 0x51
 800441e:	2101      	movs	r1, #1
 8004420:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2250      	movs	r2, #80	; 0x50
 8004426:	2100      	movs	r1, #0
 8004428:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e017      	b.n	800445e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	3b01      	subs	r3, #1
 800443c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	4013      	ands	r3, r2
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	425a      	negs	r2, r3
 800444e:	4153      	adcs	r3, r2
 8004450:	b2db      	uxtb	r3, r3
 8004452:	001a      	movs	r2, r3
 8004454:	1dfb      	adds	r3, r7, #7
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d197      	bne.n	800438c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	0018      	movs	r0, r3
 8004460:	46bd      	mov	sp, r7
 8004462:	b008      	add	sp, #32
 8004464:	bd80      	pop	{r7, pc}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	200000a8 	.word	0x200000a8
 800446c:	ffffdfff 	.word	0xffffdfff

08004470 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800447c:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <SPI_EndRxTxTransaction+0x84>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	491d      	ldr	r1, [pc, #116]	; (80044f8 <SPI_EndRxTxTransaction+0x88>)
 8004482:	0018      	movs	r0, r3
 8004484:	f7fb fe5c 	bl	8000140 <__udivsi3>
 8004488:	0003      	movs	r3, r0
 800448a:	001a      	movs	r2, r3
 800448c:	0013      	movs	r3, r2
 800448e:	015b      	lsls	r3, r3, #5
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	189b      	adds	r3, r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	2382      	movs	r3, #130	; 0x82
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d112      	bne.n	80044cc <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	0013      	movs	r3, r2
 80044b0:	2200      	movs	r2, #0
 80044b2:	2180      	movs	r1, #128	; 0x80
 80044b4:	f7ff ff4e 	bl	8004354 <SPI_WaitFlagStateUntilTimeout>
 80044b8:	1e03      	subs	r3, r0, #0
 80044ba:	d016      	beq.n	80044ea <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	2220      	movs	r2, #32
 80044c2:	431a      	orrs	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e00f      	b.n	80044ec <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	2280      	movs	r2, #128	; 0x80
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b80      	cmp	r3, #128	; 0x80
 80044e4:	d0f2      	beq.n	80044cc <SPI_EndRxTxTransaction+0x5c>
 80044e6:	e000      	b.n	80044ea <SPI_EndRxTxTransaction+0x7a>
        break;
 80044e8:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b006      	add	sp, #24
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	200000a8 	.word	0x200000a8
 80044f8:	016e3600 	.word	0x016e3600

080044fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e032      	b.n	8004574 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2239      	movs	r2, #57	; 0x39
 8004512:	5c9b      	ldrb	r3, [r3, r2]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d107      	bne.n	800452a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2238      	movs	r2, #56	; 0x38
 800451e:	2100      	movs	r1, #0
 8004520:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	0018      	movs	r0, r3
 8004526:	f7fd fed9 	bl	80022dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2239      	movs	r2, #57	; 0x39
 800452e:	2102      	movs	r1, #2
 8004530:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3304      	adds	r3, #4
 800453a:	0019      	movs	r1, r3
 800453c:	0010      	movs	r0, r2
 800453e:	f000 fa53 	bl	80049e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	223e      	movs	r2, #62	; 0x3e
 8004546:	2101      	movs	r1, #1
 8004548:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	223a      	movs	r2, #58	; 0x3a
 800454e:	2101      	movs	r1, #1
 8004550:	5499      	strb	r1, [r3, r2]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	223b      	movs	r2, #59	; 0x3b
 8004556:	2101      	movs	r1, #1
 8004558:	5499      	strb	r1, [r3, r2]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	223c      	movs	r2, #60	; 0x3c
 800455e:	2101      	movs	r1, #1
 8004560:	5499      	strb	r1, [r3, r2]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	223d      	movs	r2, #61	; 0x3d
 8004566:	2101      	movs	r1, #1
 8004568:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2239      	movs	r2, #57	; 0x39
 800456e:	2101      	movs	r1, #1
 8004570:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b002      	add	sp, #8
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2239      	movs	r2, #57	; 0x39
 8004588:	5c9b      	ldrb	r3, [r3, r2]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b01      	cmp	r3, #1
 800458e:	d001      	beq.n	8004594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e03b      	b.n	800460c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2239      	movs	r2, #57	; 0x39
 8004598:	2102      	movs	r1, #2
 800459a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2101      	movs	r1, #1
 80045a8:	430a      	orrs	r2, r1
 80045aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	2380      	movs	r3, #128	; 0x80
 80045b2:	05db      	lsls	r3, r3, #23
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d00e      	beq.n	80045d6 <HAL_TIM_Base_Start_IT+0x5a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a15      	ldr	r2, [pc, #84]	; (8004614 <HAL_TIM_Base_Start_IT+0x98>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_TIM_Base_Start_IT+0x5a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a14      	ldr	r2, [pc, #80]	; (8004618 <HAL_TIM_Base_Start_IT+0x9c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <HAL_TIM_Base_Start_IT+0x5a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a12      	ldr	r2, [pc, #72]	; (800461c <HAL_TIM_Base_Start_IT+0xa0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d111      	bne.n	80045fa <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2207      	movs	r2, #7
 80045de:	4013      	ands	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b06      	cmp	r3, #6
 80045e6:	d010      	beq.n	800460a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2101      	movs	r1, #1
 80045f4:	430a      	orrs	r2, r1
 80045f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f8:	e007      	b.n	800460a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2101      	movs	r1, #1
 8004606:	430a      	orrs	r2, r1
 8004608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	0018      	movs	r0, r3
 800460e:	46bd      	mov	sp, r7
 8004610:	b004      	add	sp, #16
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40000400 	.word	0x40000400
 8004618:	40010800 	.word	0x40010800
 800461c:	40011400 	.word	0x40011400

08004620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2202      	movs	r2, #2
 8004630:	4013      	ands	r3, r2
 8004632:	2b02      	cmp	r3, #2
 8004634:	d124      	bne.n	8004680 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2202      	movs	r2, #2
 800463e:	4013      	ands	r3, r2
 8004640:	2b02      	cmp	r3, #2
 8004642:	d11d      	bne.n	8004680 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2203      	movs	r2, #3
 800464a:	4252      	negs	r2, r2
 800464c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	2203      	movs	r2, #3
 800465c:	4013      	ands	r3, r2
 800465e:	d004      	beq.n	800466a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	0018      	movs	r0, r3
 8004664:	f000 f9a8 	bl	80049b8 <HAL_TIM_IC_CaptureCallback>
 8004668:	e007      	b.n	800467a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	0018      	movs	r0, r3
 800466e:	f000 f99b 	bl	80049a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	0018      	movs	r0, r3
 8004676:	f000 f9a7 	bl	80049c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2204      	movs	r2, #4
 8004688:	4013      	ands	r3, r2
 800468a:	2b04      	cmp	r3, #4
 800468c:	d125      	bne.n	80046da <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	2204      	movs	r2, #4
 8004696:	4013      	ands	r3, r2
 8004698:	2b04      	cmp	r3, #4
 800469a:	d11e      	bne.n	80046da <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2205      	movs	r2, #5
 80046a2:	4252      	negs	r2, r2
 80046a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2202      	movs	r2, #2
 80046aa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	23c0      	movs	r3, #192	; 0xc0
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4013      	ands	r3, r2
 80046b8:	d004      	beq.n	80046c4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	0018      	movs	r0, r3
 80046be:	f000 f97b 	bl	80049b8 <HAL_TIM_IC_CaptureCallback>
 80046c2:	e007      	b.n	80046d4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	0018      	movs	r0, r3
 80046c8:	f000 f96e 	bl	80049a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	0018      	movs	r0, r3
 80046d0:	f000 f97a 	bl	80049c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2208      	movs	r2, #8
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d124      	bne.n	8004732 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	2208      	movs	r2, #8
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d11d      	bne.n	8004732 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2209      	movs	r2, #9
 80046fc:	4252      	negs	r2, r2
 80046fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2204      	movs	r2, #4
 8004704:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	2203      	movs	r2, #3
 800470e:	4013      	ands	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0018      	movs	r0, r3
 8004716:	f000 f94f 	bl	80049b8 <HAL_TIM_IC_CaptureCallback>
 800471a:	e007      	b.n	800472c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	0018      	movs	r0, r3
 8004720:	f000 f942 	bl	80049a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	0018      	movs	r0, r3
 8004728:	f000 f94e 	bl	80049c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2210      	movs	r2, #16
 800473a:	4013      	ands	r3, r2
 800473c:	2b10      	cmp	r3, #16
 800473e:	d125      	bne.n	800478c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	2210      	movs	r2, #16
 8004748:	4013      	ands	r3, r2
 800474a:	2b10      	cmp	r3, #16
 800474c:	d11e      	bne.n	800478c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2211      	movs	r2, #17
 8004754:	4252      	negs	r2, r2
 8004756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2208      	movs	r2, #8
 800475c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	23c0      	movs	r3, #192	; 0xc0
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4013      	ands	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	0018      	movs	r0, r3
 8004770:	f000 f922 	bl	80049b8 <HAL_TIM_IC_CaptureCallback>
 8004774:	e007      	b.n	8004786 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0018      	movs	r0, r3
 800477a:	f000 f915 	bl	80049a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	0018      	movs	r0, r3
 8004782:	f000 f921 	bl	80049c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2201      	movs	r2, #1
 8004794:	4013      	ands	r3, r2
 8004796:	2b01      	cmp	r3, #1
 8004798:	d10f      	bne.n	80047ba <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d108      	bne.n	80047ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2202      	movs	r2, #2
 80047ae:	4252      	negs	r2, r2
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	0018      	movs	r0, r3
 80047b6:	f000 f8ef 	bl	8004998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2240      	movs	r2, #64	; 0x40
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d10f      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	2240      	movs	r2, #64	; 0x40
 80047d0:	4013      	ands	r3, r2
 80047d2:	2b40      	cmp	r3, #64	; 0x40
 80047d4:	d108      	bne.n	80047e8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2241      	movs	r2, #65	; 0x41
 80047dc:	4252      	negs	r2, r2
 80047de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	0018      	movs	r0, r3
 80047e4:	f000 f8f8 	bl	80049d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047e8:	46c0      	nop			; (mov r8, r8)
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b002      	add	sp, #8
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047fa:	230f      	movs	r3, #15
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	2200      	movs	r2, #0
 8004800:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2238      	movs	r2, #56	; 0x38
 8004806:	5c9b      	ldrb	r3, [r3, r2]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_TIM_ConfigClockSource+0x20>
 800480c:	2302      	movs	r3, #2
 800480e:	e0bc      	b.n	800498a <HAL_TIM_ConfigClockSource+0x19a>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2238      	movs	r2, #56	; 0x38
 8004814:	2101      	movs	r1, #1
 8004816:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2239      	movs	r2, #57	; 0x39
 800481c:	2102      	movs	r1, #2
 800481e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2277      	movs	r2, #119	; 0x77
 800482c:	4393      	bics	r3, r2
 800482e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4a58      	ldr	r2, [pc, #352]	; (8004994 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004834:	4013      	ands	r3, r2
 8004836:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2280      	movs	r2, #128	; 0x80
 8004846:	0192      	lsls	r2, r2, #6
 8004848:	4293      	cmp	r3, r2
 800484a:	d040      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0xde>
 800484c:	2280      	movs	r2, #128	; 0x80
 800484e:	0192      	lsls	r2, r2, #6
 8004850:	4293      	cmp	r3, r2
 8004852:	d900      	bls.n	8004856 <HAL_TIM_ConfigClockSource+0x66>
 8004854:	e088      	b.n	8004968 <HAL_TIM_ConfigClockSource+0x178>
 8004856:	2280      	movs	r2, #128	; 0x80
 8004858:	0152      	lsls	r2, r2, #5
 800485a:	4293      	cmp	r3, r2
 800485c:	d100      	bne.n	8004860 <HAL_TIM_ConfigClockSource+0x70>
 800485e:	e088      	b.n	8004972 <HAL_TIM_ConfigClockSource+0x182>
 8004860:	2280      	movs	r2, #128	; 0x80
 8004862:	0152      	lsls	r2, r2, #5
 8004864:	4293      	cmp	r3, r2
 8004866:	d900      	bls.n	800486a <HAL_TIM_ConfigClockSource+0x7a>
 8004868:	e07e      	b.n	8004968 <HAL_TIM_ConfigClockSource+0x178>
 800486a:	2b70      	cmp	r3, #112	; 0x70
 800486c:	d018      	beq.n	80048a0 <HAL_TIM_ConfigClockSource+0xb0>
 800486e:	d900      	bls.n	8004872 <HAL_TIM_ConfigClockSource+0x82>
 8004870:	e07a      	b.n	8004968 <HAL_TIM_ConfigClockSource+0x178>
 8004872:	2b60      	cmp	r3, #96	; 0x60
 8004874:	d04f      	beq.n	8004916 <HAL_TIM_ConfigClockSource+0x126>
 8004876:	d900      	bls.n	800487a <HAL_TIM_ConfigClockSource+0x8a>
 8004878:	e076      	b.n	8004968 <HAL_TIM_ConfigClockSource+0x178>
 800487a:	2b50      	cmp	r3, #80	; 0x50
 800487c:	d03b      	beq.n	80048f6 <HAL_TIM_ConfigClockSource+0x106>
 800487e:	d900      	bls.n	8004882 <HAL_TIM_ConfigClockSource+0x92>
 8004880:	e072      	b.n	8004968 <HAL_TIM_ConfigClockSource+0x178>
 8004882:	2b40      	cmp	r3, #64	; 0x40
 8004884:	d057      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0x146>
 8004886:	d900      	bls.n	800488a <HAL_TIM_ConfigClockSource+0x9a>
 8004888:	e06e      	b.n	8004968 <HAL_TIM_ConfigClockSource+0x178>
 800488a:	2b30      	cmp	r3, #48	; 0x30
 800488c:	d063      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x166>
 800488e:	d86b      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x178>
 8004890:	2b20      	cmp	r3, #32
 8004892:	d060      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x166>
 8004894:	d868      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x178>
 8004896:	2b00      	cmp	r3, #0
 8004898:	d05d      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x166>
 800489a:	2b10      	cmp	r3, #16
 800489c:	d05b      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x166>
 800489e:	e063      	b.n	8004968 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6818      	ldr	r0, [r3, #0]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	6899      	ldr	r1, [r3, #8]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f000 f972 	bl	8004b98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2277      	movs	r2, #119	; 0x77
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	609a      	str	r2, [r3, #8]
      break;
 80048cc:	e052      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6899      	ldr	r1, [r3, #8]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f000 f95b 	bl	8004b98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2180      	movs	r1, #128	; 0x80
 80048ee:	01c9      	lsls	r1, r1, #7
 80048f0:	430a      	orrs	r2, r1
 80048f2:	609a      	str	r2, [r3, #8]
      break;
 80048f4:	e03e      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	6859      	ldr	r1, [r3, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	001a      	movs	r2, r3
 8004904:	f000 f8ce 	bl	8004aa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2150      	movs	r1, #80	; 0x50
 800490e:	0018      	movs	r0, r3
 8004910:	f000 f928 	bl	8004b64 <TIM_ITRx_SetConfig>
      break;
 8004914:	e02e      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	6859      	ldr	r1, [r3, #4]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	001a      	movs	r2, r3
 8004924:	f000 f8ec 	bl	8004b00 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2160      	movs	r1, #96	; 0x60
 800492e:	0018      	movs	r0, r3
 8004930:	f000 f918 	bl	8004b64 <TIM_ITRx_SetConfig>
      break;
 8004934:	e01e      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6859      	ldr	r1, [r3, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	001a      	movs	r2, r3
 8004944:	f000 f8ae 	bl	8004aa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2140      	movs	r1, #64	; 0x40
 800494e:	0018      	movs	r0, r3
 8004950:	f000 f908 	bl	8004b64 <TIM_ITRx_SetConfig>
      break;
 8004954:	e00e      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	0019      	movs	r1, r3
 8004960:	0010      	movs	r0, r2
 8004962:	f000 f8ff 	bl	8004b64 <TIM_ITRx_SetConfig>
      break;
 8004966:	e005      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004968:	230f      	movs	r3, #15
 800496a:	18fb      	adds	r3, r7, r3
 800496c:	2201      	movs	r2, #1
 800496e:	701a      	strb	r2, [r3, #0]
      break;
 8004970:	e000      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004972:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2239      	movs	r2, #57	; 0x39
 8004978:	2101      	movs	r1, #1
 800497a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2238      	movs	r2, #56	; 0x38
 8004980:	2100      	movs	r1, #0
 8004982:	5499      	strb	r1, [r3, r2]

  return status;
 8004984:	230f      	movs	r3, #15
 8004986:	18fb      	adds	r3, r7, r3
 8004988:	781b      	ldrb	r3, [r3, #0]
}
 800498a:	0018      	movs	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	b004      	add	sp, #16
 8004990:	bd80      	pop	{r7, pc}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	ffff00ff 	.word	0xffff00ff

08004998 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80049a0:	46c0      	nop			; (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b002      	add	sp, #8
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049b0:	46c0      	nop			; (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b002      	add	sp, #8
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049c0:	46c0      	nop			; (mov r8, r8)
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b002      	add	sp, #8
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049d0:	46c0      	nop			; (mov r8, r8)
 80049d2:	46bd      	mov	sp, r7
 80049d4:	b002      	add	sp, #8
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b002      	add	sp, #8
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	2380      	movs	r3, #128	; 0x80
 80049fc:	05db      	lsls	r3, r3, #23
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d00b      	beq.n	8004a1a <TIM_Base_SetConfig+0x32>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a23      	ldr	r2, [pc, #140]	; (8004a94 <TIM_Base_SetConfig+0xac>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d007      	beq.n	8004a1a <TIM_Base_SetConfig+0x32>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a22      	ldr	r2, [pc, #136]	; (8004a98 <TIM_Base_SetConfig+0xb0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <TIM_Base_SetConfig+0x32>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a21      	ldr	r2, [pc, #132]	; (8004a9c <TIM_Base_SetConfig+0xb4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d108      	bne.n	8004a2c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2270      	movs	r2, #112	; 0x70
 8004a1e:	4393      	bics	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	05db      	lsls	r3, r3, #23
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d00b      	beq.n	8004a4e <TIM_Base_SetConfig+0x66>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a16      	ldr	r2, [pc, #88]	; (8004a94 <TIM_Base_SetConfig+0xac>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d007      	beq.n	8004a4e <TIM_Base_SetConfig+0x66>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <TIM_Base_SetConfig+0xb0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <TIM_Base_SetConfig+0x66>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a14      	ldr	r2, [pc, #80]	; (8004a9c <TIM_Base_SetConfig+0xb4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d108      	bne.n	8004a60 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <TIM_Base_SetConfig+0xb8>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2280      	movs	r2, #128	; 0x80
 8004a64:	4393      	bics	r3, r2
 8004a66:	001a      	movs	r2, r3
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	689a      	ldr	r2, [r3, #8]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	615a      	str	r2, [r3, #20]
}
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b004      	add	sp, #16
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40000400 	.word	0x40000400
 8004a98:	40010800 	.word	0x40010800
 8004a9c:	40011400 	.word	0x40011400
 8004aa0:	fffffcff 	.word	0xfffffcff

08004aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	2201      	movs	r2, #1
 8004abc:	4393      	bics	r3, r2
 8004abe:	001a      	movs	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	22f0      	movs	r2, #240	; 0xf0
 8004ace:	4393      	bics	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	220a      	movs	r2, #10
 8004ae0:	4393      	bics	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	621a      	str	r2, [r3, #32]
}
 8004af8:	46c0      	nop			; (mov r8, r8)
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b006      	add	sp, #24
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	2210      	movs	r2, #16
 8004b12:	4393      	bics	r3, r2
 8004b14:	001a      	movs	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	4a0d      	ldr	r2, [pc, #52]	; (8004b60 <TIM_TI2_ConfigInputStage+0x60>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	031b      	lsls	r3, r3, #12
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	22a0      	movs	r2, #160	; 0xa0
 8004b3c:	4393      	bics	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b006      	add	sp, #24
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	ffff0fff 	.word	0xffff0fff

08004b64 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2270      	movs	r2, #112	; 0x70
 8004b78:	4393      	bics	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	2207      	movs	r2, #7
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	609a      	str	r2, [r3, #8]
}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	46bd      	mov	sp, r7
 8004b92:	b004      	add	sp, #16
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <TIM_ETR_SetConfig+0x3c>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	021a      	lsls	r2, r3, #8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	609a      	str	r2, [r3, #8]
}
 8004bcc:	46c0      	nop			; (mov r8, r8)
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b006      	add	sp, #24
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	ffff00ff 	.word	0xffff00ff

08004bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2238      	movs	r2, #56	; 0x38
 8004be6:	5c9b      	ldrb	r3, [r3, r2]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e047      	b.n	8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2238      	movs	r2, #56	; 0x38
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2239      	movs	r2, #57	; 0x39
 8004bfc:	2102      	movs	r1, #2
 8004bfe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2270      	movs	r2, #112	; 0x70
 8004c14:	4393      	bics	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	2380      	movs	r3, #128	; 0x80
 8004c30:	05db      	lsls	r3, r3, #23
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d00e      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a13      	ldr	r2, [pc, #76]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d009      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a11      	ldr	r2, [pc, #68]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d004      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a10      	ldr	r2, [pc, #64]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d10c      	bne.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2280      	movs	r2, #128	; 0x80
 8004c58:	4393      	bics	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2239      	movs	r2, #57	; 0x39
 8004c72:	2101      	movs	r1, #1
 8004c74:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2238      	movs	r2, #56	; 0x38
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	0018      	movs	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b004      	add	sp, #16
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40000400 	.word	0x40000400
 8004c8c:	40010800 	.word	0x40010800
 8004c90:	40011400 	.word	0x40011400

08004c94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e044      	b.n	8004d30 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d107      	bne.n	8004cbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2278      	movs	r2, #120	; 0x78
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f7fd fb43 	bl	8002344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2224      	movs	r2, #36	; 0x24
 8004cc2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2101      	movs	r1, #1
 8004cd0:	438a      	bics	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f000 f8d0 	bl	8004e7c <UART_SetConfig>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e024      	b.n	8004d30 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f000 fb61 	bl	80053b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	490d      	ldr	r1, [pc, #52]	; (8004d38 <HAL_UART_Init+0xa4>)
 8004d02:	400a      	ands	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	212a      	movs	r1, #42	; 0x2a
 8004d12:	438a      	bics	r2, r1
 8004d14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2101      	movs	r1, #1
 8004d22:	430a      	orrs	r2, r1
 8004d24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f000 fbf9 	bl	8005520 <UART_CheckIdleState>
 8004d2e:	0003      	movs	r3, r0
}
 8004d30:	0018      	movs	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b002      	add	sp, #8
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	ffffb7ff 	.word	0xffffb7ff

08004d3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08a      	sub	sp, #40	; 0x28
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	1dbb      	adds	r3, r7, #6
 8004d4a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d000      	beq.n	8004d56 <HAL_UART_Transmit+0x1a>
 8004d54:	e08c      	b.n	8004e70 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_UART_Transmit+0x28>
 8004d5c:	1dbb      	adds	r3, r7, #6
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e084      	b.n	8004e72 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	2380      	movs	r3, #128	; 0x80
 8004d6e:	015b      	lsls	r3, r3, #5
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d109      	bne.n	8004d88 <HAL_UART_Transmit+0x4c>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d105      	bne.n	8004d88 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	4013      	ands	r3, r2
 8004d82:	d001      	beq.n	8004d88 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e074      	b.n	8004e72 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2284      	movs	r2, #132	; 0x84
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2221      	movs	r2, #33	; 0x21
 8004d94:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d96:	f7fd fcbd 	bl	8002714 <HAL_GetTick>
 8004d9a:	0003      	movs	r3, r0
 8004d9c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1dba      	adds	r2, r7, #6
 8004da2:	2150      	movs	r1, #80	; 0x50
 8004da4:	8812      	ldrh	r2, [r2, #0]
 8004da6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1dba      	adds	r2, r7, #6
 8004dac:	2152      	movs	r1, #82	; 0x52
 8004dae:	8812      	ldrh	r2, [r2, #0]
 8004db0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	2380      	movs	r3, #128	; 0x80
 8004db8:	015b      	lsls	r3, r3, #5
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d108      	bne.n	8004dd0 <HAL_UART_Transmit+0x94>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d104      	bne.n	8004dd0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	e003      	b.n	8004dd8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dd8:	e02f      	b.n	8004e3a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	0013      	movs	r3, r2
 8004de4:	2200      	movs	r2, #0
 8004de6:	2180      	movs	r1, #128	; 0x80
 8004de8:	f000 fc42 	bl	8005670 <UART_WaitOnFlagUntilTimeout>
 8004dec:	1e03      	subs	r3, r0, #0
 8004dee:	d004      	beq.n	8004dfa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e03b      	b.n	8004e72 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10b      	bne.n	8004e18 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	001a      	movs	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	05d2      	lsls	r2, r2, #23
 8004e0c:	0dd2      	lsrs	r2, r2, #23
 8004e0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	3302      	adds	r3, #2
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	e007      	b.n	8004e28 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	781a      	ldrb	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	3301      	adds	r3, #1
 8004e26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2252      	movs	r2, #82	; 0x52
 8004e2c:	5a9b      	ldrh	r3, [r3, r2]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b299      	uxth	r1, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2252      	movs	r2, #82	; 0x52
 8004e38:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2252      	movs	r2, #82	; 0x52
 8004e3e:	5a9b      	ldrh	r3, [r3, r2]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1c9      	bne.n	8004dda <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	0013      	movs	r3, r2
 8004e50:	2200      	movs	r2, #0
 8004e52:	2140      	movs	r1, #64	; 0x40
 8004e54:	f000 fc0c 	bl	8005670 <UART_WaitOnFlagUntilTimeout>
 8004e58:	1e03      	subs	r3, r0, #0
 8004e5a:	d004      	beq.n	8004e66 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e005      	b.n	8004e72 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	e000      	b.n	8004e72 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004e70:	2302      	movs	r3, #2
  }
}
 8004e72:	0018      	movs	r0, r3
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b008      	add	sp, #32
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e7c:	b5b0      	push	{r4, r5, r7, lr}
 8004e7e:	b08e      	sub	sp, #56	; 0x38
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e84:	231a      	movs	r3, #26
 8004e86:	2218      	movs	r2, #24
 8004e88:	189b      	adds	r3, r3, r2
 8004e8a:	19db      	adds	r3, r3, r7
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4ac3      	ldr	r2, [pc, #780]	; (80051bc <UART_SetConfig+0x340>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	0019      	movs	r1, r3
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4abe      	ldr	r2, [pc, #760]	; (80051c0 <UART_SetConfig+0x344>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	0019      	movs	r1, r3
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4ab8      	ldr	r2, [pc, #736]	; (80051c4 <UART_SetConfig+0x348>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d004      	beq.n	8004ef0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eec:	4313      	orrs	r3, r2
 8004eee:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	4ab4      	ldr	r2, [pc, #720]	; (80051c8 <UART_SetConfig+0x34c>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	0019      	movs	r1, r3
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f02:	430a      	orrs	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4ab0      	ldr	r2, [pc, #704]	; (80051cc <UART_SetConfig+0x350>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d131      	bne.n	8004f74 <UART_SetConfig+0xf8>
 8004f10:	4baf      	ldr	r3, [pc, #700]	; (80051d0 <UART_SetConfig+0x354>)
 8004f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f14:	2203      	movs	r2, #3
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d01d      	beq.n	8004f58 <UART_SetConfig+0xdc>
 8004f1c:	d823      	bhi.n	8004f66 <UART_SetConfig+0xea>
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d00c      	beq.n	8004f3c <UART_SetConfig+0xc0>
 8004f22:	d820      	bhi.n	8004f66 <UART_SetConfig+0xea>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <UART_SetConfig+0xb2>
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d00e      	beq.n	8004f4a <UART_SetConfig+0xce>
 8004f2c:	e01b      	b.n	8004f66 <UART_SetConfig+0xea>
 8004f2e:	231b      	movs	r3, #27
 8004f30:	2218      	movs	r2, #24
 8004f32:	189b      	adds	r3, r3, r2
 8004f34:	19db      	adds	r3, r3, r7
 8004f36:	2201      	movs	r2, #1
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	e0b4      	b.n	80050a6 <UART_SetConfig+0x22a>
 8004f3c:	231b      	movs	r3, #27
 8004f3e:	2218      	movs	r2, #24
 8004f40:	189b      	adds	r3, r3, r2
 8004f42:	19db      	adds	r3, r3, r7
 8004f44:	2202      	movs	r2, #2
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	e0ad      	b.n	80050a6 <UART_SetConfig+0x22a>
 8004f4a:	231b      	movs	r3, #27
 8004f4c:	2218      	movs	r2, #24
 8004f4e:	189b      	adds	r3, r3, r2
 8004f50:	19db      	adds	r3, r3, r7
 8004f52:	2204      	movs	r2, #4
 8004f54:	701a      	strb	r2, [r3, #0]
 8004f56:	e0a6      	b.n	80050a6 <UART_SetConfig+0x22a>
 8004f58:	231b      	movs	r3, #27
 8004f5a:	2218      	movs	r2, #24
 8004f5c:	189b      	adds	r3, r3, r2
 8004f5e:	19db      	adds	r3, r3, r7
 8004f60:	2208      	movs	r2, #8
 8004f62:	701a      	strb	r2, [r3, #0]
 8004f64:	e09f      	b.n	80050a6 <UART_SetConfig+0x22a>
 8004f66:	231b      	movs	r3, #27
 8004f68:	2218      	movs	r2, #24
 8004f6a:	189b      	adds	r3, r3, r2
 8004f6c:	19db      	adds	r3, r3, r7
 8004f6e:	2210      	movs	r2, #16
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	e098      	b.n	80050a6 <UART_SetConfig+0x22a>
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a96      	ldr	r2, [pc, #600]	; (80051d4 <UART_SetConfig+0x358>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d131      	bne.n	8004fe2 <UART_SetConfig+0x166>
 8004f7e:	4b94      	ldr	r3, [pc, #592]	; (80051d0 <UART_SetConfig+0x354>)
 8004f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f82:	220c      	movs	r2, #12
 8004f84:	4013      	ands	r3, r2
 8004f86:	2b0c      	cmp	r3, #12
 8004f88:	d01d      	beq.n	8004fc6 <UART_SetConfig+0x14a>
 8004f8a:	d823      	bhi.n	8004fd4 <UART_SetConfig+0x158>
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d00c      	beq.n	8004faa <UART_SetConfig+0x12e>
 8004f90:	d820      	bhi.n	8004fd4 <UART_SetConfig+0x158>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <UART_SetConfig+0x120>
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d00e      	beq.n	8004fb8 <UART_SetConfig+0x13c>
 8004f9a:	e01b      	b.n	8004fd4 <UART_SetConfig+0x158>
 8004f9c:	231b      	movs	r3, #27
 8004f9e:	2218      	movs	r2, #24
 8004fa0:	189b      	adds	r3, r3, r2
 8004fa2:	19db      	adds	r3, r3, r7
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	e07d      	b.n	80050a6 <UART_SetConfig+0x22a>
 8004faa:	231b      	movs	r3, #27
 8004fac:	2218      	movs	r2, #24
 8004fae:	189b      	adds	r3, r3, r2
 8004fb0:	19db      	adds	r3, r3, r7
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	701a      	strb	r2, [r3, #0]
 8004fb6:	e076      	b.n	80050a6 <UART_SetConfig+0x22a>
 8004fb8:	231b      	movs	r3, #27
 8004fba:	2218      	movs	r2, #24
 8004fbc:	189b      	adds	r3, r3, r2
 8004fbe:	19db      	adds	r3, r3, r7
 8004fc0:	2204      	movs	r2, #4
 8004fc2:	701a      	strb	r2, [r3, #0]
 8004fc4:	e06f      	b.n	80050a6 <UART_SetConfig+0x22a>
 8004fc6:	231b      	movs	r3, #27
 8004fc8:	2218      	movs	r2, #24
 8004fca:	189b      	adds	r3, r3, r2
 8004fcc:	19db      	adds	r3, r3, r7
 8004fce:	2208      	movs	r2, #8
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	e068      	b.n	80050a6 <UART_SetConfig+0x22a>
 8004fd4:	231b      	movs	r3, #27
 8004fd6:	2218      	movs	r2, #24
 8004fd8:	189b      	adds	r3, r3, r2
 8004fda:	19db      	adds	r3, r3, r7
 8004fdc:	2210      	movs	r2, #16
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e061      	b.n	80050a6 <UART_SetConfig+0x22a>
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a7c      	ldr	r2, [pc, #496]	; (80051d8 <UART_SetConfig+0x35c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d106      	bne.n	8004ffa <UART_SetConfig+0x17e>
 8004fec:	231b      	movs	r3, #27
 8004fee:	2218      	movs	r2, #24
 8004ff0:	189b      	adds	r3, r3, r2
 8004ff2:	19db      	adds	r3, r3, r7
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	e055      	b.n	80050a6 <UART_SetConfig+0x22a>
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a77      	ldr	r2, [pc, #476]	; (80051dc <UART_SetConfig+0x360>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d106      	bne.n	8005012 <UART_SetConfig+0x196>
 8005004:	231b      	movs	r3, #27
 8005006:	2218      	movs	r2, #24
 8005008:	189b      	adds	r3, r3, r2
 800500a:	19db      	adds	r3, r3, r7
 800500c:	2200      	movs	r2, #0
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	e049      	b.n	80050a6 <UART_SetConfig+0x22a>
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a6b      	ldr	r2, [pc, #428]	; (80051c4 <UART_SetConfig+0x348>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d13e      	bne.n	800509a <UART_SetConfig+0x21e>
 800501c:	4b6c      	ldr	r3, [pc, #432]	; (80051d0 <UART_SetConfig+0x354>)
 800501e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005020:	23c0      	movs	r3, #192	; 0xc0
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	4013      	ands	r3, r2
 8005026:	22c0      	movs	r2, #192	; 0xc0
 8005028:	0112      	lsls	r2, r2, #4
 800502a:	4293      	cmp	r3, r2
 800502c:	d027      	beq.n	800507e <UART_SetConfig+0x202>
 800502e:	22c0      	movs	r2, #192	; 0xc0
 8005030:	0112      	lsls	r2, r2, #4
 8005032:	4293      	cmp	r3, r2
 8005034:	d82a      	bhi.n	800508c <UART_SetConfig+0x210>
 8005036:	2280      	movs	r2, #128	; 0x80
 8005038:	0112      	lsls	r2, r2, #4
 800503a:	4293      	cmp	r3, r2
 800503c:	d011      	beq.n	8005062 <UART_SetConfig+0x1e6>
 800503e:	2280      	movs	r2, #128	; 0x80
 8005040:	0112      	lsls	r2, r2, #4
 8005042:	4293      	cmp	r3, r2
 8005044:	d822      	bhi.n	800508c <UART_SetConfig+0x210>
 8005046:	2b00      	cmp	r3, #0
 8005048:	d004      	beq.n	8005054 <UART_SetConfig+0x1d8>
 800504a:	2280      	movs	r2, #128	; 0x80
 800504c:	00d2      	lsls	r2, r2, #3
 800504e:	4293      	cmp	r3, r2
 8005050:	d00e      	beq.n	8005070 <UART_SetConfig+0x1f4>
 8005052:	e01b      	b.n	800508c <UART_SetConfig+0x210>
 8005054:	231b      	movs	r3, #27
 8005056:	2218      	movs	r2, #24
 8005058:	189b      	adds	r3, r3, r2
 800505a:	19db      	adds	r3, r3, r7
 800505c:	2200      	movs	r2, #0
 800505e:	701a      	strb	r2, [r3, #0]
 8005060:	e021      	b.n	80050a6 <UART_SetConfig+0x22a>
 8005062:	231b      	movs	r3, #27
 8005064:	2218      	movs	r2, #24
 8005066:	189b      	adds	r3, r3, r2
 8005068:	19db      	adds	r3, r3, r7
 800506a:	2202      	movs	r2, #2
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	e01a      	b.n	80050a6 <UART_SetConfig+0x22a>
 8005070:	231b      	movs	r3, #27
 8005072:	2218      	movs	r2, #24
 8005074:	189b      	adds	r3, r3, r2
 8005076:	19db      	adds	r3, r3, r7
 8005078:	2204      	movs	r2, #4
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	e013      	b.n	80050a6 <UART_SetConfig+0x22a>
 800507e:	231b      	movs	r3, #27
 8005080:	2218      	movs	r2, #24
 8005082:	189b      	adds	r3, r3, r2
 8005084:	19db      	adds	r3, r3, r7
 8005086:	2208      	movs	r2, #8
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	e00c      	b.n	80050a6 <UART_SetConfig+0x22a>
 800508c:	231b      	movs	r3, #27
 800508e:	2218      	movs	r2, #24
 8005090:	189b      	adds	r3, r3, r2
 8005092:	19db      	adds	r3, r3, r7
 8005094:	2210      	movs	r2, #16
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	e005      	b.n	80050a6 <UART_SetConfig+0x22a>
 800509a:	231b      	movs	r3, #27
 800509c:	2218      	movs	r2, #24
 800509e:	189b      	adds	r3, r3, r2
 80050a0:	19db      	adds	r3, r3, r7
 80050a2:	2210      	movs	r2, #16
 80050a4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a46      	ldr	r2, [pc, #280]	; (80051c4 <UART_SetConfig+0x348>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d000      	beq.n	80050b2 <UART_SetConfig+0x236>
 80050b0:	e09a      	b.n	80051e8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050b2:	231b      	movs	r3, #27
 80050b4:	2218      	movs	r2, #24
 80050b6:	189b      	adds	r3, r3, r2
 80050b8:	19db      	adds	r3, r3, r7
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d01d      	beq.n	80050fc <UART_SetConfig+0x280>
 80050c0:	dc20      	bgt.n	8005104 <UART_SetConfig+0x288>
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d015      	beq.n	80050f2 <UART_SetConfig+0x276>
 80050c6:	dc1d      	bgt.n	8005104 <UART_SetConfig+0x288>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <UART_SetConfig+0x256>
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d005      	beq.n	80050dc <UART_SetConfig+0x260>
 80050d0:	e018      	b.n	8005104 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d2:	f7fe fbb9 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 80050d6:	0003      	movs	r3, r0
 80050d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050da:	e01c      	b.n	8005116 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050dc:	4b3c      	ldr	r3, [pc, #240]	; (80051d0 <UART_SetConfig+0x354>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2210      	movs	r2, #16
 80050e2:	4013      	ands	r3, r2
 80050e4:	d002      	beq.n	80050ec <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80050e6:	4b3e      	ldr	r3, [pc, #248]	; (80051e0 <UART_SetConfig+0x364>)
 80050e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050ea:	e014      	b.n	8005116 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80050ec:	4b3d      	ldr	r3, [pc, #244]	; (80051e4 <UART_SetConfig+0x368>)
 80050ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050f0:	e011      	b.n	8005116 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050f2:	f7fe faf9 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 80050f6:	0003      	movs	r3, r0
 80050f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050fa:	e00c      	b.n	8005116 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050fc:	2380      	movs	r3, #128	; 0x80
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005102:	e008      	b.n	8005116 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005108:	231a      	movs	r3, #26
 800510a:	2218      	movs	r2, #24
 800510c:	189b      	adds	r3, r3, r2
 800510e:	19db      	adds	r3, r3, r7
 8005110:	2201      	movs	r2, #1
 8005112:	701a      	strb	r2, [r3, #0]
        break;
 8005114:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d100      	bne.n	800511e <UART_SetConfig+0x2a2>
 800511c:	e133      	b.n	8005386 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	0013      	movs	r3, r2
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	189b      	adds	r3, r3, r2
 8005128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800512a:	429a      	cmp	r2, r3
 800512c:	d305      	bcc.n	800513a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005136:	429a      	cmp	r2, r3
 8005138:	d906      	bls.n	8005148 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800513a:	231a      	movs	r3, #26
 800513c:	2218      	movs	r2, #24
 800513e:	189b      	adds	r3, r3, r2
 8005140:	19db      	adds	r3, r3, r7
 8005142:	2201      	movs	r2, #1
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	e11e      	b.n	8005386 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	2300      	movs	r3, #0
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	6939      	ldr	r1, [r7, #16]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	000b      	movs	r3, r1
 8005156:	0e1b      	lsrs	r3, r3, #24
 8005158:	0010      	movs	r0, r2
 800515a:	0205      	lsls	r5, r0, #8
 800515c:	431d      	orrs	r5, r3
 800515e:	000b      	movs	r3, r1
 8005160:	021c      	lsls	r4, r3, #8
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	68b8      	ldr	r0, [r7, #8]
 8005170:	68f9      	ldr	r1, [r7, #12]
 8005172:	1900      	adds	r0, r0, r4
 8005174:	4169      	adcs	r1, r5
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	2300      	movs	r3, #0
 800517e:	607b      	str	r3, [r7, #4]
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f7fb f952 	bl	800042c <__aeabi_uldivmod>
 8005188:	0002      	movs	r2, r0
 800518a:	000b      	movs	r3, r1
 800518c:	0013      	movs	r3, r2
 800518e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005192:	23c0      	movs	r3, #192	; 0xc0
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	429a      	cmp	r2, r3
 8005198:	d309      	bcc.n	80051ae <UART_SetConfig+0x332>
 800519a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800519c:	2380      	movs	r3, #128	; 0x80
 800519e:	035b      	lsls	r3, r3, #13
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d204      	bcs.n	80051ae <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051aa:	60da      	str	r2, [r3, #12]
 80051ac:	e0eb      	b.n	8005386 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80051ae:	231a      	movs	r3, #26
 80051b0:	2218      	movs	r2, #24
 80051b2:	189b      	adds	r3, r3, r2
 80051b4:	19db      	adds	r3, r3, r7
 80051b6:	2201      	movs	r2, #1
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	e0e4      	b.n	8005386 <UART_SetConfig+0x50a>
 80051bc:	efff69f3 	.word	0xefff69f3
 80051c0:	ffffcfff 	.word	0xffffcfff
 80051c4:	40004800 	.word	0x40004800
 80051c8:	fffff4ff 	.word	0xfffff4ff
 80051cc:	40013800 	.word	0x40013800
 80051d0:	40021000 	.word	0x40021000
 80051d4:	40004400 	.word	0x40004400
 80051d8:	40004c00 	.word	0x40004c00
 80051dc:	40005000 	.word	0x40005000
 80051e0:	003d0900 	.word	0x003d0900
 80051e4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	69da      	ldr	r2, [r3, #28]
 80051ec:	2380      	movs	r3, #128	; 0x80
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d000      	beq.n	80051f6 <UART_SetConfig+0x37a>
 80051f4:	e070      	b.n	80052d8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80051f6:	231b      	movs	r3, #27
 80051f8:	2218      	movs	r2, #24
 80051fa:	189b      	adds	r3, r3, r2
 80051fc:	19db      	adds	r3, r3, r7
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b08      	cmp	r3, #8
 8005202:	d822      	bhi.n	800524a <UART_SetConfig+0x3ce>
 8005204:	009a      	lsls	r2, r3, #2
 8005206:	4b67      	ldr	r3, [pc, #412]	; (80053a4 <UART_SetConfig+0x528>)
 8005208:	18d3      	adds	r3, r2, r3
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800520e:	f7fe fb1b 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 8005212:	0003      	movs	r3, r0
 8005214:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005216:	e021      	b.n	800525c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005218:	f7fe fb2c 	bl	8003874 <HAL_RCC_GetPCLK2Freq>
 800521c:	0003      	movs	r3, r0
 800521e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005220:	e01c      	b.n	800525c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005222:	4b61      	ldr	r3, [pc, #388]	; (80053a8 <UART_SetConfig+0x52c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2210      	movs	r2, #16
 8005228:	4013      	ands	r3, r2
 800522a:	d002      	beq.n	8005232 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800522c:	4b5f      	ldr	r3, [pc, #380]	; (80053ac <UART_SetConfig+0x530>)
 800522e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005230:	e014      	b.n	800525c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005232:	4b5f      	ldr	r3, [pc, #380]	; (80053b0 <UART_SetConfig+0x534>)
 8005234:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005236:	e011      	b.n	800525c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005238:	f7fe fa56 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 800523c:	0003      	movs	r3, r0
 800523e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005240:	e00c      	b.n	800525c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005242:	2380      	movs	r3, #128	; 0x80
 8005244:	021b      	lsls	r3, r3, #8
 8005246:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005248:	e008      	b.n	800525c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800524e:	231a      	movs	r3, #26
 8005250:	2218      	movs	r2, #24
 8005252:	189b      	adds	r3, r3, r2
 8005254:	19db      	adds	r3, r3, r7
 8005256:	2201      	movs	r2, #1
 8005258:	701a      	strb	r2, [r3, #0]
        break;
 800525a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800525c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525e:	2b00      	cmp	r3, #0
 8005260:	d100      	bne.n	8005264 <UART_SetConfig+0x3e8>
 8005262:	e090      	b.n	8005386 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005266:	005a      	lsls	r2, r3, #1
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	085b      	lsrs	r3, r3, #1
 800526e:	18d2      	adds	r2, r2, r3
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	0019      	movs	r1, r3
 8005276:	0010      	movs	r0, r2
 8005278:	f7fa ff62 	bl	8000140 <__udivsi3>
 800527c:	0003      	movs	r3, r0
 800527e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	2b0f      	cmp	r3, #15
 8005284:	d921      	bls.n	80052ca <UART_SetConfig+0x44e>
 8005286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005288:	2380      	movs	r3, #128	; 0x80
 800528a:	025b      	lsls	r3, r3, #9
 800528c:	429a      	cmp	r2, r3
 800528e:	d21c      	bcs.n	80052ca <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005292:	b29a      	uxth	r2, r3
 8005294:	200e      	movs	r0, #14
 8005296:	2418      	movs	r4, #24
 8005298:	1903      	adds	r3, r0, r4
 800529a:	19db      	adds	r3, r3, r7
 800529c:	210f      	movs	r1, #15
 800529e:	438a      	bics	r2, r1
 80052a0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a4:	085b      	lsrs	r3, r3, #1
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2207      	movs	r2, #7
 80052aa:	4013      	ands	r3, r2
 80052ac:	b299      	uxth	r1, r3
 80052ae:	1903      	adds	r3, r0, r4
 80052b0:	19db      	adds	r3, r3, r7
 80052b2:	1902      	adds	r2, r0, r4
 80052b4:	19d2      	adds	r2, r2, r7
 80052b6:	8812      	ldrh	r2, [r2, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	1902      	adds	r2, r0, r4
 80052c2:	19d2      	adds	r2, r2, r7
 80052c4:	8812      	ldrh	r2, [r2, #0]
 80052c6:	60da      	str	r2, [r3, #12]
 80052c8:	e05d      	b.n	8005386 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80052ca:	231a      	movs	r3, #26
 80052cc:	2218      	movs	r2, #24
 80052ce:	189b      	adds	r3, r3, r2
 80052d0:	19db      	adds	r3, r3, r7
 80052d2:	2201      	movs	r2, #1
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	e056      	b.n	8005386 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052d8:	231b      	movs	r3, #27
 80052da:	2218      	movs	r2, #24
 80052dc:	189b      	adds	r3, r3, r2
 80052de:	19db      	adds	r3, r3, r7
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b08      	cmp	r3, #8
 80052e4:	d822      	bhi.n	800532c <UART_SetConfig+0x4b0>
 80052e6:	009a      	lsls	r2, r3, #2
 80052e8:	4b32      	ldr	r3, [pc, #200]	; (80053b4 <UART_SetConfig+0x538>)
 80052ea:	18d3      	adds	r3, r2, r3
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f0:	f7fe faaa 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 80052f4:	0003      	movs	r3, r0
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052f8:	e021      	b.n	800533e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052fa:	f7fe fabb 	bl	8003874 <HAL_RCC_GetPCLK2Freq>
 80052fe:	0003      	movs	r3, r0
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005302:	e01c      	b.n	800533e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005304:	4b28      	ldr	r3, [pc, #160]	; (80053a8 <UART_SetConfig+0x52c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2210      	movs	r2, #16
 800530a:	4013      	ands	r3, r2
 800530c:	d002      	beq.n	8005314 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800530e:	4b27      	ldr	r3, [pc, #156]	; (80053ac <UART_SetConfig+0x530>)
 8005310:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005312:	e014      	b.n	800533e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005314:	4b26      	ldr	r3, [pc, #152]	; (80053b0 <UART_SetConfig+0x534>)
 8005316:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005318:	e011      	b.n	800533e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800531a:	f7fe f9e5 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 800531e:	0003      	movs	r3, r0
 8005320:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005322:	e00c      	b.n	800533e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005324:	2380      	movs	r3, #128	; 0x80
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800532a:	e008      	b.n	800533e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005330:	231a      	movs	r3, #26
 8005332:	2218      	movs	r2, #24
 8005334:	189b      	adds	r3, r3, r2
 8005336:	19db      	adds	r3, r3, r7
 8005338:	2201      	movs	r2, #1
 800533a:	701a      	strb	r2, [r3, #0]
        break;
 800533c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d020      	beq.n	8005386 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	085a      	lsrs	r2, r3, #1
 800534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534c:	18d2      	adds	r2, r2, r3
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	0019      	movs	r1, r3
 8005354:	0010      	movs	r0, r2
 8005356:	f7fa fef3 	bl	8000140 <__udivsi3>
 800535a:	0003      	movs	r3, r0
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	2b0f      	cmp	r3, #15
 8005362:	d90a      	bls.n	800537a <UART_SetConfig+0x4fe>
 8005364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005366:	2380      	movs	r3, #128	; 0x80
 8005368:	025b      	lsls	r3, r3, #9
 800536a:	429a      	cmp	r2, r3
 800536c:	d205      	bcs.n	800537a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	b29a      	uxth	r2, r3
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	60da      	str	r2, [r3, #12]
 8005378:	e005      	b.n	8005386 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800537a:	231a      	movs	r3, #26
 800537c:	2218      	movs	r2, #24
 800537e:	189b      	adds	r3, r3, r2
 8005380:	19db      	adds	r3, r3, r7
 8005382:	2201      	movs	r2, #1
 8005384:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	2200      	movs	r2, #0
 800538a:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	2200      	movs	r2, #0
 8005390:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005392:	231a      	movs	r3, #26
 8005394:	2218      	movs	r2, #24
 8005396:	189b      	adds	r3, r3, r2
 8005398:	19db      	adds	r3, r3, r7
 800539a:	781b      	ldrb	r3, [r3, #0]
}
 800539c:	0018      	movs	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	b00e      	add	sp, #56	; 0x38
 80053a2:	bdb0      	pop	{r4, r5, r7, pc}
 80053a4:	08007040 	.word	0x08007040
 80053a8:	40021000 	.word	0x40021000
 80053ac:	003d0900 	.word	0x003d0900
 80053b0:	00f42400 	.word	0x00f42400
 80053b4:	08007064 	.word	0x08007064

080053b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	2201      	movs	r2, #1
 80053c6:	4013      	ands	r3, r2
 80053c8:	d00b      	beq.n	80053e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	4a4a      	ldr	r2, [pc, #296]	; (80054fc <UART_AdvFeatureConfig+0x144>)
 80053d2:	4013      	ands	r3, r2
 80053d4:	0019      	movs	r1, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	2202      	movs	r2, #2
 80053e8:	4013      	ands	r3, r2
 80053ea:	d00b      	beq.n	8005404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	4a43      	ldr	r2, [pc, #268]	; (8005500 <UART_AdvFeatureConfig+0x148>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	0019      	movs	r1, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	2204      	movs	r2, #4
 800540a:	4013      	ands	r3, r2
 800540c:	d00b      	beq.n	8005426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	4a3b      	ldr	r2, [pc, #236]	; (8005504 <UART_AdvFeatureConfig+0x14c>)
 8005416:	4013      	ands	r3, r2
 8005418:	0019      	movs	r1, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	2208      	movs	r2, #8
 800542c:	4013      	ands	r3, r2
 800542e:	d00b      	beq.n	8005448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4a34      	ldr	r2, [pc, #208]	; (8005508 <UART_AdvFeatureConfig+0x150>)
 8005438:	4013      	ands	r3, r2
 800543a:	0019      	movs	r1, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	2210      	movs	r2, #16
 800544e:	4013      	ands	r3, r2
 8005450:	d00b      	beq.n	800546a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	4a2c      	ldr	r2, [pc, #176]	; (800550c <UART_AdvFeatureConfig+0x154>)
 800545a:	4013      	ands	r3, r2
 800545c:	0019      	movs	r1, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2220      	movs	r2, #32
 8005470:	4013      	ands	r3, r2
 8005472:	d00b      	beq.n	800548c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	4a25      	ldr	r2, [pc, #148]	; (8005510 <UART_AdvFeatureConfig+0x158>)
 800547c:	4013      	ands	r3, r2
 800547e:	0019      	movs	r1, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2240      	movs	r2, #64	; 0x40
 8005492:	4013      	ands	r3, r2
 8005494:	d01d      	beq.n	80054d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	4a1d      	ldr	r2, [pc, #116]	; (8005514 <UART_AdvFeatureConfig+0x15c>)
 800549e:	4013      	ands	r3, r2
 80054a0:	0019      	movs	r1, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054b2:	2380      	movs	r3, #128	; 0x80
 80054b4:	035b      	lsls	r3, r3, #13
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d10b      	bne.n	80054d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4a15      	ldr	r2, [pc, #84]	; (8005518 <UART_AdvFeatureConfig+0x160>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	0019      	movs	r1, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	2280      	movs	r2, #128	; 0x80
 80054d8:	4013      	ands	r3, r2
 80054da:	d00b      	beq.n	80054f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	4a0e      	ldr	r2, [pc, #56]	; (800551c <UART_AdvFeatureConfig+0x164>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	0019      	movs	r1, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	605a      	str	r2, [r3, #4]
  }
}
 80054f4:	46c0      	nop			; (mov r8, r8)
 80054f6:	46bd      	mov	sp, r7
 80054f8:	b002      	add	sp, #8
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	fffdffff 	.word	0xfffdffff
 8005500:	fffeffff 	.word	0xfffeffff
 8005504:	fffbffff 	.word	0xfffbffff
 8005508:	ffff7fff 	.word	0xffff7fff
 800550c:	ffffefff 	.word	0xffffefff
 8005510:	ffffdfff 	.word	0xffffdfff
 8005514:	ffefffff 	.word	0xffefffff
 8005518:	ff9fffff 	.word	0xff9fffff
 800551c:	fff7ffff 	.word	0xfff7ffff

08005520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b092      	sub	sp, #72	; 0x48
 8005524:	af02      	add	r7, sp, #8
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2284      	movs	r2, #132	; 0x84
 800552c:	2100      	movs	r1, #0
 800552e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005530:	f7fd f8f0 	bl	8002714 <HAL_GetTick>
 8005534:	0003      	movs	r3, r0
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2208      	movs	r2, #8
 8005540:	4013      	ands	r3, r2
 8005542:	2b08      	cmp	r3, #8
 8005544:	d12c      	bne.n	80055a0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005548:	2280      	movs	r2, #128	; 0x80
 800554a:	0391      	lsls	r1, r2, #14
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	4a46      	ldr	r2, [pc, #280]	; (8005668 <UART_CheckIdleState+0x148>)
 8005550:	9200      	str	r2, [sp, #0]
 8005552:	2200      	movs	r2, #0
 8005554:	f000 f88c 	bl	8005670 <UART_WaitOnFlagUntilTimeout>
 8005558:	1e03      	subs	r3, r0, #0
 800555a:	d021      	beq.n	80055a0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800555c:	f3ef 8310 	mrs	r3, PRIMASK
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005564:	63bb      	str	r3, [r7, #56]	; 0x38
 8005566:	2301      	movs	r3, #1
 8005568:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	f383 8810 	msr	PRIMASK, r3
}
 8005570:	46c0      	nop			; (mov r8, r8)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2180      	movs	r1, #128	; 0x80
 800557e:	438a      	bics	r2, r1
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005584:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005588:	f383 8810 	msr	PRIMASK, r3
}
 800558c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2278      	movs	r2, #120	; 0x78
 8005598:	2100      	movs	r1, #0
 800559a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e05f      	b.n	8005660 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2204      	movs	r2, #4
 80055a8:	4013      	ands	r3, r2
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d146      	bne.n	800563c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b0:	2280      	movs	r2, #128	; 0x80
 80055b2:	03d1      	lsls	r1, r2, #15
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	4a2c      	ldr	r2, [pc, #176]	; (8005668 <UART_CheckIdleState+0x148>)
 80055b8:	9200      	str	r2, [sp, #0]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f000 f858 	bl	8005670 <UART_WaitOnFlagUntilTimeout>
 80055c0:	1e03      	subs	r3, r0, #0
 80055c2:	d03b      	beq.n	800563c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055c4:	f3ef 8310 	mrs	r3, PRIMASK
 80055c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80055ca:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055cc:	637b      	str	r3, [r7, #52]	; 0x34
 80055ce:	2301      	movs	r3, #1
 80055d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f383 8810 	msr	PRIMASK, r3
}
 80055d8:	46c0      	nop			; (mov r8, r8)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4921      	ldr	r1, [pc, #132]	; (800566c <UART_CheckIdleState+0x14c>)
 80055e6:	400a      	ands	r2, r1
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f383 8810 	msr	PRIMASK, r3
}
 80055f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055f6:	f3ef 8310 	mrs	r3, PRIMASK
 80055fa:	61bb      	str	r3, [r7, #24]
  return(result);
 80055fc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005600:	2301      	movs	r3, #1
 8005602:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f383 8810 	msr	PRIMASK, r3
}
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2101      	movs	r1, #1
 8005618:	438a      	bics	r2, r1
 800561a:	609a      	str	r2, [r3, #8]
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	f383 8810 	msr	PRIMASK, r3
}
 8005626:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2280      	movs	r2, #128	; 0x80
 800562c:	2120      	movs	r1, #32
 800562e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2278      	movs	r2, #120	; 0x78
 8005634:	2100      	movs	r1, #0
 8005636:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e011      	b.n	8005660 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2220      	movs	r2, #32
 8005640:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2280      	movs	r2, #128	; 0x80
 8005646:	2120      	movs	r1, #32
 8005648:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2278      	movs	r2, #120	; 0x78
 800565a:	2100      	movs	r1, #0
 800565c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	0018      	movs	r0, r3
 8005662:	46bd      	mov	sp, r7
 8005664:	b010      	add	sp, #64	; 0x40
 8005666:	bd80      	pop	{r7, pc}
 8005668:	01ffffff 	.word	0x01ffffff
 800566c:	fffffedf 	.word	0xfffffedf

08005670 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	1dfb      	adds	r3, r7, #7
 800567e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005680:	e04b      	b.n	800571a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	3301      	adds	r3, #1
 8005686:	d048      	beq.n	800571a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005688:	f7fd f844 	bl	8002714 <HAL_GetTick>
 800568c:	0002      	movs	r2, r0
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	429a      	cmp	r2, r3
 8005696:	d302      	bcc.n	800569e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e04b      	b.n	800573a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2204      	movs	r2, #4
 80056aa:	4013      	ands	r3, r2
 80056ac:	d035      	beq.n	800571a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	2208      	movs	r2, #8
 80056b6:	4013      	ands	r3, r2
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d111      	bne.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2208      	movs	r2, #8
 80056c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	0018      	movs	r0, r3
 80056c8:	f000 f83c 	bl	8005744 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2284      	movs	r2, #132	; 0x84
 80056d0:	2108      	movs	r1, #8
 80056d2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2278      	movs	r2, #120	; 0x78
 80056d8:	2100      	movs	r1, #0
 80056da:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e02c      	b.n	800573a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69da      	ldr	r2, [r3, #28]
 80056e6:	2380      	movs	r3, #128	; 0x80
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	401a      	ands	r2, r3
 80056ec:	2380      	movs	r3, #128	; 0x80
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d112      	bne.n	800571a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2280      	movs	r2, #128	; 0x80
 80056fa:	0112      	lsls	r2, r2, #4
 80056fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	0018      	movs	r0, r3
 8005702:	f000 f81f 	bl	8005744 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2284      	movs	r2, #132	; 0x84
 800570a:	2120      	movs	r1, #32
 800570c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2278      	movs	r2, #120	; 0x78
 8005712:	2100      	movs	r1, #0
 8005714:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e00f      	b.n	800573a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	4013      	ands	r3, r2
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	425a      	negs	r2, r3
 800572a:	4153      	adcs	r3, r2
 800572c:	b2db      	uxtb	r3, r3
 800572e:	001a      	movs	r2, r3
 8005730:	1dfb      	adds	r3, r7, #7
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d0a4      	beq.n	8005682 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	0018      	movs	r0, r3
 800573c:	46bd      	mov	sp, r7
 800573e:	b004      	add	sp, #16
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b08e      	sub	sp, #56	; 0x38
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800574c:	f3ef 8310 	mrs	r3, PRIMASK
 8005750:	617b      	str	r3, [r7, #20]
  return(result);
 8005752:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005754:	637b      	str	r3, [r7, #52]	; 0x34
 8005756:	2301      	movs	r3, #1
 8005758:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	f383 8810 	msr	PRIMASK, r3
}
 8005760:	46c0      	nop			; (mov r8, r8)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4926      	ldr	r1, [pc, #152]	; (8005808 <UART_EndRxTransfer+0xc4>)
 800576e:	400a      	ands	r2, r1
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005774:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	f383 8810 	msr	PRIMASK, r3
}
 800577c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800577e:	f3ef 8310 	mrs	r3, PRIMASK
 8005782:	623b      	str	r3, [r7, #32]
  return(result);
 8005784:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005786:	633b      	str	r3, [r7, #48]	; 0x30
 8005788:	2301      	movs	r3, #1
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	f383 8810 	msr	PRIMASK, r3
}
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2101      	movs	r1, #1
 80057a0:	438a      	bics	r2, r1
 80057a2:	609a      	str	r2, [r3, #8]
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	f383 8810 	msr	PRIMASK, r3
}
 80057ae:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d118      	bne.n	80057ea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057b8:	f3ef 8310 	mrs	r3, PRIMASK
 80057bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80057be:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057c2:	2301      	movs	r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f383 8810 	msr	PRIMASK, r3
}
 80057cc:	46c0      	nop			; (mov r8, r8)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2110      	movs	r1, #16
 80057da:	438a      	bics	r2, r1
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f383 8810 	msr	PRIMASK, r3
}
 80057e8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2280      	movs	r2, #128	; 0x80
 80057ee:	2120      	movs	r1, #32
 80057f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80057fe:	46c0      	nop			; (mov r8, r8)
 8005800:	46bd      	mov	sp, r7
 8005802:	b00e      	add	sp, #56	; 0x38
 8005804:	bd80      	pop	{r7, pc}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	fffffedf 	.word	0xfffffedf

0800580c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005810:	4a06      	ldr	r2, [pc, #24]	; (800582c <MX_FATFS_Init+0x20>)
 8005812:	4b07      	ldr	r3, [pc, #28]	; (8005830 <MX_FATFS_Init+0x24>)
 8005814:	0011      	movs	r1, r2
 8005816:	0018      	movs	r0, r3
 8005818:	f000 f8ca 	bl	80059b0 <FATFS_LinkDriver>
 800581c:	0003      	movs	r3, r0
 800581e:	001a      	movs	r2, r3
 8005820:	4b04      	ldr	r3, [pc, #16]	; (8005834 <MX_FATFS_Init+0x28>)
 8005822:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005824:	46c0      	nop			; (mov r8, r8)
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	20000324 	.word	0x20000324
 8005830:	200000b4 	.word	0x200000b4
 8005834:	20000320 	.word	0x20000320

08005838 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	0002      	movs	r2, r0
 8005840:	1dfb      	adds	r3, r7, #7
 8005842:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
    return SD_disk_initialize(pdrv);
 8005844:	1dfb      	adds	r3, r7, #7
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	0018      	movs	r0, r3
 800584a:	f7fb f925 	bl	8000a98 <SD_disk_initialize>
 800584e:	0003      	movs	r3, r0
 8005850:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005852:	0018      	movs	r0, r3
 8005854:	46bd      	mov	sp, r7
 8005856:	b002      	add	sp, #8
 8005858:	bd80      	pop	{r7, pc}

0800585a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b082      	sub	sp, #8
 800585e:	af00      	add	r7, sp, #0
 8005860:	0002      	movs	r2, r0
 8005862:	1dfb      	adds	r3, r7, #7
 8005864:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8005866:	1dfb      	adds	r3, r7, #7
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	0018      	movs	r0, r3
 800586c:	f7fb fa1e 	bl	8000cac <SD_disk_status>
 8005870:	0003      	movs	r3, r0
 8005872:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005874:	0018      	movs	r0, r3
 8005876:	46bd      	mov	sp, r7
 8005878:	b002      	add	sp, #8
 800587a:	bd80      	pop	{r7, pc}

0800587c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	210f      	movs	r1, #15
 800588a:	187b      	adds	r3, r7, r1
 800588c:	1c02      	adds	r2, r0, #0
 800588e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8005890:	187b      	adds	r3, r7, r1
 8005892:	7818      	ldrb	r0, [r3, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	f7fb fa1d 	bl	8000cd8 <SD_disk_read>
 800589e:	0003      	movs	r3, r0
 80058a0:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80058a2:	0018      	movs	r0, r3
 80058a4:	46bd      	mov	sp, r7
 80058a6:	b004      	add	sp, #16
 80058a8:	bd80      	pop	{r7, pc}

080058aa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b084      	sub	sp, #16
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
 80058b6:	210f      	movs	r1, #15
 80058b8:	187b      	adds	r3, r7, r1
 80058ba:	1c02      	adds	r2, r0, #0
 80058bc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
    return SD_disk_write(pdrv, buff, sector, count);
 80058be:	187b      	adds	r3, r7, r1
 80058c0:	7818      	ldrb	r0, [r3, #0]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	f7fb fa76 	bl	8000db8 <SD_disk_write>
 80058cc:	0003      	movs	r3, r0
 80058ce:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80058d0:	0018      	movs	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	b004      	add	sp, #16
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	603a      	str	r2, [r7, #0]
 80058e0:	1dfb      	adds	r3, r7, #7
 80058e2:	1c02      	adds	r2, r0, #0
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	1dbb      	adds	r3, r7, #6
 80058e8:	1c0a      	adds	r2, r1, #0
 80058ea:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 80058ec:	1dfb      	adds	r3, r7, #7
 80058ee:	7818      	ldrb	r0, [r3, #0]
 80058f0:	1dbb      	adds	r3, r7, #6
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	0019      	movs	r1, r3
 80058f8:	f7fb fae6 	bl	8000ec8 <SD_disk_ioctl>
 80058fc:	0003      	movs	r3, r0
 80058fe:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8005900:	0018      	movs	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	b002      	add	sp, #8
 8005906:	bd80      	pop	{r7, pc}

08005908 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005908:	b590      	push	{r4, r7, lr}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	1dfb      	adds	r3, r7, #7
 8005914:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8005916:	2417      	movs	r4, #23
 8005918:	193b      	adds	r3, r7, r4
 800591a:	2201      	movs	r2, #1
 800591c:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800591e:	2016      	movs	r0, #22
 8005920:	183b      	adds	r3, r7, r0
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8005926:	4b21      	ldr	r3, [pc, #132]	; (80059ac <FATFS_LinkDriverEx+0xa4>)
 8005928:	7a5b      	ldrb	r3, [r3, #9]
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d136      	bne.n	800599e <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005930:	4b1e      	ldr	r3, [pc, #120]	; (80059ac <FATFS_LinkDriverEx+0xa4>)
 8005932:	7a5b      	ldrb	r3, [r3, #9]
 8005934:	b2db      	uxtb	r3, r3
 8005936:	001a      	movs	r2, r3
 8005938:	4b1c      	ldr	r3, [pc, #112]	; (80059ac <FATFS_LinkDriverEx+0xa4>)
 800593a:	2100      	movs	r1, #0
 800593c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800593e:	4b1b      	ldr	r3, [pc, #108]	; (80059ac <FATFS_LinkDriverEx+0xa4>)
 8005940:	7a5b      	ldrb	r3, [r3, #9]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	4a19      	ldr	r2, [pc, #100]	; (80059ac <FATFS_LinkDriverEx+0xa4>)
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	18d3      	adds	r3, r2, r3
 800594a:	3304      	adds	r3, #4
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 8005950:	4b16      	ldr	r3, [pc, #88]	; (80059ac <FATFS_LinkDriverEx+0xa4>)
 8005952:	7a5b      	ldrb	r3, [r3, #9]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	001a      	movs	r2, r3
 8005958:	4b14      	ldr	r3, [pc, #80]	; (80059ac <FATFS_LinkDriverEx+0xa4>)
 800595a:	189b      	adds	r3, r3, r2
 800595c:	1dfa      	adds	r2, r7, #7
 800595e:	7812      	ldrb	r2, [r2, #0]
 8005960:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005962:	4b12      	ldr	r3, [pc, #72]	; (80059ac <FATFS_LinkDriverEx+0xa4>)
 8005964:	7a5b      	ldrb	r3, [r3, #9]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	b2d1      	uxtb	r1, r2
 800596c:	4a0f      	ldr	r2, [pc, #60]	; (80059ac <FATFS_LinkDriverEx+0xa4>)
 800596e:	7251      	strb	r1, [r2, #9]
 8005970:	183a      	adds	r2, r7, r0
 8005972:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8005974:	183b      	adds	r3, r7, r0
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	3330      	adds	r3, #48	; 0x30
 800597a:	b2da      	uxtb	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	3301      	adds	r3, #1
 8005984:	223a      	movs	r2, #58	; 0x3a
 8005986:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	3302      	adds	r3, #2
 800598c:	222f      	movs	r2, #47	; 0x2f
 800598e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	3303      	adds	r3, #3
 8005994:	2200      	movs	r2, #0
 8005996:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005998:	193b      	adds	r3, r7, r4
 800599a:	2200      	movs	r2, #0
 800599c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800599e:	2317      	movs	r3, #23
 80059a0:	18fb      	adds	r3, r7, r3
 80059a2:	781b      	ldrb	r3, [r3, #0]
}
 80059a4:	0018      	movs	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	b007      	add	sp, #28
 80059aa:	bd90      	pop	{r4, r7, pc}
 80059ac:	20000328 	.word	0x20000328

080059b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	0018      	movs	r0, r3
 80059c2:	f7ff ffa1 	bl	8005908 <FATFS_LinkDriverEx>
 80059c6:	0003      	movs	r3, r0
}
 80059c8:	0018      	movs	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	b002      	add	sp, #8
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <findslot>:
 80059d0:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <findslot+0x2c>)
 80059d2:	b510      	push	{r4, lr}
 80059d4:	0004      	movs	r4, r0
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	2800      	cmp	r0, #0
 80059da:	d004      	beq.n	80059e6 <findslot+0x16>
 80059dc:	6983      	ldr	r3, [r0, #24]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <findslot+0x16>
 80059e2:	f000 fac9 	bl	8005f78 <__sinit>
 80059e6:	2000      	movs	r0, #0
 80059e8:	2c13      	cmp	r4, #19
 80059ea:	d805      	bhi.n	80059f8 <findslot+0x28>
 80059ec:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <findslot+0x30>)
 80059ee:	00e4      	lsls	r4, r4, #3
 80059f0:	58e2      	ldr	r2, [r4, r3]
 80059f2:	3201      	adds	r2, #1
 80059f4:	d000      	beq.n	80059f8 <findslot+0x28>
 80059f6:	18e0      	adds	r0, r4, r3
 80059f8:	bd10      	pop	{r4, pc}
 80059fa:	46c0      	nop			; (mov r8, r8)
 80059fc:	200000d0 	.word	0x200000d0
 8005a00:	20000340 	.word	0x20000340

08005a04 <error>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	0004      	movs	r4, r0
 8005a08:	f000 fa4e 	bl	8005ea8 <__errno>
 8005a0c:	2613      	movs	r6, #19
 8005a0e:	0005      	movs	r5, r0
 8005a10:	2700      	movs	r7, #0
 8005a12:	1c30      	adds	r0, r6, #0
 8005a14:	1c39      	adds	r1, r7, #0
 8005a16:	beab      	bkpt	0x00ab
 8005a18:	1c06      	adds	r6, r0, #0
 8005a1a:	602e      	str	r6, [r5, #0]
 8005a1c:	0020      	movs	r0, r4
 8005a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a20 <checkerror>:
 8005a20:	b510      	push	{r4, lr}
 8005a22:	1c43      	adds	r3, r0, #1
 8005a24:	d101      	bne.n	8005a2a <checkerror+0xa>
 8005a26:	f7ff ffed 	bl	8005a04 <error>
 8005a2a:	bd10      	pop	{r4, pc}

08005a2c <_swiread>:
 8005a2c:	b530      	push	{r4, r5, lr}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	ad01      	add	r5, sp, #4
 8005a32:	9001      	str	r0, [sp, #4]
 8005a34:	9102      	str	r1, [sp, #8]
 8005a36:	9203      	str	r2, [sp, #12]
 8005a38:	2406      	movs	r4, #6
 8005a3a:	1c20      	adds	r0, r4, #0
 8005a3c:	1c29      	adds	r1, r5, #0
 8005a3e:	beab      	bkpt	0x00ab
 8005a40:	1c04      	adds	r4, r0, #0
 8005a42:	0020      	movs	r0, r4
 8005a44:	f7ff ffec 	bl	8005a20 <checkerror>
 8005a48:	b005      	add	sp, #20
 8005a4a:	bd30      	pop	{r4, r5, pc}

08005a4c <_read>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	000e      	movs	r6, r1
 8005a50:	0015      	movs	r5, r2
 8005a52:	f7ff ffbd 	bl	80059d0 <findslot>
 8005a56:	1e04      	subs	r4, r0, #0
 8005a58:	d106      	bne.n	8005a68 <_read+0x1c>
 8005a5a:	f000 fa25 	bl	8005ea8 <__errno>
 8005a5e:	2309      	movs	r3, #9
 8005a60:	6003      	str	r3, [r0, #0]
 8005a62:	2001      	movs	r0, #1
 8005a64:	4240      	negs	r0, r0
 8005a66:	bd70      	pop	{r4, r5, r6, pc}
 8005a68:	002a      	movs	r2, r5
 8005a6a:	0031      	movs	r1, r6
 8005a6c:	6800      	ldr	r0, [r0, #0]
 8005a6e:	f7ff ffdd 	bl	8005a2c <_swiread>
 8005a72:	1c43      	adds	r3, r0, #1
 8005a74:	d0f7      	beq.n	8005a66 <_read+0x1a>
 8005a76:	6863      	ldr	r3, [r4, #4]
 8005a78:	1a28      	subs	r0, r5, r0
 8005a7a:	181b      	adds	r3, r3, r0
 8005a7c:	6063      	str	r3, [r4, #4]
 8005a7e:	e7f2      	b.n	8005a66 <_read+0x1a>

08005a80 <_swilseek>:
 8005a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a82:	000c      	movs	r4, r1
 8005a84:	0016      	movs	r6, r2
 8005a86:	f7ff ffa3 	bl	80059d0 <findslot>
 8005a8a:	1e05      	subs	r5, r0, #0
 8005a8c:	d107      	bne.n	8005a9e <_swilseek+0x1e>
 8005a8e:	f000 fa0b 	bl	8005ea8 <__errno>
 8005a92:	2309      	movs	r3, #9
 8005a94:	6003      	str	r3, [r0, #0]
 8005a96:	2401      	movs	r4, #1
 8005a98:	4264      	negs	r4, r4
 8005a9a:	0020      	movs	r0, r4
 8005a9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a9e:	2e02      	cmp	r6, #2
 8005aa0:	d903      	bls.n	8005aaa <_swilseek+0x2a>
 8005aa2:	f000 fa01 	bl	8005ea8 <__errno>
 8005aa6:	2316      	movs	r3, #22
 8005aa8:	e7f4      	b.n	8005a94 <_swilseek+0x14>
 8005aaa:	2e01      	cmp	r6, #1
 8005aac:	d112      	bne.n	8005ad4 <_swilseek+0x54>
 8005aae:	6843      	ldr	r3, [r0, #4]
 8005ab0:	18e4      	adds	r4, r4, r3
 8005ab2:	d4f6      	bmi.n	8005aa2 <_swilseek+0x22>
 8005ab4:	466f      	mov	r7, sp
 8005ab6:	682b      	ldr	r3, [r5, #0]
 8005ab8:	260a      	movs	r6, #10
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	607c      	str	r4, [r7, #4]
 8005abe:	1c30      	adds	r0, r6, #0
 8005ac0:	1c39      	adds	r1, r7, #0
 8005ac2:	beab      	bkpt	0x00ab
 8005ac4:	1c06      	adds	r6, r0, #0
 8005ac6:	0030      	movs	r0, r6
 8005ac8:	f7ff ffaa 	bl	8005a20 <checkerror>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	dbe2      	blt.n	8005a96 <_swilseek+0x16>
 8005ad0:	606c      	str	r4, [r5, #4]
 8005ad2:	e7e2      	b.n	8005a9a <_swilseek+0x1a>
 8005ad4:	2e02      	cmp	r6, #2
 8005ad6:	d1ed      	bne.n	8005ab4 <_swilseek+0x34>
 8005ad8:	6803      	ldr	r3, [r0, #0]
 8005ada:	466f      	mov	r7, sp
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	360a      	adds	r6, #10
 8005ae0:	1c30      	adds	r0, r6, #0
 8005ae2:	1c39      	adds	r1, r7, #0
 8005ae4:	beab      	bkpt	0x00ab
 8005ae6:	1c06      	adds	r6, r0, #0
 8005ae8:	0030      	movs	r0, r6
 8005aea:	f7ff ff99 	bl	8005a20 <checkerror>
 8005aee:	1824      	adds	r4, r4, r0
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d1df      	bne.n	8005ab4 <_swilseek+0x34>
 8005af4:	e7cf      	b.n	8005a96 <_swilseek+0x16>

08005af6 <_lseek>:
 8005af6:	b510      	push	{r4, lr}
 8005af8:	f7ff ffc2 	bl	8005a80 <_swilseek>
 8005afc:	bd10      	pop	{r4, pc}

08005afe <_swiwrite>:
 8005afe:	b530      	push	{r4, r5, lr}
 8005b00:	b085      	sub	sp, #20
 8005b02:	ad01      	add	r5, sp, #4
 8005b04:	9001      	str	r0, [sp, #4]
 8005b06:	9102      	str	r1, [sp, #8]
 8005b08:	9203      	str	r2, [sp, #12]
 8005b0a:	2405      	movs	r4, #5
 8005b0c:	1c20      	adds	r0, r4, #0
 8005b0e:	1c29      	adds	r1, r5, #0
 8005b10:	beab      	bkpt	0x00ab
 8005b12:	1c04      	adds	r4, r0, #0
 8005b14:	0020      	movs	r0, r4
 8005b16:	f7ff ff83 	bl	8005a20 <checkerror>
 8005b1a:	b005      	add	sp, #20
 8005b1c:	bd30      	pop	{r4, r5, pc}

08005b1e <_write>:
 8005b1e:	b570      	push	{r4, r5, r6, lr}
 8005b20:	000e      	movs	r6, r1
 8005b22:	0015      	movs	r5, r2
 8005b24:	f7ff ff54 	bl	80059d0 <findslot>
 8005b28:	1e04      	subs	r4, r0, #0
 8005b2a:	d106      	bne.n	8005b3a <_write+0x1c>
 8005b2c:	f000 f9bc 	bl	8005ea8 <__errno>
 8005b30:	2309      	movs	r3, #9
 8005b32:	6003      	str	r3, [r0, #0]
 8005b34:	2001      	movs	r0, #1
 8005b36:	4240      	negs	r0, r0
 8005b38:	e00f      	b.n	8005b5a <_write+0x3c>
 8005b3a:	002a      	movs	r2, r5
 8005b3c:	0031      	movs	r1, r6
 8005b3e:	6800      	ldr	r0, [r0, #0]
 8005b40:	f7ff ffdd 	bl	8005afe <_swiwrite>
 8005b44:	1e03      	subs	r3, r0, #0
 8005b46:	dbf5      	blt.n	8005b34 <_write+0x16>
 8005b48:	6862      	ldr	r2, [r4, #4]
 8005b4a:	1a28      	subs	r0, r5, r0
 8005b4c:	1812      	adds	r2, r2, r0
 8005b4e:	6062      	str	r2, [r4, #4]
 8005b50:	42ab      	cmp	r3, r5
 8005b52:	d102      	bne.n	8005b5a <_write+0x3c>
 8005b54:	2000      	movs	r0, #0
 8005b56:	f7ff ff55 	bl	8005a04 <error>
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}

08005b5c <_swiclose>:
 8005b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b5e:	2402      	movs	r4, #2
 8005b60:	9001      	str	r0, [sp, #4]
 8005b62:	ad01      	add	r5, sp, #4
 8005b64:	1c20      	adds	r0, r4, #0
 8005b66:	1c29      	adds	r1, r5, #0
 8005b68:	beab      	bkpt	0x00ab
 8005b6a:	1c04      	adds	r4, r0, #0
 8005b6c:	0020      	movs	r0, r4
 8005b6e:	f7ff ff57 	bl	8005a20 <checkerror>
 8005b72:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08005b74 <_close>:
 8005b74:	b570      	push	{r4, r5, r6, lr}
 8005b76:	0005      	movs	r5, r0
 8005b78:	f7ff ff2a 	bl	80059d0 <findslot>
 8005b7c:	1e04      	subs	r4, r0, #0
 8005b7e:	d106      	bne.n	8005b8e <_close+0x1a>
 8005b80:	f000 f992 	bl	8005ea8 <__errno>
 8005b84:	2309      	movs	r3, #9
 8005b86:	6003      	str	r3, [r0, #0]
 8005b88:	2001      	movs	r0, #1
 8005b8a:	4240      	negs	r0, r0
 8005b8c:	bd70      	pop	{r4, r5, r6, pc}
 8005b8e:	3d01      	subs	r5, #1
 8005b90:	2d01      	cmp	r5, #1
 8005b92:	d809      	bhi.n	8005ba8 <_close+0x34>
 8005b94:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <_close+0x48>)
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d104      	bne.n	8005ba8 <_close+0x34>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	425b      	negs	r3, r3
 8005ba2:	6003      	str	r3, [r0, #0]
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	e7f1      	b.n	8005b8c <_close+0x18>
 8005ba8:	6820      	ldr	r0, [r4, #0]
 8005baa:	f7ff ffd7 	bl	8005b5c <_swiclose>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d1ec      	bne.n	8005b8c <_close+0x18>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	425b      	negs	r3, r3
 8005bb6:	6023      	str	r3, [r4, #0]
 8005bb8:	e7e8      	b.n	8005b8c <_close+0x18>
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	20000340 	.word	0x20000340

08005bc0 <_swistat>:
 8005bc0:	b570      	push	{r4, r5, r6, lr}
 8005bc2:	000c      	movs	r4, r1
 8005bc4:	f7ff ff04 	bl	80059d0 <findslot>
 8005bc8:	1e05      	subs	r5, r0, #0
 8005bca:	d106      	bne.n	8005bda <_swistat+0x1a>
 8005bcc:	f000 f96c 	bl	8005ea8 <__errno>
 8005bd0:	2309      	movs	r3, #9
 8005bd2:	6003      	str	r3, [r0, #0]
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	4240      	negs	r0, r0
 8005bd8:	bd70      	pop	{r4, r5, r6, pc}
 8005bda:	2380      	movs	r3, #128	; 0x80
 8005bdc:	6862      	ldr	r2, [r4, #4]
 8005bde:	019b      	lsls	r3, r3, #6
 8005be0:	4313      	orrs	r3, r2
 8005be2:	6063      	str	r3, [r4, #4]
 8005be4:	2380      	movs	r3, #128	; 0x80
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	260c      	movs	r6, #12
 8005bea:	64a3      	str	r3, [r4, #72]	; 0x48
 8005bec:	1c30      	adds	r0, r6, #0
 8005bee:	1c29      	adds	r1, r5, #0
 8005bf0:	beab      	bkpt	0x00ab
 8005bf2:	1c05      	adds	r5, r0, #0
 8005bf4:	0028      	movs	r0, r5
 8005bf6:	f7ff ff13 	bl	8005a20 <checkerror>
 8005bfa:	1c43      	adds	r3, r0, #1
 8005bfc:	d0ec      	beq.n	8005bd8 <_swistat+0x18>
 8005bfe:	6120      	str	r0, [r4, #16]
 8005c00:	2000      	movs	r0, #0
 8005c02:	e7e9      	b.n	8005bd8 <_swistat+0x18>

08005c04 <_stat>:
 8005c04:	b570      	push	{r4, r5, r6, lr}
 8005c06:	000d      	movs	r5, r1
 8005c08:	0004      	movs	r4, r0
 8005c0a:	2258      	movs	r2, #88	; 0x58
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	0028      	movs	r0, r5
 8005c10:	f000 fa79 	bl	8006106 <memset>
 8005c14:	0020      	movs	r0, r4
 8005c16:	2100      	movs	r1, #0
 8005c18:	f000 f812 	bl	8005c40 <_swiopen>
 8005c1c:	0004      	movs	r4, r0
 8005c1e:	1c43      	adds	r3, r0, #1
 8005c20:	d00c      	beq.n	8005c3c <_stat+0x38>
 8005c22:	2381      	movs	r3, #129	; 0x81
 8005c24:	686a      	ldr	r2, [r5, #4]
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	0029      	movs	r1, r5
 8005c2c:	606b      	str	r3, [r5, #4]
 8005c2e:	f7ff ffc7 	bl	8005bc0 <_swistat>
 8005c32:	0005      	movs	r5, r0
 8005c34:	0020      	movs	r0, r4
 8005c36:	f7ff ff9d 	bl	8005b74 <_close>
 8005c3a:	002c      	movs	r4, r5
 8005c3c:	0020      	movs	r0, r4
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}

08005c40 <_swiopen>:
 8005c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c42:	000d      	movs	r5, r1
 8005c44:	2600      	movs	r6, #0
 8005c46:	b099      	sub	sp, #100	; 0x64
 8005c48:	9000      	str	r0, [sp, #0]
 8005c4a:	00f3      	lsls	r3, r6, #3
 8005c4c:	9301      	str	r3, [sp, #4]
 8005c4e:	4b29      	ldr	r3, [pc, #164]	; (8005cf4 <_swiopen+0xb4>)
 8005c50:	00f2      	lsls	r2, r6, #3
 8005c52:	589c      	ldr	r4, [r3, r2]
 8005c54:	1c63      	adds	r3, r4, #1
 8005c56:	d038      	beq.n	8005cca <_swiopen+0x8a>
 8005c58:	3601      	adds	r6, #1
 8005c5a:	2e14      	cmp	r6, #20
 8005c5c:	d1f5      	bne.n	8005c4a <_swiopen+0xa>
 8005c5e:	f000 f923 	bl	8005ea8 <__errno>
 8005c62:	2401      	movs	r4, #1
 8005c64:	2318      	movs	r3, #24
 8005c66:	4264      	negs	r4, r4
 8005c68:	6003      	str	r3, [r0, #0]
 8005c6a:	e03f      	b.n	8005cec <_swiopen+0xac>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	03ec      	lsls	r4, r5, #15
 8005c70:	0fe4      	lsrs	r4, r4, #31
 8005c72:	421d      	tst	r5, r3
 8005c74:	d000      	beq.n	8005c78 <_swiopen+0x38>
 8005c76:	431c      	orrs	r4, r3
 8005c78:	4b1f      	ldr	r3, [pc, #124]	; (8005cf8 <_swiopen+0xb8>)
 8005c7a:	421d      	tst	r5, r3
 8005c7c:	d001      	beq.n	8005c82 <_swiopen+0x42>
 8005c7e:	2304      	movs	r3, #4
 8005c80:	431c      	orrs	r4, r3
 8005c82:	2308      	movs	r3, #8
 8005c84:	421d      	tst	r5, r3
 8005c86:	d002      	beq.n	8005c8e <_swiopen+0x4e>
 8005c88:	2204      	movs	r2, #4
 8005c8a:	4394      	bics	r4, r2
 8005c8c:	431c      	orrs	r4, r3
 8005c8e:	9b00      	ldr	r3, [sp, #0]
 8005c90:	0018      	movs	r0, r3
 8005c92:	9302      	str	r3, [sp, #8]
 8005c94:	f7fa fa42 	bl	800011c <strlen>
 8005c98:	607c      	str	r4, [r7, #4]
 8005c9a:	60b8      	str	r0, [r7, #8]
 8005c9c:	2401      	movs	r4, #1
 8005c9e:	1c20      	adds	r0, r4, #0
 8005ca0:	1c39      	adds	r1, r7, #0
 8005ca2:	beab      	bkpt	0x00ab
 8005ca4:	1c04      	adds	r4, r0, #0
 8005ca6:	2c00      	cmp	r4, #0
 8005ca8:	db0a      	blt.n	8005cc0 <_swiopen+0x80>
 8005caa:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <_swiopen+0xb4>)
 8005cac:	00f2      	lsls	r2, r6, #3
 8005cae:	509c      	str	r4, [r3, r2]
 8005cb0:	0013      	movs	r3, r2
 8005cb2:	4a10      	ldr	r2, [pc, #64]	; (8005cf4 <_swiopen+0xb4>)
 8005cb4:	0034      	movs	r4, r6
 8005cb6:	4694      	mov	ip, r2
 8005cb8:	2200      	movs	r2, #0
 8005cba:	4463      	add	r3, ip
 8005cbc:	605a      	str	r2, [r3, #4]
 8005cbe:	e015      	b.n	8005cec <_swiopen+0xac>
 8005cc0:	0020      	movs	r0, r4
 8005cc2:	f7ff fe9f 	bl	8005a04 <error>
 8005cc6:	0004      	movs	r4, r0
 8005cc8:	e010      	b.n	8005cec <_swiopen+0xac>
 8005cca:	23a0      	movs	r3, #160	; 0xa0
 8005ccc:	002a      	movs	r2, r5
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	401a      	ands	r2, r3
 8005cd2:	af02      	add	r7, sp, #8
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d1c9      	bne.n	8005c6c <_swiopen+0x2c>
 8005cd8:	0039      	movs	r1, r7
 8005cda:	9800      	ldr	r0, [sp, #0]
 8005cdc:	f7ff ff92 	bl	8005c04 <_stat>
 8005ce0:	1c43      	adds	r3, r0, #1
 8005ce2:	d0c3      	beq.n	8005c6c <_swiopen+0x2c>
 8005ce4:	f000 f8e0 	bl	8005ea8 <__errno>
 8005ce8:	2311      	movs	r3, #17
 8005cea:	6003      	str	r3, [r0, #0]
 8005cec:	0020      	movs	r0, r4
 8005cee:	b019      	add	sp, #100	; 0x64
 8005cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	20000340 	.word	0x20000340
 8005cf8:	00000601 	.word	0x00000601

08005cfc <_get_semihosting_exts>:
 8005cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	9000      	str	r0, [sp, #0]
 8005d02:	9101      	str	r1, [sp, #4]
 8005d04:	4827      	ldr	r0, [pc, #156]	; (8005da4 <_get_semihosting_exts+0xa8>)
 8005d06:	2100      	movs	r1, #0
 8005d08:	0015      	movs	r5, r2
 8005d0a:	f7ff ff99 	bl	8005c40 <_swiopen>
 8005d0e:	0004      	movs	r4, r0
 8005d10:	002a      	movs	r2, r5
 8005d12:	2100      	movs	r1, #0
 8005d14:	9800      	ldr	r0, [sp, #0]
 8005d16:	f000 f9f6 	bl	8006106 <memset>
 8005d1a:	1c63      	adds	r3, r4, #1
 8005d1c:	d015      	beq.n	8005d4a <_get_semihosting_exts+0x4e>
 8005d1e:	0020      	movs	r0, r4
 8005d20:	f7ff fe56 	bl	80059d0 <findslot>
 8005d24:	260c      	movs	r6, #12
 8005d26:	0007      	movs	r7, r0
 8005d28:	1c30      	adds	r0, r6, #0
 8005d2a:	1c39      	adds	r1, r7, #0
 8005d2c:	beab      	bkpt	0x00ab
 8005d2e:	1c06      	adds	r6, r0, #0
 8005d30:	0030      	movs	r0, r6
 8005d32:	f7ff fe75 	bl	8005a20 <checkerror>
 8005d36:	2803      	cmp	r0, #3
 8005d38:	dd02      	ble.n	8005d40 <_get_semihosting_exts+0x44>
 8005d3a:	3803      	subs	r0, #3
 8005d3c:	42a8      	cmp	r0, r5
 8005d3e:	dc07      	bgt.n	8005d50 <_get_semihosting_exts+0x54>
 8005d40:	0020      	movs	r0, r4
 8005d42:	2401      	movs	r4, #1
 8005d44:	f7ff ff16 	bl	8005b74 <_close>
 8005d48:	4264      	negs	r4, r4
 8005d4a:	0020      	movs	r0, r4
 8005d4c:	b005      	add	sp, #20
 8005d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d50:	ae03      	add	r6, sp, #12
 8005d52:	2204      	movs	r2, #4
 8005d54:	0031      	movs	r1, r6
 8005d56:	0020      	movs	r0, r4
 8005d58:	f7ff fe78 	bl	8005a4c <_read>
 8005d5c:	2803      	cmp	r0, #3
 8005d5e:	ddef      	ble.n	8005d40 <_get_semihosting_exts+0x44>
 8005d60:	7833      	ldrb	r3, [r6, #0]
 8005d62:	2b53      	cmp	r3, #83	; 0x53
 8005d64:	d1ec      	bne.n	8005d40 <_get_semihosting_exts+0x44>
 8005d66:	7873      	ldrb	r3, [r6, #1]
 8005d68:	2b48      	cmp	r3, #72	; 0x48
 8005d6a:	d1e9      	bne.n	8005d40 <_get_semihosting_exts+0x44>
 8005d6c:	78b3      	ldrb	r3, [r6, #2]
 8005d6e:	2b46      	cmp	r3, #70	; 0x46
 8005d70:	d1e6      	bne.n	8005d40 <_get_semihosting_exts+0x44>
 8005d72:	78f3      	ldrb	r3, [r6, #3]
 8005d74:	2b42      	cmp	r3, #66	; 0x42
 8005d76:	d1e3      	bne.n	8005d40 <_get_semihosting_exts+0x44>
 8005d78:	2201      	movs	r2, #1
 8005d7a:	0020      	movs	r0, r4
 8005d7c:	9901      	ldr	r1, [sp, #4]
 8005d7e:	f7ff fe7f 	bl	8005a80 <_swilseek>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	dbdc      	blt.n	8005d40 <_get_semihosting_exts+0x44>
 8005d86:	002a      	movs	r2, r5
 8005d88:	9900      	ldr	r1, [sp, #0]
 8005d8a:	0020      	movs	r0, r4
 8005d8c:	f7ff fe5e 	bl	8005a4c <_read>
 8005d90:	0005      	movs	r5, r0
 8005d92:	0020      	movs	r0, r4
 8005d94:	f7ff feee 	bl	8005b74 <_close>
 8005d98:	0028      	movs	r0, r5
 8005d9a:	f7ff fe41 	bl	8005a20 <checkerror>
 8005d9e:	0004      	movs	r4, r0
 8005da0:	e7d3      	b.n	8005d4a <_get_semihosting_exts+0x4e>
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	08007088 	.word	0x08007088

08005da8 <initialise_semihosting_exts>:
 8005da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005daa:	2401      	movs	r4, #1
 8005dac:	2100      	movs	r1, #0
 8005dae:	4e09      	ldr	r6, [pc, #36]	; (8005dd4 <initialise_semihosting_exts+0x2c>)
 8005db0:	4d09      	ldr	r5, [pc, #36]	; (8005dd8 <initialise_semihosting_exts+0x30>)
 8005db2:	af01      	add	r7, sp, #4
 8005db4:	0022      	movs	r2, r4
 8005db6:	0038      	movs	r0, r7
 8005db8:	6031      	str	r1, [r6, #0]
 8005dba:	602c      	str	r4, [r5, #0]
 8005dbc:	f7ff ff9e 	bl	8005cfc <_get_semihosting_exts>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	dd05      	ble.n	8005dd0 <initialise_semihosting_exts+0x28>
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	783b      	ldrb	r3, [r7, #0]
 8005dc8:	401c      	ands	r4, r3
 8005dca:	4013      	ands	r3, r2
 8005dcc:	6034      	str	r4, [r6, #0]
 8005dce:	602b      	str	r3, [r5, #0]
 8005dd0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	200000c8 	.word	0x200000c8
 8005dd8:	200000cc 	.word	0x200000cc

08005ddc <_has_ext_stdout_stderr>:
 8005ddc:	b510      	push	{r4, lr}
 8005dde:	4c04      	ldr	r4, [pc, #16]	; (8005df0 <_has_ext_stdout_stderr+0x14>)
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	da01      	bge.n	8005dea <_has_ext_stdout_stderr+0xe>
 8005de6:	f7ff ffdf 	bl	8005da8 <initialise_semihosting_exts>
 8005dea:	6820      	ldr	r0, [r4, #0]
 8005dec:	bd10      	pop	{r4, pc}
 8005dee:	46c0      	nop			; (mov r8, r8)
 8005df0:	200000cc 	.word	0x200000cc

08005df4 <initialise_monitor_handles>:
 8005df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005df6:	4b27      	ldr	r3, [pc, #156]	; (8005e94 <initialise_monitor_handles+0xa0>)
 8005df8:	b085      	sub	sp, #20
 8005dfa:	9301      	str	r3, [sp, #4]
 8005dfc:	2500      	movs	r5, #0
 8005dfe:	2303      	movs	r3, #3
 8005e00:	ac01      	add	r4, sp, #4
 8005e02:	60a3      	str	r3, [r4, #8]
 8005e04:	2701      	movs	r7, #1
 8005e06:	6065      	str	r5, [r4, #4]
 8005e08:	1c38      	adds	r0, r7, #0
 8005e0a:	1c21      	adds	r1, r4, #0
 8005e0c:	beab      	bkpt	0x00ab
 8005e0e:	1c07      	adds	r7, r0, #0
 8005e10:	2101      	movs	r1, #1
 8005e12:	4b21      	ldr	r3, [pc, #132]	; (8005e98 <initialise_monitor_handles+0xa4>)
 8005e14:	4249      	negs	r1, r1
 8005e16:	601f      	str	r7, [r3, #0]
 8005e18:	002b      	movs	r3, r5
 8005e1a:	4d20      	ldr	r5, [pc, #128]	; (8005e9c <initialise_monitor_handles+0xa8>)
 8005e1c:	00da      	lsls	r2, r3, #3
 8005e1e:	3301      	adds	r3, #1
 8005e20:	50a9      	str	r1, [r5, r2]
 8005e22:	2b14      	cmp	r3, #20
 8005e24:	d1fa      	bne.n	8005e1c <initialise_monitor_handles+0x28>
 8005e26:	f7ff ffd9 	bl	8005ddc <_has_ext_stdout_stderr>
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	d018      	beq.n	8005e60 <initialise_monitor_handles+0x6c>
 8005e2e:	4b19      	ldr	r3, [pc, #100]	; (8005e94 <initialise_monitor_handles+0xa0>)
 8005e30:	2701      	movs	r7, #1
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	2303      	movs	r3, #3
 8005e36:	60a3      	str	r3, [r4, #8]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	6063      	str	r3, [r4, #4]
 8005e3c:	1c38      	adds	r0, r7, #0
 8005e3e:	1c21      	adds	r1, r4, #0
 8005e40:	beab      	bkpt	0x00ab
 8005e42:	1c06      	adds	r6, r0, #0
 8005e44:	4b16      	ldr	r3, [pc, #88]	; (8005ea0 <initialise_monitor_handles+0xac>)
 8005e46:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <initialise_monitor_handles+0xa0>)
 8005e48:	601e      	str	r6, [r3, #0]
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	9201      	str	r2, [sp, #4]
 8005e4e:	60a3      	str	r3, [r4, #8]
 8005e50:	3305      	adds	r3, #5
 8005e52:	6063      	str	r3, [r4, #4]
 8005e54:	1c38      	adds	r0, r7, #0
 8005e56:	1c21      	adds	r1, r4, #0
 8005e58:	beab      	bkpt	0x00ab
 8005e5a:	1c04      	adds	r4, r0, #0
 8005e5c:	4b11      	ldr	r3, [pc, #68]	; (8005ea4 <initialise_monitor_handles+0xb0>)
 8005e5e:	601c      	str	r4, [r3, #0]
 8005e60:	4f10      	ldr	r7, [pc, #64]	; (8005ea4 <initialise_monitor_handles+0xb0>)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	d102      	bne.n	8005e6e <initialise_monitor_handles+0x7a>
 8005e68:	4b0d      	ldr	r3, [pc, #52]	; (8005ea0 <initialise_monitor_handles+0xac>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	603b      	str	r3, [r7, #0]
 8005e6e:	2400      	movs	r4, #0
 8005e70:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <initialise_monitor_handles+0xa4>)
 8005e72:	606c      	str	r4, [r5, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	602b      	str	r3, [r5, #0]
 8005e78:	f7ff ffb0 	bl	8005ddc <_has_ext_stdout_stderr>
 8005e7c:	42a0      	cmp	r0, r4
 8005e7e:	d006      	beq.n	8005e8e <initialise_monitor_handles+0x9a>
 8005e80:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <initialise_monitor_handles+0xac>)
 8005e82:	60ec      	str	r4, [r5, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	616c      	str	r4, [r5, #20]
 8005e88:	60ab      	str	r3, [r5, #8]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	612b      	str	r3, [r5, #16]
 8005e8e:	b005      	add	sp, #20
 8005e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e92:	46c0      	nop			; (mov r8, r8)
 8005e94:	0800709e 	.word	0x0800709e
 8005e98:	20000338 	.word	0x20000338
 8005e9c:	20000340 	.word	0x20000340
 8005ea0:	2000033c 	.word	0x2000033c
 8005ea4:	20000334 	.word	0x20000334

08005ea8 <__errno>:
 8005ea8:	4b01      	ldr	r3, [pc, #4]	; (8005eb0 <__errno+0x8>)
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	4770      	bx	lr
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	200000d0 	.word	0x200000d0

08005eb4 <std>:
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	b510      	push	{r4, lr}
 8005eb8:	0004      	movs	r4, r0
 8005eba:	6003      	str	r3, [r0, #0]
 8005ebc:	6043      	str	r3, [r0, #4]
 8005ebe:	6083      	str	r3, [r0, #8]
 8005ec0:	8181      	strh	r1, [r0, #12]
 8005ec2:	6643      	str	r3, [r0, #100]	; 0x64
 8005ec4:	0019      	movs	r1, r3
 8005ec6:	81c2      	strh	r2, [r0, #14]
 8005ec8:	6103      	str	r3, [r0, #16]
 8005eca:	6143      	str	r3, [r0, #20]
 8005ecc:	6183      	str	r3, [r0, #24]
 8005ece:	2208      	movs	r2, #8
 8005ed0:	305c      	adds	r0, #92	; 0x5c
 8005ed2:	f000 f918 	bl	8006106 <memset>
 8005ed6:	4b05      	ldr	r3, [pc, #20]	; (8005eec <std+0x38>)
 8005ed8:	6224      	str	r4, [r4, #32]
 8005eda:	6263      	str	r3, [r4, #36]	; 0x24
 8005edc:	4b04      	ldr	r3, [pc, #16]	; (8005ef0 <std+0x3c>)
 8005ede:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ee0:	4b04      	ldr	r3, [pc, #16]	; (8005ef4 <std+0x40>)
 8005ee2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ee4:	4b04      	ldr	r3, [pc, #16]	; (8005ef8 <std+0x44>)
 8005ee6:	6323      	str	r3, [r4, #48]	; 0x30
 8005ee8:	bd10      	pop	{r4, pc}
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	080062ad 	.word	0x080062ad
 8005ef0:	080062d5 	.word	0x080062d5
 8005ef4:	0800630d 	.word	0x0800630d
 8005ef8:	08006339 	.word	0x08006339

08005efc <_cleanup_r>:
 8005efc:	b510      	push	{r4, lr}
 8005efe:	4902      	ldr	r1, [pc, #8]	; (8005f08 <_cleanup_r+0xc>)
 8005f00:	f000 f8ba 	bl	8006078 <_fwalk_reent>
 8005f04:	bd10      	pop	{r4, pc}
 8005f06:	46c0      	nop			; (mov r8, r8)
 8005f08:	080064b9 	.word	0x080064b9

08005f0c <__sfmoreglue>:
 8005f0c:	b570      	push	{r4, r5, r6, lr}
 8005f0e:	2568      	movs	r5, #104	; 0x68
 8005f10:	1e4a      	subs	r2, r1, #1
 8005f12:	4355      	muls	r5, r2
 8005f14:	000e      	movs	r6, r1
 8005f16:	0029      	movs	r1, r5
 8005f18:	3174      	adds	r1, #116	; 0x74
 8005f1a:	f000 f91f 	bl	800615c <_malloc_r>
 8005f1e:	1e04      	subs	r4, r0, #0
 8005f20:	d008      	beq.n	8005f34 <__sfmoreglue+0x28>
 8005f22:	2100      	movs	r1, #0
 8005f24:	002a      	movs	r2, r5
 8005f26:	6001      	str	r1, [r0, #0]
 8005f28:	6046      	str	r6, [r0, #4]
 8005f2a:	300c      	adds	r0, #12
 8005f2c:	60a0      	str	r0, [r4, #8]
 8005f2e:	3268      	adds	r2, #104	; 0x68
 8005f30:	f000 f8e9 	bl	8006106 <memset>
 8005f34:	0020      	movs	r0, r4
 8005f36:	bd70      	pop	{r4, r5, r6, pc}

08005f38 <__sfp_lock_acquire>:
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	4802      	ldr	r0, [pc, #8]	; (8005f44 <__sfp_lock_acquire+0xc>)
 8005f3c:	f000 f8e1 	bl	8006102 <__retarget_lock_acquire_recursive>
 8005f40:	bd10      	pop	{r4, pc}
 8005f42:	46c0      	nop			; (mov r8, r8)
 8005f44:	200003e1 	.word	0x200003e1

08005f48 <__sfp_lock_release>:
 8005f48:	b510      	push	{r4, lr}
 8005f4a:	4802      	ldr	r0, [pc, #8]	; (8005f54 <__sfp_lock_release+0xc>)
 8005f4c:	f000 f8da 	bl	8006104 <__retarget_lock_release_recursive>
 8005f50:	bd10      	pop	{r4, pc}
 8005f52:	46c0      	nop			; (mov r8, r8)
 8005f54:	200003e1 	.word	0x200003e1

08005f58 <__sinit_lock_acquire>:
 8005f58:	b510      	push	{r4, lr}
 8005f5a:	4802      	ldr	r0, [pc, #8]	; (8005f64 <__sinit_lock_acquire+0xc>)
 8005f5c:	f000 f8d1 	bl	8006102 <__retarget_lock_acquire_recursive>
 8005f60:	bd10      	pop	{r4, pc}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	200003e2 	.word	0x200003e2

08005f68 <__sinit_lock_release>:
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	4802      	ldr	r0, [pc, #8]	; (8005f74 <__sinit_lock_release+0xc>)
 8005f6c:	f000 f8ca 	bl	8006104 <__retarget_lock_release_recursive>
 8005f70:	bd10      	pop	{r4, pc}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	200003e2 	.word	0x200003e2

08005f78 <__sinit>:
 8005f78:	b513      	push	{r0, r1, r4, lr}
 8005f7a:	0004      	movs	r4, r0
 8005f7c:	f7ff ffec 	bl	8005f58 <__sinit_lock_acquire>
 8005f80:	69a3      	ldr	r3, [r4, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <__sinit+0x14>
 8005f86:	f7ff ffef 	bl	8005f68 <__sinit_lock_release>
 8005f8a:	bd13      	pop	{r0, r1, r4, pc}
 8005f8c:	64a3      	str	r3, [r4, #72]	; 0x48
 8005f8e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005f90:	6523      	str	r3, [r4, #80]	; 0x50
 8005f92:	4b13      	ldr	r3, [pc, #76]	; (8005fe0 <__sinit+0x68>)
 8005f94:	4a13      	ldr	r2, [pc, #76]	; (8005fe4 <__sinit+0x6c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	42a3      	cmp	r3, r4
 8005f9e:	d101      	bne.n	8005fa4 <__sinit+0x2c>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	61a3      	str	r3, [r4, #24]
 8005fa4:	0020      	movs	r0, r4
 8005fa6:	f000 f81f 	bl	8005fe8 <__sfp>
 8005faa:	6060      	str	r0, [r4, #4]
 8005fac:	0020      	movs	r0, r4
 8005fae:	f000 f81b 	bl	8005fe8 <__sfp>
 8005fb2:	60a0      	str	r0, [r4, #8]
 8005fb4:	0020      	movs	r0, r4
 8005fb6:	f000 f817 	bl	8005fe8 <__sfp>
 8005fba:	2200      	movs	r2, #0
 8005fbc:	2104      	movs	r1, #4
 8005fbe:	60e0      	str	r0, [r4, #12]
 8005fc0:	6860      	ldr	r0, [r4, #4]
 8005fc2:	f7ff ff77 	bl	8005eb4 <std>
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	2109      	movs	r1, #9
 8005fca:	68a0      	ldr	r0, [r4, #8]
 8005fcc:	f7ff ff72 	bl	8005eb4 <std>
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	2112      	movs	r1, #18
 8005fd4:	68e0      	ldr	r0, [r4, #12]
 8005fd6:	f7ff ff6d 	bl	8005eb4 <std>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	61a3      	str	r3, [r4, #24]
 8005fde:	e7d2      	b.n	8005f86 <__sinit+0xe>
 8005fe0:	08007104 	.word	0x08007104
 8005fe4:	08005efd 	.word	0x08005efd

08005fe8 <__sfp>:
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fea:	0007      	movs	r7, r0
 8005fec:	f7ff ffa4 	bl	8005f38 <__sfp_lock_acquire>
 8005ff0:	4b1f      	ldr	r3, [pc, #124]	; (8006070 <__sfp+0x88>)
 8005ff2:	681e      	ldr	r6, [r3, #0]
 8005ff4:	69b3      	ldr	r3, [r6, #24]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d102      	bne.n	8006000 <__sfp+0x18>
 8005ffa:	0030      	movs	r0, r6
 8005ffc:	f7ff ffbc 	bl	8005f78 <__sinit>
 8006000:	3648      	adds	r6, #72	; 0x48
 8006002:	68b4      	ldr	r4, [r6, #8]
 8006004:	6873      	ldr	r3, [r6, #4]
 8006006:	3b01      	subs	r3, #1
 8006008:	d504      	bpl.n	8006014 <__sfp+0x2c>
 800600a:	6833      	ldr	r3, [r6, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d022      	beq.n	8006056 <__sfp+0x6e>
 8006010:	6836      	ldr	r6, [r6, #0]
 8006012:	e7f6      	b.n	8006002 <__sfp+0x1a>
 8006014:	220c      	movs	r2, #12
 8006016:	5ea5      	ldrsh	r5, [r4, r2]
 8006018:	2d00      	cmp	r5, #0
 800601a:	d11a      	bne.n	8006052 <__sfp+0x6a>
 800601c:	0020      	movs	r0, r4
 800601e:	4b15      	ldr	r3, [pc, #84]	; (8006074 <__sfp+0x8c>)
 8006020:	3058      	adds	r0, #88	; 0x58
 8006022:	60e3      	str	r3, [r4, #12]
 8006024:	6665      	str	r5, [r4, #100]	; 0x64
 8006026:	f000 f86b 	bl	8006100 <__retarget_lock_init_recursive>
 800602a:	f7ff ff8d 	bl	8005f48 <__sfp_lock_release>
 800602e:	0020      	movs	r0, r4
 8006030:	2208      	movs	r2, #8
 8006032:	0029      	movs	r1, r5
 8006034:	6025      	str	r5, [r4, #0]
 8006036:	60a5      	str	r5, [r4, #8]
 8006038:	6065      	str	r5, [r4, #4]
 800603a:	6125      	str	r5, [r4, #16]
 800603c:	6165      	str	r5, [r4, #20]
 800603e:	61a5      	str	r5, [r4, #24]
 8006040:	305c      	adds	r0, #92	; 0x5c
 8006042:	f000 f860 	bl	8006106 <memset>
 8006046:	6365      	str	r5, [r4, #52]	; 0x34
 8006048:	63a5      	str	r5, [r4, #56]	; 0x38
 800604a:	64a5      	str	r5, [r4, #72]	; 0x48
 800604c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800604e:	0020      	movs	r0, r4
 8006050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006052:	3468      	adds	r4, #104	; 0x68
 8006054:	e7d7      	b.n	8006006 <__sfp+0x1e>
 8006056:	2104      	movs	r1, #4
 8006058:	0038      	movs	r0, r7
 800605a:	f7ff ff57 	bl	8005f0c <__sfmoreglue>
 800605e:	1e04      	subs	r4, r0, #0
 8006060:	6030      	str	r0, [r6, #0]
 8006062:	d1d5      	bne.n	8006010 <__sfp+0x28>
 8006064:	f7ff ff70 	bl	8005f48 <__sfp_lock_release>
 8006068:	230c      	movs	r3, #12
 800606a:	603b      	str	r3, [r7, #0]
 800606c:	e7ef      	b.n	800604e <__sfp+0x66>
 800606e:	46c0      	nop			; (mov r8, r8)
 8006070:	08007104 	.word	0x08007104
 8006074:	ffff0001 	.word	0xffff0001

08006078 <_fwalk_reent>:
 8006078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800607a:	0004      	movs	r4, r0
 800607c:	0006      	movs	r6, r0
 800607e:	2700      	movs	r7, #0
 8006080:	9101      	str	r1, [sp, #4]
 8006082:	3448      	adds	r4, #72	; 0x48
 8006084:	6863      	ldr	r3, [r4, #4]
 8006086:	68a5      	ldr	r5, [r4, #8]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	9b00      	ldr	r3, [sp, #0]
 800608c:	3b01      	subs	r3, #1
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	d504      	bpl.n	800609c <_fwalk_reent+0x24>
 8006092:	6824      	ldr	r4, [r4, #0]
 8006094:	2c00      	cmp	r4, #0
 8006096:	d1f5      	bne.n	8006084 <_fwalk_reent+0xc>
 8006098:	0038      	movs	r0, r7
 800609a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800609c:	89ab      	ldrh	r3, [r5, #12]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d908      	bls.n	80060b4 <_fwalk_reent+0x3c>
 80060a2:	220e      	movs	r2, #14
 80060a4:	5eab      	ldrsh	r3, [r5, r2]
 80060a6:	3301      	adds	r3, #1
 80060a8:	d004      	beq.n	80060b4 <_fwalk_reent+0x3c>
 80060aa:	0029      	movs	r1, r5
 80060ac:	0030      	movs	r0, r6
 80060ae:	9b01      	ldr	r3, [sp, #4]
 80060b0:	4798      	blx	r3
 80060b2:	4307      	orrs	r7, r0
 80060b4:	3568      	adds	r5, #104	; 0x68
 80060b6:	e7e8      	b.n	800608a <_fwalk_reent+0x12>

080060b8 <__libc_init_array>:
 80060b8:	b570      	push	{r4, r5, r6, lr}
 80060ba:	2600      	movs	r6, #0
 80060bc:	4d0c      	ldr	r5, [pc, #48]	; (80060f0 <__libc_init_array+0x38>)
 80060be:	4c0d      	ldr	r4, [pc, #52]	; (80060f4 <__libc_init_array+0x3c>)
 80060c0:	1b64      	subs	r4, r4, r5
 80060c2:	10a4      	asrs	r4, r4, #2
 80060c4:	42a6      	cmp	r6, r4
 80060c6:	d109      	bne.n	80060dc <__libc_init_array+0x24>
 80060c8:	2600      	movs	r6, #0
 80060ca:	f000 fdf9 	bl	8006cc0 <_init>
 80060ce:	4d0a      	ldr	r5, [pc, #40]	; (80060f8 <__libc_init_array+0x40>)
 80060d0:	4c0a      	ldr	r4, [pc, #40]	; (80060fc <__libc_init_array+0x44>)
 80060d2:	1b64      	subs	r4, r4, r5
 80060d4:	10a4      	asrs	r4, r4, #2
 80060d6:	42a6      	cmp	r6, r4
 80060d8:	d105      	bne.n	80060e6 <__libc_init_array+0x2e>
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	00b3      	lsls	r3, r6, #2
 80060de:	58eb      	ldr	r3, [r5, r3]
 80060e0:	4798      	blx	r3
 80060e2:	3601      	adds	r6, #1
 80060e4:	e7ee      	b.n	80060c4 <__libc_init_array+0xc>
 80060e6:	00b3      	lsls	r3, r6, #2
 80060e8:	58eb      	ldr	r3, [r5, r3]
 80060ea:	4798      	blx	r3
 80060ec:	3601      	adds	r6, #1
 80060ee:	e7f2      	b.n	80060d6 <__libc_init_array+0x1e>
 80060f0:	08007144 	.word	0x08007144
 80060f4:	08007144 	.word	0x08007144
 80060f8:	08007144 	.word	0x08007144
 80060fc:	08007148 	.word	0x08007148

08006100 <__retarget_lock_init_recursive>:
 8006100:	4770      	bx	lr

08006102 <__retarget_lock_acquire_recursive>:
 8006102:	4770      	bx	lr

08006104 <__retarget_lock_release_recursive>:
 8006104:	4770      	bx	lr

08006106 <memset>:
 8006106:	0003      	movs	r3, r0
 8006108:	1882      	adds	r2, r0, r2
 800610a:	4293      	cmp	r3, r2
 800610c:	d100      	bne.n	8006110 <memset+0xa>
 800610e:	4770      	bx	lr
 8006110:	7019      	strb	r1, [r3, #0]
 8006112:	3301      	adds	r3, #1
 8006114:	e7f9      	b.n	800610a <memset+0x4>
	...

08006118 <sbrk_aligned>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	4e0f      	ldr	r6, [pc, #60]	; (8006158 <sbrk_aligned+0x40>)
 800611c:	000d      	movs	r5, r1
 800611e:	6831      	ldr	r1, [r6, #0]
 8006120:	0004      	movs	r4, r0
 8006122:	2900      	cmp	r1, #0
 8006124:	d102      	bne.n	800612c <sbrk_aligned+0x14>
 8006126:	f000 f88f 	bl	8006248 <_sbrk_r>
 800612a:	6030      	str	r0, [r6, #0]
 800612c:	0029      	movs	r1, r5
 800612e:	0020      	movs	r0, r4
 8006130:	f000 f88a 	bl	8006248 <_sbrk_r>
 8006134:	1c43      	adds	r3, r0, #1
 8006136:	d00a      	beq.n	800614e <sbrk_aligned+0x36>
 8006138:	2303      	movs	r3, #3
 800613a:	1cc5      	adds	r5, r0, #3
 800613c:	439d      	bics	r5, r3
 800613e:	42a8      	cmp	r0, r5
 8006140:	d007      	beq.n	8006152 <sbrk_aligned+0x3a>
 8006142:	1a29      	subs	r1, r5, r0
 8006144:	0020      	movs	r0, r4
 8006146:	f000 f87f 	bl	8006248 <_sbrk_r>
 800614a:	1c43      	adds	r3, r0, #1
 800614c:	d101      	bne.n	8006152 <sbrk_aligned+0x3a>
 800614e:	2501      	movs	r5, #1
 8006150:	426d      	negs	r5, r5
 8006152:	0028      	movs	r0, r5
 8006154:	bd70      	pop	{r4, r5, r6, pc}
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	200003e8 	.word	0x200003e8

0800615c <_malloc_r>:
 800615c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800615e:	2203      	movs	r2, #3
 8006160:	1ccb      	adds	r3, r1, #3
 8006162:	4393      	bics	r3, r2
 8006164:	3308      	adds	r3, #8
 8006166:	0006      	movs	r6, r0
 8006168:	001f      	movs	r7, r3
 800616a:	2b0c      	cmp	r3, #12
 800616c:	d232      	bcs.n	80061d4 <_malloc_r+0x78>
 800616e:	270c      	movs	r7, #12
 8006170:	42b9      	cmp	r1, r7
 8006172:	d831      	bhi.n	80061d8 <_malloc_r+0x7c>
 8006174:	0030      	movs	r0, r6
 8006176:	f000 f9f3 	bl	8006560 <__malloc_lock>
 800617a:	4d32      	ldr	r5, [pc, #200]	; (8006244 <_malloc_r+0xe8>)
 800617c:	682b      	ldr	r3, [r5, #0]
 800617e:	001c      	movs	r4, r3
 8006180:	2c00      	cmp	r4, #0
 8006182:	d12e      	bne.n	80061e2 <_malloc_r+0x86>
 8006184:	0039      	movs	r1, r7
 8006186:	0030      	movs	r0, r6
 8006188:	f7ff ffc6 	bl	8006118 <sbrk_aligned>
 800618c:	0004      	movs	r4, r0
 800618e:	1c43      	adds	r3, r0, #1
 8006190:	d11e      	bne.n	80061d0 <_malloc_r+0x74>
 8006192:	682c      	ldr	r4, [r5, #0]
 8006194:	0025      	movs	r5, r4
 8006196:	2d00      	cmp	r5, #0
 8006198:	d14a      	bne.n	8006230 <_malloc_r+0xd4>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	0029      	movs	r1, r5
 800619e:	18e3      	adds	r3, r4, r3
 80061a0:	0030      	movs	r0, r6
 80061a2:	9301      	str	r3, [sp, #4]
 80061a4:	f000 f850 	bl	8006248 <_sbrk_r>
 80061a8:	9b01      	ldr	r3, [sp, #4]
 80061aa:	4283      	cmp	r3, r0
 80061ac:	d143      	bne.n	8006236 <_malloc_r+0xda>
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	3703      	adds	r7, #3
 80061b2:	1aff      	subs	r7, r7, r3
 80061b4:	2303      	movs	r3, #3
 80061b6:	439f      	bics	r7, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	2f0c      	cmp	r7, #12
 80061bc:	d200      	bcs.n	80061c0 <_malloc_r+0x64>
 80061be:	270c      	movs	r7, #12
 80061c0:	0039      	movs	r1, r7
 80061c2:	0030      	movs	r0, r6
 80061c4:	f7ff ffa8 	bl	8006118 <sbrk_aligned>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	d034      	beq.n	8006236 <_malloc_r+0xda>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	19df      	adds	r7, r3, r7
 80061d0:	6027      	str	r7, [r4, #0]
 80061d2:	e013      	b.n	80061fc <_malloc_r+0xa0>
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	dacb      	bge.n	8006170 <_malloc_r+0x14>
 80061d8:	230c      	movs	r3, #12
 80061da:	2500      	movs	r5, #0
 80061dc:	6033      	str	r3, [r6, #0]
 80061de:	0028      	movs	r0, r5
 80061e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061e2:	6822      	ldr	r2, [r4, #0]
 80061e4:	1bd1      	subs	r1, r2, r7
 80061e6:	d420      	bmi.n	800622a <_malloc_r+0xce>
 80061e8:	290b      	cmp	r1, #11
 80061ea:	d917      	bls.n	800621c <_malloc_r+0xc0>
 80061ec:	19e2      	adds	r2, r4, r7
 80061ee:	6027      	str	r7, [r4, #0]
 80061f0:	42a3      	cmp	r3, r4
 80061f2:	d111      	bne.n	8006218 <_malloc_r+0xbc>
 80061f4:	602a      	str	r2, [r5, #0]
 80061f6:	6863      	ldr	r3, [r4, #4]
 80061f8:	6011      	str	r1, [r2, #0]
 80061fa:	6053      	str	r3, [r2, #4]
 80061fc:	0030      	movs	r0, r6
 80061fe:	0025      	movs	r5, r4
 8006200:	f000 f9b6 	bl	8006570 <__malloc_unlock>
 8006204:	2207      	movs	r2, #7
 8006206:	350b      	adds	r5, #11
 8006208:	1d23      	adds	r3, r4, #4
 800620a:	4395      	bics	r5, r2
 800620c:	1aea      	subs	r2, r5, r3
 800620e:	429d      	cmp	r5, r3
 8006210:	d0e5      	beq.n	80061de <_malloc_r+0x82>
 8006212:	1b5b      	subs	r3, r3, r5
 8006214:	50a3      	str	r3, [r4, r2]
 8006216:	e7e2      	b.n	80061de <_malloc_r+0x82>
 8006218:	605a      	str	r2, [r3, #4]
 800621a:	e7ec      	b.n	80061f6 <_malloc_r+0x9a>
 800621c:	6862      	ldr	r2, [r4, #4]
 800621e:	42a3      	cmp	r3, r4
 8006220:	d101      	bne.n	8006226 <_malloc_r+0xca>
 8006222:	602a      	str	r2, [r5, #0]
 8006224:	e7ea      	b.n	80061fc <_malloc_r+0xa0>
 8006226:	605a      	str	r2, [r3, #4]
 8006228:	e7e8      	b.n	80061fc <_malloc_r+0xa0>
 800622a:	0023      	movs	r3, r4
 800622c:	6864      	ldr	r4, [r4, #4]
 800622e:	e7a7      	b.n	8006180 <_malloc_r+0x24>
 8006230:	002c      	movs	r4, r5
 8006232:	686d      	ldr	r5, [r5, #4]
 8006234:	e7af      	b.n	8006196 <_malloc_r+0x3a>
 8006236:	230c      	movs	r3, #12
 8006238:	0030      	movs	r0, r6
 800623a:	6033      	str	r3, [r6, #0]
 800623c:	f000 f998 	bl	8006570 <__malloc_unlock>
 8006240:	e7cd      	b.n	80061de <_malloc_r+0x82>
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	200003e4 	.word	0x200003e4

08006248 <_sbrk_r>:
 8006248:	2300      	movs	r3, #0
 800624a:	b570      	push	{r4, r5, r6, lr}
 800624c:	4d06      	ldr	r5, [pc, #24]	; (8006268 <_sbrk_r+0x20>)
 800624e:	0004      	movs	r4, r0
 8006250:	0008      	movs	r0, r1
 8006252:	602b      	str	r3, [r5, #0]
 8006254:	f7fc f992 	bl	800257c <_sbrk>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d103      	bne.n	8006264 <_sbrk_r+0x1c>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d000      	beq.n	8006264 <_sbrk_r+0x1c>
 8006262:	6023      	str	r3, [r4, #0]
 8006264:	bd70      	pop	{r4, r5, r6, pc}
 8006266:	46c0      	nop			; (mov r8, r8)
 8006268:	200003ec 	.word	0x200003ec

0800626c <siprintf>:
 800626c:	b40e      	push	{r1, r2, r3}
 800626e:	b500      	push	{lr}
 8006270:	490b      	ldr	r1, [pc, #44]	; (80062a0 <siprintf+0x34>)
 8006272:	b09c      	sub	sp, #112	; 0x70
 8006274:	ab1d      	add	r3, sp, #116	; 0x74
 8006276:	9002      	str	r0, [sp, #8]
 8006278:	9006      	str	r0, [sp, #24]
 800627a:	9107      	str	r1, [sp, #28]
 800627c:	9104      	str	r1, [sp, #16]
 800627e:	4809      	ldr	r0, [pc, #36]	; (80062a4 <siprintf+0x38>)
 8006280:	4909      	ldr	r1, [pc, #36]	; (80062a8 <siprintf+0x3c>)
 8006282:	cb04      	ldmia	r3!, {r2}
 8006284:	9105      	str	r1, [sp, #20]
 8006286:	6800      	ldr	r0, [r0, #0]
 8006288:	a902      	add	r1, sp, #8
 800628a:	9301      	str	r3, [sp, #4]
 800628c:	f000 fa24 	bl	80066d8 <_svfiprintf_r>
 8006290:	2300      	movs	r3, #0
 8006292:	9a02      	ldr	r2, [sp, #8]
 8006294:	7013      	strb	r3, [r2, #0]
 8006296:	b01c      	add	sp, #112	; 0x70
 8006298:	bc08      	pop	{r3}
 800629a:	b003      	add	sp, #12
 800629c:	4718      	bx	r3
 800629e:	46c0      	nop			; (mov r8, r8)
 80062a0:	7fffffff 	.word	0x7fffffff
 80062a4:	200000d0 	.word	0x200000d0
 80062a8:	ffff0208 	.word	0xffff0208

080062ac <__sread>:
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	000c      	movs	r4, r1
 80062b0:	250e      	movs	r5, #14
 80062b2:	5f49      	ldrsh	r1, [r1, r5]
 80062b4:	f000 fc92 	bl	8006bdc <_read_r>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	db03      	blt.n	80062c4 <__sread+0x18>
 80062bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80062be:	181b      	adds	r3, r3, r0
 80062c0:	6563      	str	r3, [r4, #84]	; 0x54
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	89a3      	ldrh	r3, [r4, #12]
 80062c6:	4a02      	ldr	r2, [pc, #8]	; (80062d0 <__sread+0x24>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	81a3      	strh	r3, [r4, #12]
 80062cc:	e7f9      	b.n	80062c2 <__sread+0x16>
 80062ce:	46c0      	nop			; (mov r8, r8)
 80062d0:	ffffefff 	.word	0xffffefff

080062d4 <__swrite>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	001f      	movs	r7, r3
 80062d8:	898b      	ldrh	r3, [r1, #12]
 80062da:	0005      	movs	r5, r0
 80062dc:	000c      	movs	r4, r1
 80062de:	0016      	movs	r6, r2
 80062e0:	05db      	lsls	r3, r3, #23
 80062e2:	d505      	bpl.n	80062f0 <__swrite+0x1c>
 80062e4:	230e      	movs	r3, #14
 80062e6:	5ec9      	ldrsh	r1, [r1, r3]
 80062e8:	2200      	movs	r2, #0
 80062ea:	2302      	movs	r3, #2
 80062ec:	f000 f924 	bl	8006538 <_lseek_r>
 80062f0:	89a3      	ldrh	r3, [r4, #12]
 80062f2:	4a05      	ldr	r2, [pc, #20]	; (8006308 <__swrite+0x34>)
 80062f4:	0028      	movs	r0, r5
 80062f6:	4013      	ands	r3, r2
 80062f8:	81a3      	strh	r3, [r4, #12]
 80062fa:	0032      	movs	r2, r6
 80062fc:	230e      	movs	r3, #14
 80062fe:	5ee1      	ldrsh	r1, [r4, r3]
 8006300:	003b      	movs	r3, r7
 8006302:	f000 f827 	bl	8006354 <_write_r>
 8006306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006308:	ffffefff 	.word	0xffffefff

0800630c <__sseek>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	000c      	movs	r4, r1
 8006310:	250e      	movs	r5, #14
 8006312:	5f49      	ldrsh	r1, [r1, r5]
 8006314:	f000 f910 	bl	8006538 <_lseek_r>
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	1c42      	adds	r2, r0, #1
 800631c:	d103      	bne.n	8006326 <__sseek+0x1a>
 800631e:	4a05      	ldr	r2, [pc, #20]	; (8006334 <__sseek+0x28>)
 8006320:	4013      	ands	r3, r2
 8006322:	81a3      	strh	r3, [r4, #12]
 8006324:	bd70      	pop	{r4, r5, r6, pc}
 8006326:	2280      	movs	r2, #128	; 0x80
 8006328:	0152      	lsls	r2, r2, #5
 800632a:	4313      	orrs	r3, r2
 800632c:	81a3      	strh	r3, [r4, #12]
 800632e:	6560      	str	r0, [r4, #84]	; 0x54
 8006330:	e7f8      	b.n	8006324 <__sseek+0x18>
 8006332:	46c0      	nop			; (mov r8, r8)
 8006334:	ffffefff 	.word	0xffffefff

08006338 <__sclose>:
 8006338:	b510      	push	{r4, lr}
 800633a:	230e      	movs	r3, #14
 800633c:	5ec9      	ldrsh	r1, [r1, r3]
 800633e:	f000 f81d 	bl	800637c <_close_r>
 8006342:	bd10      	pop	{r4, pc}

08006344 <strcpy>:
 8006344:	0003      	movs	r3, r0
 8006346:	780a      	ldrb	r2, [r1, #0]
 8006348:	3101      	adds	r1, #1
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	3301      	adds	r3, #1
 800634e:	2a00      	cmp	r2, #0
 8006350:	d1f9      	bne.n	8006346 <strcpy+0x2>
 8006352:	4770      	bx	lr

08006354 <_write_r>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	0004      	movs	r4, r0
 8006358:	0008      	movs	r0, r1
 800635a:	0011      	movs	r1, r2
 800635c:	001a      	movs	r2, r3
 800635e:	2300      	movs	r3, #0
 8006360:	4d05      	ldr	r5, [pc, #20]	; (8006378 <_write_r+0x24>)
 8006362:	602b      	str	r3, [r5, #0]
 8006364:	f7ff fbdb 	bl	8005b1e <_write>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d103      	bne.n	8006374 <_write_r+0x20>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d000      	beq.n	8006374 <_write_r+0x20>
 8006372:	6023      	str	r3, [r4, #0]
 8006374:	bd70      	pop	{r4, r5, r6, pc}
 8006376:	46c0      	nop			; (mov r8, r8)
 8006378:	200003ec 	.word	0x200003ec

0800637c <_close_r>:
 800637c:	2300      	movs	r3, #0
 800637e:	b570      	push	{r4, r5, r6, lr}
 8006380:	4d06      	ldr	r5, [pc, #24]	; (800639c <_close_r+0x20>)
 8006382:	0004      	movs	r4, r0
 8006384:	0008      	movs	r0, r1
 8006386:	602b      	str	r3, [r5, #0]
 8006388:	f7ff fbf4 	bl	8005b74 <_close>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d103      	bne.n	8006398 <_close_r+0x1c>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d000      	beq.n	8006398 <_close_r+0x1c>
 8006396:	6023      	str	r3, [r4, #0]
 8006398:	bd70      	pop	{r4, r5, r6, pc}
 800639a:	46c0      	nop			; (mov r8, r8)
 800639c:	200003ec 	.word	0x200003ec

080063a0 <__sflush_r>:
 80063a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063a2:	898b      	ldrh	r3, [r1, #12]
 80063a4:	0005      	movs	r5, r0
 80063a6:	000c      	movs	r4, r1
 80063a8:	071a      	lsls	r2, r3, #28
 80063aa:	d45f      	bmi.n	800646c <__sflush_r+0xcc>
 80063ac:	684a      	ldr	r2, [r1, #4]
 80063ae:	2a00      	cmp	r2, #0
 80063b0:	dc04      	bgt.n	80063bc <__sflush_r+0x1c>
 80063b2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80063b4:	2a00      	cmp	r2, #0
 80063b6:	dc01      	bgt.n	80063bc <__sflush_r+0x1c>
 80063b8:	2000      	movs	r0, #0
 80063ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063bc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80063be:	2f00      	cmp	r7, #0
 80063c0:	d0fa      	beq.n	80063b8 <__sflush_r+0x18>
 80063c2:	2200      	movs	r2, #0
 80063c4:	2180      	movs	r1, #128	; 0x80
 80063c6:	682e      	ldr	r6, [r5, #0]
 80063c8:	602a      	str	r2, [r5, #0]
 80063ca:	001a      	movs	r2, r3
 80063cc:	0149      	lsls	r1, r1, #5
 80063ce:	400a      	ands	r2, r1
 80063d0:	420b      	tst	r3, r1
 80063d2:	d034      	beq.n	800643e <__sflush_r+0x9e>
 80063d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	075b      	lsls	r3, r3, #29
 80063da:	d506      	bpl.n	80063ea <__sflush_r+0x4a>
 80063dc:	6863      	ldr	r3, [r4, #4]
 80063de:	1ac0      	subs	r0, r0, r3
 80063e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <__sflush_r+0x4a>
 80063e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063e8:	1ac0      	subs	r0, r0, r3
 80063ea:	0002      	movs	r2, r0
 80063ec:	6a21      	ldr	r1, [r4, #32]
 80063ee:	2300      	movs	r3, #0
 80063f0:	0028      	movs	r0, r5
 80063f2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80063f4:	47b8      	blx	r7
 80063f6:	89a1      	ldrh	r1, [r4, #12]
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d106      	bne.n	800640a <__sflush_r+0x6a>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	2b1d      	cmp	r3, #29
 8006400:	d831      	bhi.n	8006466 <__sflush_r+0xc6>
 8006402:	4a2c      	ldr	r2, [pc, #176]	; (80064b4 <__sflush_r+0x114>)
 8006404:	40da      	lsrs	r2, r3
 8006406:	07d3      	lsls	r3, r2, #31
 8006408:	d52d      	bpl.n	8006466 <__sflush_r+0xc6>
 800640a:	2300      	movs	r3, #0
 800640c:	6063      	str	r3, [r4, #4]
 800640e:	6923      	ldr	r3, [r4, #16]
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	04cb      	lsls	r3, r1, #19
 8006414:	d505      	bpl.n	8006422 <__sflush_r+0x82>
 8006416:	1c43      	adds	r3, r0, #1
 8006418:	d102      	bne.n	8006420 <__sflush_r+0x80>
 800641a:	682b      	ldr	r3, [r5, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d100      	bne.n	8006422 <__sflush_r+0x82>
 8006420:	6560      	str	r0, [r4, #84]	; 0x54
 8006422:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006424:	602e      	str	r6, [r5, #0]
 8006426:	2900      	cmp	r1, #0
 8006428:	d0c6      	beq.n	80063b8 <__sflush_r+0x18>
 800642a:	0023      	movs	r3, r4
 800642c:	3344      	adds	r3, #68	; 0x44
 800642e:	4299      	cmp	r1, r3
 8006430:	d002      	beq.n	8006438 <__sflush_r+0x98>
 8006432:	0028      	movs	r0, r5
 8006434:	f000 f8a4 	bl	8006580 <_free_r>
 8006438:	2000      	movs	r0, #0
 800643a:	6360      	str	r0, [r4, #52]	; 0x34
 800643c:	e7bd      	b.n	80063ba <__sflush_r+0x1a>
 800643e:	2301      	movs	r3, #1
 8006440:	0028      	movs	r0, r5
 8006442:	6a21      	ldr	r1, [r4, #32]
 8006444:	47b8      	blx	r7
 8006446:	1c43      	adds	r3, r0, #1
 8006448:	d1c5      	bne.n	80063d6 <__sflush_r+0x36>
 800644a:	682b      	ldr	r3, [r5, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0c2      	beq.n	80063d6 <__sflush_r+0x36>
 8006450:	2b1d      	cmp	r3, #29
 8006452:	d001      	beq.n	8006458 <__sflush_r+0xb8>
 8006454:	2b16      	cmp	r3, #22
 8006456:	d101      	bne.n	800645c <__sflush_r+0xbc>
 8006458:	602e      	str	r6, [r5, #0]
 800645a:	e7ad      	b.n	80063b8 <__sflush_r+0x18>
 800645c:	2340      	movs	r3, #64	; 0x40
 800645e:	89a2      	ldrh	r2, [r4, #12]
 8006460:	4313      	orrs	r3, r2
 8006462:	81a3      	strh	r3, [r4, #12]
 8006464:	e7a9      	b.n	80063ba <__sflush_r+0x1a>
 8006466:	2340      	movs	r3, #64	; 0x40
 8006468:	430b      	orrs	r3, r1
 800646a:	e7fa      	b.n	8006462 <__sflush_r+0xc2>
 800646c:	690f      	ldr	r7, [r1, #16]
 800646e:	2f00      	cmp	r7, #0
 8006470:	d0a2      	beq.n	80063b8 <__sflush_r+0x18>
 8006472:	680a      	ldr	r2, [r1, #0]
 8006474:	600f      	str	r7, [r1, #0]
 8006476:	1bd2      	subs	r2, r2, r7
 8006478:	9201      	str	r2, [sp, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	079b      	lsls	r3, r3, #30
 800647e:	d100      	bne.n	8006482 <__sflush_r+0xe2>
 8006480:	694a      	ldr	r2, [r1, #20]
 8006482:	60a2      	str	r2, [r4, #8]
 8006484:	9b01      	ldr	r3, [sp, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	dc00      	bgt.n	800648c <__sflush_r+0xec>
 800648a:	e795      	b.n	80063b8 <__sflush_r+0x18>
 800648c:	003a      	movs	r2, r7
 800648e:	0028      	movs	r0, r5
 8006490:	9b01      	ldr	r3, [sp, #4]
 8006492:	6a21      	ldr	r1, [r4, #32]
 8006494:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006496:	47b0      	blx	r6
 8006498:	2800      	cmp	r0, #0
 800649a:	dc06      	bgt.n	80064aa <__sflush_r+0x10a>
 800649c:	2340      	movs	r3, #64	; 0x40
 800649e:	2001      	movs	r0, #1
 80064a0:	89a2      	ldrh	r2, [r4, #12]
 80064a2:	4240      	negs	r0, r0
 80064a4:	4313      	orrs	r3, r2
 80064a6:	81a3      	strh	r3, [r4, #12]
 80064a8:	e787      	b.n	80063ba <__sflush_r+0x1a>
 80064aa:	9b01      	ldr	r3, [sp, #4]
 80064ac:	183f      	adds	r7, r7, r0
 80064ae:	1a1b      	subs	r3, r3, r0
 80064b0:	9301      	str	r3, [sp, #4]
 80064b2:	e7e7      	b.n	8006484 <__sflush_r+0xe4>
 80064b4:	20400001 	.word	0x20400001

080064b8 <_fflush_r>:
 80064b8:	690b      	ldr	r3, [r1, #16]
 80064ba:	b570      	push	{r4, r5, r6, lr}
 80064bc:	0005      	movs	r5, r0
 80064be:	000c      	movs	r4, r1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d102      	bne.n	80064ca <_fflush_r+0x12>
 80064c4:	2500      	movs	r5, #0
 80064c6:	0028      	movs	r0, r5
 80064c8:	bd70      	pop	{r4, r5, r6, pc}
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d004      	beq.n	80064d8 <_fflush_r+0x20>
 80064ce:	6983      	ldr	r3, [r0, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <_fflush_r+0x20>
 80064d4:	f7ff fd50 	bl	8005f78 <__sinit>
 80064d8:	4b14      	ldr	r3, [pc, #80]	; (800652c <_fflush_r+0x74>)
 80064da:	429c      	cmp	r4, r3
 80064dc:	d11b      	bne.n	8006516 <_fflush_r+0x5e>
 80064de:	686c      	ldr	r4, [r5, #4]
 80064e0:	220c      	movs	r2, #12
 80064e2:	5ea3      	ldrsh	r3, [r4, r2]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0ed      	beq.n	80064c4 <_fflush_r+0xc>
 80064e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064ea:	07d2      	lsls	r2, r2, #31
 80064ec:	d404      	bmi.n	80064f8 <_fflush_r+0x40>
 80064ee:	059b      	lsls	r3, r3, #22
 80064f0:	d402      	bmi.n	80064f8 <_fflush_r+0x40>
 80064f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064f4:	f7ff fe05 	bl	8006102 <__retarget_lock_acquire_recursive>
 80064f8:	0028      	movs	r0, r5
 80064fa:	0021      	movs	r1, r4
 80064fc:	f7ff ff50 	bl	80063a0 <__sflush_r>
 8006500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006502:	0005      	movs	r5, r0
 8006504:	07db      	lsls	r3, r3, #31
 8006506:	d4de      	bmi.n	80064c6 <_fflush_r+0xe>
 8006508:	89a3      	ldrh	r3, [r4, #12]
 800650a:	059b      	lsls	r3, r3, #22
 800650c:	d4db      	bmi.n	80064c6 <_fflush_r+0xe>
 800650e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006510:	f7ff fdf8 	bl	8006104 <__retarget_lock_release_recursive>
 8006514:	e7d7      	b.n	80064c6 <_fflush_r+0xe>
 8006516:	4b06      	ldr	r3, [pc, #24]	; (8006530 <_fflush_r+0x78>)
 8006518:	429c      	cmp	r4, r3
 800651a:	d101      	bne.n	8006520 <_fflush_r+0x68>
 800651c:	68ac      	ldr	r4, [r5, #8]
 800651e:	e7df      	b.n	80064e0 <_fflush_r+0x28>
 8006520:	4b04      	ldr	r3, [pc, #16]	; (8006534 <_fflush_r+0x7c>)
 8006522:	429c      	cmp	r4, r3
 8006524:	d1dc      	bne.n	80064e0 <_fflush_r+0x28>
 8006526:	68ec      	ldr	r4, [r5, #12]
 8006528:	e7da      	b.n	80064e0 <_fflush_r+0x28>
 800652a:	46c0      	nop			; (mov r8, r8)
 800652c:	080070c4 	.word	0x080070c4
 8006530:	080070e4 	.word	0x080070e4
 8006534:	080070a4 	.word	0x080070a4

08006538 <_lseek_r>:
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	0004      	movs	r4, r0
 800653c:	0008      	movs	r0, r1
 800653e:	0011      	movs	r1, r2
 8006540:	001a      	movs	r2, r3
 8006542:	2300      	movs	r3, #0
 8006544:	4d05      	ldr	r5, [pc, #20]	; (800655c <_lseek_r+0x24>)
 8006546:	602b      	str	r3, [r5, #0]
 8006548:	f7ff fad5 	bl	8005af6 <_lseek>
 800654c:	1c43      	adds	r3, r0, #1
 800654e:	d103      	bne.n	8006558 <_lseek_r+0x20>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d000      	beq.n	8006558 <_lseek_r+0x20>
 8006556:	6023      	str	r3, [r4, #0]
 8006558:	bd70      	pop	{r4, r5, r6, pc}
 800655a:	46c0      	nop			; (mov r8, r8)
 800655c:	200003ec 	.word	0x200003ec

08006560 <__malloc_lock>:
 8006560:	b510      	push	{r4, lr}
 8006562:	4802      	ldr	r0, [pc, #8]	; (800656c <__malloc_lock+0xc>)
 8006564:	f7ff fdcd 	bl	8006102 <__retarget_lock_acquire_recursive>
 8006568:	bd10      	pop	{r4, pc}
 800656a:	46c0      	nop			; (mov r8, r8)
 800656c:	200003e0 	.word	0x200003e0

08006570 <__malloc_unlock>:
 8006570:	b510      	push	{r4, lr}
 8006572:	4802      	ldr	r0, [pc, #8]	; (800657c <__malloc_unlock+0xc>)
 8006574:	f7ff fdc6 	bl	8006104 <__retarget_lock_release_recursive>
 8006578:	bd10      	pop	{r4, pc}
 800657a:	46c0      	nop			; (mov r8, r8)
 800657c:	200003e0 	.word	0x200003e0

08006580 <_free_r>:
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	0005      	movs	r5, r0
 8006584:	2900      	cmp	r1, #0
 8006586:	d010      	beq.n	80065aa <_free_r+0x2a>
 8006588:	1f0c      	subs	r4, r1, #4
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	da00      	bge.n	8006592 <_free_r+0x12>
 8006590:	18e4      	adds	r4, r4, r3
 8006592:	0028      	movs	r0, r5
 8006594:	f7ff ffe4 	bl	8006560 <__malloc_lock>
 8006598:	4a1d      	ldr	r2, [pc, #116]	; (8006610 <_free_r+0x90>)
 800659a:	6813      	ldr	r3, [r2, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d105      	bne.n	80065ac <_free_r+0x2c>
 80065a0:	6063      	str	r3, [r4, #4]
 80065a2:	6014      	str	r4, [r2, #0]
 80065a4:	0028      	movs	r0, r5
 80065a6:	f7ff ffe3 	bl	8006570 <__malloc_unlock>
 80065aa:	bd70      	pop	{r4, r5, r6, pc}
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	d908      	bls.n	80065c2 <_free_r+0x42>
 80065b0:	6821      	ldr	r1, [r4, #0]
 80065b2:	1860      	adds	r0, r4, r1
 80065b4:	4283      	cmp	r3, r0
 80065b6:	d1f3      	bne.n	80065a0 <_free_r+0x20>
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	1841      	adds	r1, r0, r1
 80065be:	6021      	str	r1, [r4, #0]
 80065c0:	e7ee      	b.n	80065a0 <_free_r+0x20>
 80065c2:	001a      	movs	r2, r3
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <_free_r+0x4e>
 80065ca:	42a3      	cmp	r3, r4
 80065cc:	d9f9      	bls.n	80065c2 <_free_r+0x42>
 80065ce:	6811      	ldr	r1, [r2, #0]
 80065d0:	1850      	adds	r0, r2, r1
 80065d2:	42a0      	cmp	r0, r4
 80065d4:	d10b      	bne.n	80065ee <_free_r+0x6e>
 80065d6:	6820      	ldr	r0, [r4, #0]
 80065d8:	1809      	adds	r1, r1, r0
 80065da:	1850      	adds	r0, r2, r1
 80065dc:	6011      	str	r1, [r2, #0]
 80065de:	4283      	cmp	r3, r0
 80065e0:	d1e0      	bne.n	80065a4 <_free_r+0x24>
 80065e2:	6818      	ldr	r0, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	1841      	adds	r1, r0, r1
 80065e8:	6011      	str	r1, [r2, #0]
 80065ea:	6053      	str	r3, [r2, #4]
 80065ec:	e7da      	b.n	80065a4 <_free_r+0x24>
 80065ee:	42a0      	cmp	r0, r4
 80065f0:	d902      	bls.n	80065f8 <_free_r+0x78>
 80065f2:	230c      	movs	r3, #12
 80065f4:	602b      	str	r3, [r5, #0]
 80065f6:	e7d5      	b.n	80065a4 <_free_r+0x24>
 80065f8:	6821      	ldr	r1, [r4, #0]
 80065fa:	1860      	adds	r0, r4, r1
 80065fc:	4283      	cmp	r3, r0
 80065fe:	d103      	bne.n	8006608 <_free_r+0x88>
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	1841      	adds	r1, r0, r1
 8006606:	6021      	str	r1, [r4, #0]
 8006608:	6063      	str	r3, [r4, #4]
 800660a:	6054      	str	r4, [r2, #4]
 800660c:	e7ca      	b.n	80065a4 <_free_r+0x24>
 800660e:	46c0      	nop			; (mov r8, r8)
 8006610:	200003e4 	.word	0x200003e4

08006614 <__ssputs_r>:
 8006614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006616:	688e      	ldr	r6, [r1, #8]
 8006618:	b085      	sub	sp, #20
 800661a:	0007      	movs	r7, r0
 800661c:	000c      	movs	r4, r1
 800661e:	9203      	str	r2, [sp, #12]
 8006620:	9301      	str	r3, [sp, #4]
 8006622:	429e      	cmp	r6, r3
 8006624:	d83c      	bhi.n	80066a0 <__ssputs_r+0x8c>
 8006626:	2390      	movs	r3, #144	; 0x90
 8006628:	898a      	ldrh	r2, [r1, #12]
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	421a      	tst	r2, r3
 800662e:	d034      	beq.n	800669a <__ssputs_r+0x86>
 8006630:	6909      	ldr	r1, [r1, #16]
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	6960      	ldr	r0, [r4, #20]
 8006636:	1a5b      	subs	r3, r3, r1
 8006638:	9302      	str	r3, [sp, #8]
 800663a:	2303      	movs	r3, #3
 800663c:	4343      	muls	r3, r0
 800663e:	0fdd      	lsrs	r5, r3, #31
 8006640:	18ed      	adds	r5, r5, r3
 8006642:	9b01      	ldr	r3, [sp, #4]
 8006644:	9802      	ldr	r0, [sp, #8]
 8006646:	3301      	adds	r3, #1
 8006648:	181b      	adds	r3, r3, r0
 800664a:	106d      	asrs	r5, r5, #1
 800664c:	42ab      	cmp	r3, r5
 800664e:	d900      	bls.n	8006652 <__ssputs_r+0x3e>
 8006650:	001d      	movs	r5, r3
 8006652:	0553      	lsls	r3, r2, #21
 8006654:	d532      	bpl.n	80066bc <__ssputs_r+0xa8>
 8006656:	0029      	movs	r1, r5
 8006658:	0038      	movs	r0, r7
 800665a:	f7ff fd7f 	bl	800615c <_malloc_r>
 800665e:	1e06      	subs	r6, r0, #0
 8006660:	d109      	bne.n	8006676 <__ssputs_r+0x62>
 8006662:	230c      	movs	r3, #12
 8006664:	603b      	str	r3, [r7, #0]
 8006666:	2340      	movs	r3, #64	; 0x40
 8006668:	2001      	movs	r0, #1
 800666a:	89a2      	ldrh	r2, [r4, #12]
 800666c:	4240      	negs	r0, r0
 800666e:	4313      	orrs	r3, r2
 8006670:	81a3      	strh	r3, [r4, #12]
 8006672:	b005      	add	sp, #20
 8006674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006676:	9a02      	ldr	r2, [sp, #8]
 8006678:	6921      	ldr	r1, [r4, #16]
 800667a:	f000 face 	bl	8006c1a <memcpy>
 800667e:	89a3      	ldrh	r3, [r4, #12]
 8006680:	4a14      	ldr	r2, [pc, #80]	; (80066d4 <__ssputs_r+0xc0>)
 8006682:	401a      	ands	r2, r3
 8006684:	2380      	movs	r3, #128	; 0x80
 8006686:	4313      	orrs	r3, r2
 8006688:	81a3      	strh	r3, [r4, #12]
 800668a:	9b02      	ldr	r3, [sp, #8]
 800668c:	6126      	str	r6, [r4, #16]
 800668e:	18f6      	adds	r6, r6, r3
 8006690:	6026      	str	r6, [r4, #0]
 8006692:	6165      	str	r5, [r4, #20]
 8006694:	9e01      	ldr	r6, [sp, #4]
 8006696:	1aed      	subs	r5, r5, r3
 8006698:	60a5      	str	r5, [r4, #8]
 800669a:	9b01      	ldr	r3, [sp, #4]
 800669c:	429e      	cmp	r6, r3
 800669e:	d900      	bls.n	80066a2 <__ssputs_r+0x8e>
 80066a0:	9e01      	ldr	r6, [sp, #4]
 80066a2:	0032      	movs	r2, r6
 80066a4:	9903      	ldr	r1, [sp, #12]
 80066a6:	6820      	ldr	r0, [r4, #0]
 80066a8:	f000 fac0 	bl	8006c2c <memmove>
 80066ac:	68a3      	ldr	r3, [r4, #8]
 80066ae:	2000      	movs	r0, #0
 80066b0:	1b9b      	subs	r3, r3, r6
 80066b2:	60a3      	str	r3, [r4, #8]
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	199e      	adds	r6, r3, r6
 80066b8:	6026      	str	r6, [r4, #0]
 80066ba:	e7da      	b.n	8006672 <__ssputs_r+0x5e>
 80066bc:	002a      	movs	r2, r5
 80066be:	0038      	movs	r0, r7
 80066c0:	f000 fac7 	bl	8006c52 <_realloc_r>
 80066c4:	1e06      	subs	r6, r0, #0
 80066c6:	d1e0      	bne.n	800668a <__ssputs_r+0x76>
 80066c8:	0038      	movs	r0, r7
 80066ca:	6921      	ldr	r1, [r4, #16]
 80066cc:	f7ff ff58 	bl	8006580 <_free_r>
 80066d0:	e7c7      	b.n	8006662 <__ssputs_r+0x4e>
 80066d2:	46c0      	nop			; (mov r8, r8)
 80066d4:	fffffb7f 	.word	0xfffffb7f

080066d8 <_svfiprintf_r>:
 80066d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066da:	b0a1      	sub	sp, #132	; 0x84
 80066dc:	9003      	str	r0, [sp, #12]
 80066de:	001d      	movs	r5, r3
 80066e0:	898b      	ldrh	r3, [r1, #12]
 80066e2:	000f      	movs	r7, r1
 80066e4:	0016      	movs	r6, r2
 80066e6:	061b      	lsls	r3, r3, #24
 80066e8:	d511      	bpl.n	800670e <_svfiprintf_r+0x36>
 80066ea:	690b      	ldr	r3, [r1, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10e      	bne.n	800670e <_svfiprintf_r+0x36>
 80066f0:	2140      	movs	r1, #64	; 0x40
 80066f2:	f7ff fd33 	bl	800615c <_malloc_r>
 80066f6:	6038      	str	r0, [r7, #0]
 80066f8:	6138      	str	r0, [r7, #16]
 80066fa:	2800      	cmp	r0, #0
 80066fc:	d105      	bne.n	800670a <_svfiprintf_r+0x32>
 80066fe:	230c      	movs	r3, #12
 8006700:	9a03      	ldr	r2, [sp, #12]
 8006702:	3801      	subs	r0, #1
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	b021      	add	sp, #132	; 0x84
 8006708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800670a:	2340      	movs	r3, #64	; 0x40
 800670c:	617b      	str	r3, [r7, #20]
 800670e:	2300      	movs	r3, #0
 8006710:	ac08      	add	r4, sp, #32
 8006712:	6163      	str	r3, [r4, #20]
 8006714:	3320      	adds	r3, #32
 8006716:	7663      	strb	r3, [r4, #25]
 8006718:	3310      	adds	r3, #16
 800671a:	76a3      	strb	r3, [r4, #26]
 800671c:	9507      	str	r5, [sp, #28]
 800671e:	0035      	movs	r5, r6
 8006720:	782b      	ldrb	r3, [r5, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <_svfiprintf_r+0x52>
 8006726:	2b25      	cmp	r3, #37	; 0x25
 8006728:	d147      	bne.n	80067ba <_svfiprintf_r+0xe2>
 800672a:	1bab      	subs	r3, r5, r6
 800672c:	9305      	str	r3, [sp, #20]
 800672e:	42b5      	cmp	r5, r6
 8006730:	d00c      	beq.n	800674c <_svfiprintf_r+0x74>
 8006732:	0032      	movs	r2, r6
 8006734:	0039      	movs	r1, r7
 8006736:	9803      	ldr	r0, [sp, #12]
 8006738:	f7ff ff6c 	bl	8006614 <__ssputs_r>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	d100      	bne.n	8006742 <_svfiprintf_r+0x6a>
 8006740:	e0ae      	b.n	80068a0 <_svfiprintf_r+0x1c8>
 8006742:	6962      	ldr	r2, [r4, #20]
 8006744:	9b05      	ldr	r3, [sp, #20]
 8006746:	4694      	mov	ip, r2
 8006748:	4463      	add	r3, ip
 800674a:	6163      	str	r3, [r4, #20]
 800674c:	782b      	ldrb	r3, [r5, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d100      	bne.n	8006754 <_svfiprintf_r+0x7c>
 8006752:	e0a5      	b.n	80068a0 <_svfiprintf_r+0x1c8>
 8006754:	2201      	movs	r2, #1
 8006756:	2300      	movs	r3, #0
 8006758:	4252      	negs	r2, r2
 800675a:	6062      	str	r2, [r4, #4]
 800675c:	a904      	add	r1, sp, #16
 800675e:	3254      	adds	r2, #84	; 0x54
 8006760:	1852      	adds	r2, r2, r1
 8006762:	1c6e      	adds	r6, r5, #1
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	60e3      	str	r3, [r4, #12]
 8006768:	60a3      	str	r3, [r4, #8]
 800676a:	7013      	strb	r3, [r2, #0]
 800676c:	65a3      	str	r3, [r4, #88]	; 0x58
 800676e:	2205      	movs	r2, #5
 8006770:	7831      	ldrb	r1, [r6, #0]
 8006772:	4854      	ldr	r0, [pc, #336]	; (80068c4 <_svfiprintf_r+0x1ec>)
 8006774:	f000 fa46 	bl	8006c04 <memchr>
 8006778:	1c75      	adds	r5, r6, #1
 800677a:	2800      	cmp	r0, #0
 800677c:	d11f      	bne.n	80067be <_svfiprintf_r+0xe6>
 800677e:	6822      	ldr	r2, [r4, #0]
 8006780:	06d3      	lsls	r3, r2, #27
 8006782:	d504      	bpl.n	800678e <_svfiprintf_r+0xb6>
 8006784:	2353      	movs	r3, #83	; 0x53
 8006786:	a904      	add	r1, sp, #16
 8006788:	185b      	adds	r3, r3, r1
 800678a:	2120      	movs	r1, #32
 800678c:	7019      	strb	r1, [r3, #0]
 800678e:	0713      	lsls	r3, r2, #28
 8006790:	d504      	bpl.n	800679c <_svfiprintf_r+0xc4>
 8006792:	2353      	movs	r3, #83	; 0x53
 8006794:	a904      	add	r1, sp, #16
 8006796:	185b      	adds	r3, r3, r1
 8006798:	212b      	movs	r1, #43	; 0x2b
 800679a:	7019      	strb	r1, [r3, #0]
 800679c:	7833      	ldrb	r3, [r6, #0]
 800679e:	2b2a      	cmp	r3, #42	; 0x2a
 80067a0:	d016      	beq.n	80067d0 <_svfiprintf_r+0xf8>
 80067a2:	0035      	movs	r5, r6
 80067a4:	2100      	movs	r1, #0
 80067a6:	200a      	movs	r0, #10
 80067a8:	68e3      	ldr	r3, [r4, #12]
 80067aa:	782a      	ldrb	r2, [r5, #0]
 80067ac:	1c6e      	adds	r6, r5, #1
 80067ae:	3a30      	subs	r2, #48	; 0x30
 80067b0:	2a09      	cmp	r2, #9
 80067b2:	d94e      	bls.n	8006852 <_svfiprintf_r+0x17a>
 80067b4:	2900      	cmp	r1, #0
 80067b6:	d111      	bne.n	80067dc <_svfiprintf_r+0x104>
 80067b8:	e017      	b.n	80067ea <_svfiprintf_r+0x112>
 80067ba:	3501      	adds	r5, #1
 80067bc:	e7b0      	b.n	8006720 <_svfiprintf_r+0x48>
 80067be:	4b41      	ldr	r3, [pc, #260]	; (80068c4 <_svfiprintf_r+0x1ec>)
 80067c0:	6822      	ldr	r2, [r4, #0]
 80067c2:	1ac0      	subs	r0, r0, r3
 80067c4:	2301      	movs	r3, #1
 80067c6:	4083      	lsls	r3, r0
 80067c8:	4313      	orrs	r3, r2
 80067ca:	002e      	movs	r6, r5
 80067cc:	6023      	str	r3, [r4, #0]
 80067ce:	e7ce      	b.n	800676e <_svfiprintf_r+0x96>
 80067d0:	9b07      	ldr	r3, [sp, #28]
 80067d2:	1d19      	adds	r1, r3, #4
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	9107      	str	r1, [sp, #28]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	db01      	blt.n	80067e0 <_svfiprintf_r+0x108>
 80067dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80067de:	e004      	b.n	80067ea <_svfiprintf_r+0x112>
 80067e0:	425b      	negs	r3, r3
 80067e2:	60e3      	str	r3, [r4, #12]
 80067e4:	2302      	movs	r3, #2
 80067e6:	4313      	orrs	r3, r2
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	782b      	ldrb	r3, [r5, #0]
 80067ec:	2b2e      	cmp	r3, #46	; 0x2e
 80067ee:	d10a      	bne.n	8006806 <_svfiprintf_r+0x12e>
 80067f0:	786b      	ldrb	r3, [r5, #1]
 80067f2:	2b2a      	cmp	r3, #42	; 0x2a
 80067f4:	d135      	bne.n	8006862 <_svfiprintf_r+0x18a>
 80067f6:	9b07      	ldr	r3, [sp, #28]
 80067f8:	3502      	adds	r5, #2
 80067fa:	1d1a      	adds	r2, r3, #4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	9207      	str	r2, [sp, #28]
 8006800:	2b00      	cmp	r3, #0
 8006802:	db2b      	blt.n	800685c <_svfiprintf_r+0x184>
 8006804:	9309      	str	r3, [sp, #36]	; 0x24
 8006806:	4e30      	ldr	r6, [pc, #192]	; (80068c8 <_svfiprintf_r+0x1f0>)
 8006808:	2203      	movs	r2, #3
 800680a:	0030      	movs	r0, r6
 800680c:	7829      	ldrb	r1, [r5, #0]
 800680e:	f000 f9f9 	bl	8006c04 <memchr>
 8006812:	2800      	cmp	r0, #0
 8006814:	d006      	beq.n	8006824 <_svfiprintf_r+0x14c>
 8006816:	2340      	movs	r3, #64	; 0x40
 8006818:	1b80      	subs	r0, r0, r6
 800681a:	4083      	lsls	r3, r0
 800681c:	6822      	ldr	r2, [r4, #0]
 800681e:	3501      	adds	r5, #1
 8006820:	4313      	orrs	r3, r2
 8006822:	6023      	str	r3, [r4, #0]
 8006824:	7829      	ldrb	r1, [r5, #0]
 8006826:	2206      	movs	r2, #6
 8006828:	4828      	ldr	r0, [pc, #160]	; (80068cc <_svfiprintf_r+0x1f4>)
 800682a:	1c6e      	adds	r6, r5, #1
 800682c:	7621      	strb	r1, [r4, #24]
 800682e:	f000 f9e9 	bl	8006c04 <memchr>
 8006832:	2800      	cmp	r0, #0
 8006834:	d03c      	beq.n	80068b0 <_svfiprintf_r+0x1d8>
 8006836:	4b26      	ldr	r3, [pc, #152]	; (80068d0 <_svfiprintf_r+0x1f8>)
 8006838:	2b00      	cmp	r3, #0
 800683a:	d125      	bne.n	8006888 <_svfiprintf_r+0x1b0>
 800683c:	2207      	movs	r2, #7
 800683e:	9b07      	ldr	r3, [sp, #28]
 8006840:	3307      	adds	r3, #7
 8006842:	4393      	bics	r3, r2
 8006844:	3308      	adds	r3, #8
 8006846:	9307      	str	r3, [sp, #28]
 8006848:	6963      	ldr	r3, [r4, #20]
 800684a:	9a04      	ldr	r2, [sp, #16]
 800684c:	189b      	adds	r3, r3, r2
 800684e:	6163      	str	r3, [r4, #20]
 8006850:	e765      	b.n	800671e <_svfiprintf_r+0x46>
 8006852:	4343      	muls	r3, r0
 8006854:	0035      	movs	r5, r6
 8006856:	2101      	movs	r1, #1
 8006858:	189b      	adds	r3, r3, r2
 800685a:	e7a6      	b.n	80067aa <_svfiprintf_r+0xd2>
 800685c:	2301      	movs	r3, #1
 800685e:	425b      	negs	r3, r3
 8006860:	e7d0      	b.n	8006804 <_svfiprintf_r+0x12c>
 8006862:	2300      	movs	r3, #0
 8006864:	200a      	movs	r0, #10
 8006866:	001a      	movs	r2, r3
 8006868:	3501      	adds	r5, #1
 800686a:	6063      	str	r3, [r4, #4]
 800686c:	7829      	ldrb	r1, [r5, #0]
 800686e:	1c6e      	adds	r6, r5, #1
 8006870:	3930      	subs	r1, #48	; 0x30
 8006872:	2909      	cmp	r1, #9
 8006874:	d903      	bls.n	800687e <_svfiprintf_r+0x1a6>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0c5      	beq.n	8006806 <_svfiprintf_r+0x12e>
 800687a:	9209      	str	r2, [sp, #36]	; 0x24
 800687c:	e7c3      	b.n	8006806 <_svfiprintf_r+0x12e>
 800687e:	4342      	muls	r2, r0
 8006880:	0035      	movs	r5, r6
 8006882:	2301      	movs	r3, #1
 8006884:	1852      	adds	r2, r2, r1
 8006886:	e7f1      	b.n	800686c <_svfiprintf_r+0x194>
 8006888:	ab07      	add	r3, sp, #28
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	003a      	movs	r2, r7
 800688e:	0021      	movs	r1, r4
 8006890:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <_svfiprintf_r+0x1fc>)
 8006892:	9803      	ldr	r0, [sp, #12]
 8006894:	e000      	b.n	8006898 <_svfiprintf_r+0x1c0>
 8006896:	bf00      	nop
 8006898:	9004      	str	r0, [sp, #16]
 800689a:	9b04      	ldr	r3, [sp, #16]
 800689c:	3301      	adds	r3, #1
 800689e:	d1d3      	bne.n	8006848 <_svfiprintf_r+0x170>
 80068a0:	89bb      	ldrh	r3, [r7, #12]
 80068a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80068a4:	065b      	lsls	r3, r3, #25
 80068a6:	d400      	bmi.n	80068aa <_svfiprintf_r+0x1d2>
 80068a8:	e72d      	b.n	8006706 <_svfiprintf_r+0x2e>
 80068aa:	2001      	movs	r0, #1
 80068ac:	4240      	negs	r0, r0
 80068ae:	e72a      	b.n	8006706 <_svfiprintf_r+0x2e>
 80068b0:	ab07      	add	r3, sp, #28
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	003a      	movs	r2, r7
 80068b6:	0021      	movs	r1, r4
 80068b8:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <_svfiprintf_r+0x1fc>)
 80068ba:	9803      	ldr	r0, [sp, #12]
 80068bc:	f000 f87c 	bl	80069b8 <_printf_i>
 80068c0:	e7ea      	b.n	8006898 <_svfiprintf_r+0x1c0>
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	08007108 	.word	0x08007108
 80068c8:	0800710e 	.word	0x0800710e
 80068cc:	08007112 	.word	0x08007112
 80068d0:	00000000 	.word	0x00000000
 80068d4:	08006615 	.word	0x08006615

080068d8 <_printf_common>:
 80068d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068da:	0015      	movs	r5, r2
 80068dc:	9301      	str	r3, [sp, #4]
 80068de:	688a      	ldr	r2, [r1, #8]
 80068e0:	690b      	ldr	r3, [r1, #16]
 80068e2:	000c      	movs	r4, r1
 80068e4:	9000      	str	r0, [sp, #0]
 80068e6:	4293      	cmp	r3, r2
 80068e8:	da00      	bge.n	80068ec <_printf_common+0x14>
 80068ea:	0013      	movs	r3, r2
 80068ec:	0022      	movs	r2, r4
 80068ee:	602b      	str	r3, [r5, #0]
 80068f0:	3243      	adds	r2, #67	; 0x43
 80068f2:	7812      	ldrb	r2, [r2, #0]
 80068f4:	2a00      	cmp	r2, #0
 80068f6:	d001      	beq.n	80068fc <_printf_common+0x24>
 80068f8:	3301      	adds	r3, #1
 80068fa:	602b      	str	r3, [r5, #0]
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	069b      	lsls	r3, r3, #26
 8006900:	d502      	bpl.n	8006908 <_printf_common+0x30>
 8006902:	682b      	ldr	r3, [r5, #0]
 8006904:	3302      	adds	r3, #2
 8006906:	602b      	str	r3, [r5, #0]
 8006908:	6822      	ldr	r2, [r4, #0]
 800690a:	2306      	movs	r3, #6
 800690c:	0017      	movs	r7, r2
 800690e:	401f      	ands	r7, r3
 8006910:	421a      	tst	r2, r3
 8006912:	d027      	beq.n	8006964 <_printf_common+0x8c>
 8006914:	0023      	movs	r3, r4
 8006916:	3343      	adds	r3, #67	; 0x43
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	1e5a      	subs	r2, r3, #1
 800691c:	4193      	sbcs	r3, r2
 800691e:	6822      	ldr	r2, [r4, #0]
 8006920:	0692      	lsls	r2, r2, #26
 8006922:	d430      	bmi.n	8006986 <_printf_common+0xae>
 8006924:	0022      	movs	r2, r4
 8006926:	9901      	ldr	r1, [sp, #4]
 8006928:	9800      	ldr	r0, [sp, #0]
 800692a:	9e08      	ldr	r6, [sp, #32]
 800692c:	3243      	adds	r2, #67	; 0x43
 800692e:	47b0      	blx	r6
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d025      	beq.n	8006980 <_printf_common+0xa8>
 8006934:	2306      	movs	r3, #6
 8006936:	6820      	ldr	r0, [r4, #0]
 8006938:	682a      	ldr	r2, [r5, #0]
 800693a:	68e1      	ldr	r1, [r4, #12]
 800693c:	2500      	movs	r5, #0
 800693e:	4003      	ands	r3, r0
 8006940:	2b04      	cmp	r3, #4
 8006942:	d103      	bne.n	800694c <_printf_common+0x74>
 8006944:	1a8d      	subs	r5, r1, r2
 8006946:	43eb      	mvns	r3, r5
 8006948:	17db      	asrs	r3, r3, #31
 800694a:	401d      	ands	r5, r3
 800694c:	68a3      	ldr	r3, [r4, #8]
 800694e:	6922      	ldr	r2, [r4, #16]
 8006950:	4293      	cmp	r3, r2
 8006952:	dd01      	ble.n	8006958 <_printf_common+0x80>
 8006954:	1a9b      	subs	r3, r3, r2
 8006956:	18ed      	adds	r5, r5, r3
 8006958:	2700      	movs	r7, #0
 800695a:	42bd      	cmp	r5, r7
 800695c:	d120      	bne.n	80069a0 <_printf_common+0xc8>
 800695e:	2000      	movs	r0, #0
 8006960:	e010      	b.n	8006984 <_printf_common+0xac>
 8006962:	3701      	adds	r7, #1
 8006964:	68e3      	ldr	r3, [r4, #12]
 8006966:	682a      	ldr	r2, [r5, #0]
 8006968:	1a9b      	subs	r3, r3, r2
 800696a:	42bb      	cmp	r3, r7
 800696c:	ddd2      	ble.n	8006914 <_printf_common+0x3c>
 800696e:	0022      	movs	r2, r4
 8006970:	2301      	movs	r3, #1
 8006972:	9901      	ldr	r1, [sp, #4]
 8006974:	9800      	ldr	r0, [sp, #0]
 8006976:	9e08      	ldr	r6, [sp, #32]
 8006978:	3219      	adds	r2, #25
 800697a:	47b0      	blx	r6
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d1f0      	bne.n	8006962 <_printf_common+0x8a>
 8006980:	2001      	movs	r0, #1
 8006982:	4240      	negs	r0, r0
 8006984:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006986:	2030      	movs	r0, #48	; 0x30
 8006988:	18e1      	adds	r1, r4, r3
 800698a:	3143      	adds	r1, #67	; 0x43
 800698c:	7008      	strb	r0, [r1, #0]
 800698e:	0021      	movs	r1, r4
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	3145      	adds	r1, #69	; 0x45
 8006994:	7809      	ldrb	r1, [r1, #0]
 8006996:	18a2      	adds	r2, r4, r2
 8006998:	3243      	adds	r2, #67	; 0x43
 800699a:	3302      	adds	r3, #2
 800699c:	7011      	strb	r1, [r2, #0]
 800699e:	e7c1      	b.n	8006924 <_printf_common+0x4c>
 80069a0:	0022      	movs	r2, r4
 80069a2:	2301      	movs	r3, #1
 80069a4:	9901      	ldr	r1, [sp, #4]
 80069a6:	9800      	ldr	r0, [sp, #0]
 80069a8:	9e08      	ldr	r6, [sp, #32]
 80069aa:	321a      	adds	r2, #26
 80069ac:	47b0      	blx	r6
 80069ae:	1c43      	adds	r3, r0, #1
 80069b0:	d0e6      	beq.n	8006980 <_printf_common+0xa8>
 80069b2:	3701      	adds	r7, #1
 80069b4:	e7d1      	b.n	800695a <_printf_common+0x82>
	...

080069b8 <_printf_i>:
 80069b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ba:	b08b      	sub	sp, #44	; 0x2c
 80069bc:	9206      	str	r2, [sp, #24]
 80069be:	000a      	movs	r2, r1
 80069c0:	3243      	adds	r2, #67	; 0x43
 80069c2:	9307      	str	r3, [sp, #28]
 80069c4:	9005      	str	r0, [sp, #20]
 80069c6:	9204      	str	r2, [sp, #16]
 80069c8:	7e0a      	ldrb	r2, [r1, #24]
 80069ca:	000c      	movs	r4, r1
 80069cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069ce:	2a78      	cmp	r2, #120	; 0x78
 80069d0:	d807      	bhi.n	80069e2 <_printf_i+0x2a>
 80069d2:	2a62      	cmp	r2, #98	; 0x62
 80069d4:	d809      	bhi.n	80069ea <_printf_i+0x32>
 80069d6:	2a00      	cmp	r2, #0
 80069d8:	d100      	bne.n	80069dc <_printf_i+0x24>
 80069da:	e0c1      	b.n	8006b60 <_printf_i+0x1a8>
 80069dc:	2a58      	cmp	r2, #88	; 0x58
 80069de:	d100      	bne.n	80069e2 <_printf_i+0x2a>
 80069e0:	e08c      	b.n	8006afc <_printf_i+0x144>
 80069e2:	0026      	movs	r6, r4
 80069e4:	3642      	adds	r6, #66	; 0x42
 80069e6:	7032      	strb	r2, [r6, #0]
 80069e8:	e022      	b.n	8006a30 <_printf_i+0x78>
 80069ea:	0010      	movs	r0, r2
 80069ec:	3863      	subs	r0, #99	; 0x63
 80069ee:	2815      	cmp	r0, #21
 80069f0:	d8f7      	bhi.n	80069e2 <_printf_i+0x2a>
 80069f2:	f7f9 fb9b 	bl	800012c <__gnu_thumb1_case_shi>
 80069f6:	0016      	.short	0x0016
 80069f8:	fff6001f 	.word	0xfff6001f
 80069fc:	fff6fff6 	.word	0xfff6fff6
 8006a00:	001ffff6 	.word	0x001ffff6
 8006a04:	fff6fff6 	.word	0xfff6fff6
 8006a08:	fff6fff6 	.word	0xfff6fff6
 8006a0c:	003600a8 	.word	0x003600a8
 8006a10:	fff6009a 	.word	0xfff6009a
 8006a14:	00b9fff6 	.word	0x00b9fff6
 8006a18:	0036fff6 	.word	0x0036fff6
 8006a1c:	fff6fff6 	.word	0xfff6fff6
 8006a20:	009e      	.short	0x009e
 8006a22:	0026      	movs	r6, r4
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	3642      	adds	r6, #66	; 0x42
 8006a28:	1d11      	adds	r1, r2, #4
 8006a2a:	6019      	str	r1, [r3, #0]
 8006a2c:	6813      	ldr	r3, [r2, #0]
 8006a2e:	7033      	strb	r3, [r6, #0]
 8006a30:	2301      	movs	r3, #1
 8006a32:	e0a7      	b.n	8006b84 <_printf_i+0x1cc>
 8006a34:	6808      	ldr	r0, [r1, #0]
 8006a36:	6819      	ldr	r1, [r3, #0]
 8006a38:	1d0a      	adds	r2, r1, #4
 8006a3a:	0605      	lsls	r5, r0, #24
 8006a3c:	d50b      	bpl.n	8006a56 <_printf_i+0x9e>
 8006a3e:	680d      	ldr	r5, [r1, #0]
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	2d00      	cmp	r5, #0
 8006a44:	da03      	bge.n	8006a4e <_printf_i+0x96>
 8006a46:	232d      	movs	r3, #45	; 0x2d
 8006a48:	9a04      	ldr	r2, [sp, #16]
 8006a4a:	426d      	negs	r5, r5
 8006a4c:	7013      	strb	r3, [r2, #0]
 8006a4e:	4b61      	ldr	r3, [pc, #388]	; (8006bd4 <_printf_i+0x21c>)
 8006a50:	270a      	movs	r7, #10
 8006a52:	9303      	str	r3, [sp, #12]
 8006a54:	e01b      	b.n	8006a8e <_printf_i+0xd6>
 8006a56:	680d      	ldr	r5, [r1, #0]
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	0641      	lsls	r1, r0, #25
 8006a5c:	d5f1      	bpl.n	8006a42 <_printf_i+0x8a>
 8006a5e:	b22d      	sxth	r5, r5
 8006a60:	e7ef      	b.n	8006a42 <_printf_i+0x8a>
 8006a62:	680d      	ldr	r5, [r1, #0]
 8006a64:	6819      	ldr	r1, [r3, #0]
 8006a66:	1d08      	adds	r0, r1, #4
 8006a68:	6018      	str	r0, [r3, #0]
 8006a6a:	062e      	lsls	r6, r5, #24
 8006a6c:	d501      	bpl.n	8006a72 <_printf_i+0xba>
 8006a6e:	680d      	ldr	r5, [r1, #0]
 8006a70:	e003      	b.n	8006a7a <_printf_i+0xc2>
 8006a72:	066d      	lsls	r5, r5, #25
 8006a74:	d5fb      	bpl.n	8006a6e <_printf_i+0xb6>
 8006a76:	680d      	ldr	r5, [r1, #0]
 8006a78:	b2ad      	uxth	r5, r5
 8006a7a:	4b56      	ldr	r3, [pc, #344]	; (8006bd4 <_printf_i+0x21c>)
 8006a7c:	2708      	movs	r7, #8
 8006a7e:	9303      	str	r3, [sp, #12]
 8006a80:	2a6f      	cmp	r2, #111	; 0x6f
 8006a82:	d000      	beq.n	8006a86 <_printf_i+0xce>
 8006a84:	3702      	adds	r7, #2
 8006a86:	0023      	movs	r3, r4
 8006a88:	2200      	movs	r2, #0
 8006a8a:	3343      	adds	r3, #67	; 0x43
 8006a8c:	701a      	strb	r2, [r3, #0]
 8006a8e:	6863      	ldr	r3, [r4, #4]
 8006a90:	60a3      	str	r3, [r4, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	db03      	blt.n	8006a9e <_printf_i+0xe6>
 8006a96:	2204      	movs	r2, #4
 8006a98:	6821      	ldr	r1, [r4, #0]
 8006a9a:	4391      	bics	r1, r2
 8006a9c:	6021      	str	r1, [r4, #0]
 8006a9e:	2d00      	cmp	r5, #0
 8006aa0:	d102      	bne.n	8006aa8 <_printf_i+0xf0>
 8006aa2:	9e04      	ldr	r6, [sp, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00c      	beq.n	8006ac2 <_printf_i+0x10a>
 8006aa8:	9e04      	ldr	r6, [sp, #16]
 8006aaa:	0028      	movs	r0, r5
 8006aac:	0039      	movs	r1, r7
 8006aae:	f7f9 fbcd 	bl	800024c <__aeabi_uidivmod>
 8006ab2:	9b03      	ldr	r3, [sp, #12]
 8006ab4:	3e01      	subs	r6, #1
 8006ab6:	5c5b      	ldrb	r3, [r3, r1]
 8006ab8:	7033      	strb	r3, [r6, #0]
 8006aba:	002b      	movs	r3, r5
 8006abc:	0005      	movs	r5, r0
 8006abe:	429f      	cmp	r7, r3
 8006ac0:	d9f3      	bls.n	8006aaa <_printf_i+0xf2>
 8006ac2:	2f08      	cmp	r7, #8
 8006ac4:	d109      	bne.n	8006ada <_printf_i+0x122>
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	07db      	lsls	r3, r3, #31
 8006aca:	d506      	bpl.n	8006ada <_printf_i+0x122>
 8006acc:	6863      	ldr	r3, [r4, #4]
 8006ace:	6922      	ldr	r2, [r4, #16]
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	dc02      	bgt.n	8006ada <_printf_i+0x122>
 8006ad4:	2330      	movs	r3, #48	; 0x30
 8006ad6:	3e01      	subs	r6, #1
 8006ad8:	7033      	strb	r3, [r6, #0]
 8006ada:	9b04      	ldr	r3, [sp, #16]
 8006adc:	1b9b      	subs	r3, r3, r6
 8006ade:	6123      	str	r3, [r4, #16]
 8006ae0:	9b07      	ldr	r3, [sp, #28]
 8006ae2:	0021      	movs	r1, r4
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	9805      	ldr	r0, [sp, #20]
 8006ae8:	9b06      	ldr	r3, [sp, #24]
 8006aea:	aa09      	add	r2, sp, #36	; 0x24
 8006aec:	f7ff fef4 	bl	80068d8 <_printf_common>
 8006af0:	1c43      	adds	r3, r0, #1
 8006af2:	d14c      	bne.n	8006b8e <_printf_i+0x1d6>
 8006af4:	2001      	movs	r0, #1
 8006af6:	4240      	negs	r0, r0
 8006af8:	b00b      	add	sp, #44	; 0x2c
 8006afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006afc:	3145      	adds	r1, #69	; 0x45
 8006afe:	700a      	strb	r2, [r1, #0]
 8006b00:	4a34      	ldr	r2, [pc, #208]	; (8006bd4 <_printf_i+0x21c>)
 8006b02:	9203      	str	r2, [sp, #12]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	6821      	ldr	r1, [r4, #0]
 8006b08:	ca20      	ldmia	r2!, {r5}
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	0608      	lsls	r0, r1, #24
 8006b0e:	d516      	bpl.n	8006b3e <_printf_i+0x186>
 8006b10:	07cb      	lsls	r3, r1, #31
 8006b12:	d502      	bpl.n	8006b1a <_printf_i+0x162>
 8006b14:	2320      	movs	r3, #32
 8006b16:	4319      	orrs	r1, r3
 8006b18:	6021      	str	r1, [r4, #0]
 8006b1a:	2710      	movs	r7, #16
 8006b1c:	2d00      	cmp	r5, #0
 8006b1e:	d1b2      	bne.n	8006a86 <_printf_i+0xce>
 8006b20:	2320      	movs	r3, #32
 8006b22:	6822      	ldr	r2, [r4, #0]
 8006b24:	439a      	bics	r2, r3
 8006b26:	6022      	str	r2, [r4, #0]
 8006b28:	e7ad      	b.n	8006a86 <_printf_i+0xce>
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	6809      	ldr	r1, [r1, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	6022      	str	r2, [r4, #0]
 8006b32:	0022      	movs	r2, r4
 8006b34:	2178      	movs	r1, #120	; 0x78
 8006b36:	3245      	adds	r2, #69	; 0x45
 8006b38:	7011      	strb	r1, [r2, #0]
 8006b3a:	4a27      	ldr	r2, [pc, #156]	; (8006bd8 <_printf_i+0x220>)
 8006b3c:	e7e1      	b.n	8006b02 <_printf_i+0x14a>
 8006b3e:	0648      	lsls	r0, r1, #25
 8006b40:	d5e6      	bpl.n	8006b10 <_printf_i+0x158>
 8006b42:	b2ad      	uxth	r5, r5
 8006b44:	e7e4      	b.n	8006b10 <_printf_i+0x158>
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	680d      	ldr	r5, [r1, #0]
 8006b4a:	1d10      	adds	r0, r2, #4
 8006b4c:	6949      	ldr	r1, [r1, #20]
 8006b4e:	6018      	str	r0, [r3, #0]
 8006b50:	6813      	ldr	r3, [r2, #0]
 8006b52:	062e      	lsls	r6, r5, #24
 8006b54:	d501      	bpl.n	8006b5a <_printf_i+0x1a2>
 8006b56:	6019      	str	r1, [r3, #0]
 8006b58:	e002      	b.n	8006b60 <_printf_i+0x1a8>
 8006b5a:	066d      	lsls	r5, r5, #25
 8006b5c:	d5fb      	bpl.n	8006b56 <_printf_i+0x19e>
 8006b5e:	8019      	strh	r1, [r3, #0]
 8006b60:	2300      	movs	r3, #0
 8006b62:	9e04      	ldr	r6, [sp, #16]
 8006b64:	6123      	str	r3, [r4, #16]
 8006b66:	e7bb      	b.n	8006ae0 <_printf_i+0x128>
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	1d11      	adds	r1, r2, #4
 8006b6c:	6019      	str	r1, [r3, #0]
 8006b6e:	6816      	ldr	r6, [r2, #0]
 8006b70:	2100      	movs	r1, #0
 8006b72:	0030      	movs	r0, r6
 8006b74:	6862      	ldr	r2, [r4, #4]
 8006b76:	f000 f845 	bl	8006c04 <memchr>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	d001      	beq.n	8006b82 <_printf_i+0x1ca>
 8006b7e:	1b80      	subs	r0, r0, r6
 8006b80:	6060      	str	r0, [r4, #4]
 8006b82:	6863      	ldr	r3, [r4, #4]
 8006b84:	6123      	str	r3, [r4, #16]
 8006b86:	2300      	movs	r3, #0
 8006b88:	9a04      	ldr	r2, [sp, #16]
 8006b8a:	7013      	strb	r3, [r2, #0]
 8006b8c:	e7a8      	b.n	8006ae0 <_printf_i+0x128>
 8006b8e:	6923      	ldr	r3, [r4, #16]
 8006b90:	0032      	movs	r2, r6
 8006b92:	9906      	ldr	r1, [sp, #24]
 8006b94:	9805      	ldr	r0, [sp, #20]
 8006b96:	9d07      	ldr	r5, [sp, #28]
 8006b98:	47a8      	blx	r5
 8006b9a:	1c43      	adds	r3, r0, #1
 8006b9c:	d0aa      	beq.n	8006af4 <_printf_i+0x13c>
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	079b      	lsls	r3, r3, #30
 8006ba2:	d415      	bmi.n	8006bd0 <_printf_i+0x218>
 8006ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba6:	68e0      	ldr	r0, [r4, #12]
 8006ba8:	4298      	cmp	r0, r3
 8006baa:	daa5      	bge.n	8006af8 <_printf_i+0x140>
 8006bac:	0018      	movs	r0, r3
 8006bae:	e7a3      	b.n	8006af8 <_printf_i+0x140>
 8006bb0:	0022      	movs	r2, r4
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	9906      	ldr	r1, [sp, #24]
 8006bb6:	9805      	ldr	r0, [sp, #20]
 8006bb8:	9e07      	ldr	r6, [sp, #28]
 8006bba:	3219      	adds	r2, #25
 8006bbc:	47b0      	blx	r6
 8006bbe:	1c43      	adds	r3, r0, #1
 8006bc0:	d098      	beq.n	8006af4 <_printf_i+0x13c>
 8006bc2:	3501      	adds	r5, #1
 8006bc4:	68e3      	ldr	r3, [r4, #12]
 8006bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bc8:	1a9b      	subs	r3, r3, r2
 8006bca:	42ab      	cmp	r3, r5
 8006bcc:	dcf0      	bgt.n	8006bb0 <_printf_i+0x1f8>
 8006bce:	e7e9      	b.n	8006ba4 <_printf_i+0x1ec>
 8006bd0:	2500      	movs	r5, #0
 8006bd2:	e7f7      	b.n	8006bc4 <_printf_i+0x20c>
 8006bd4:	08007119 	.word	0x08007119
 8006bd8:	0800712a 	.word	0x0800712a

08006bdc <_read_r>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	0004      	movs	r4, r0
 8006be0:	0008      	movs	r0, r1
 8006be2:	0011      	movs	r1, r2
 8006be4:	001a      	movs	r2, r3
 8006be6:	2300      	movs	r3, #0
 8006be8:	4d05      	ldr	r5, [pc, #20]	; (8006c00 <_read_r+0x24>)
 8006bea:	602b      	str	r3, [r5, #0]
 8006bec:	f7fe ff2e 	bl	8005a4c <_read>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d103      	bne.n	8006bfc <_read_r+0x20>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d000      	beq.n	8006bfc <_read_r+0x20>
 8006bfa:	6023      	str	r3, [r4, #0]
 8006bfc:	bd70      	pop	{r4, r5, r6, pc}
 8006bfe:	46c0      	nop			; (mov r8, r8)
 8006c00:	200003ec 	.word	0x200003ec

08006c04 <memchr>:
 8006c04:	b2c9      	uxtb	r1, r1
 8006c06:	1882      	adds	r2, r0, r2
 8006c08:	4290      	cmp	r0, r2
 8006c0a:	d101      	bne.n	8006c10 <memchr+0xc>
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	4770      	bx	lr
 8006c10:	7803      	ldrb	r3, [r0, #0]
 8006c12:	428b      	cmp	r3, r1
 8006c14:	d0fb      	beq.n	8006c0e <memchr+0xa>
 8006c16:	3001      	adds	r0, #1
 8006c18:	e7f6      	b.n	8006c08 <memchr+0x4>

08006c1a <memcpy>:
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	b510      	push	{r4, lr}
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d100      	bne.n	8006c24 <memcpy+0xa>
 8006c22:	bd10      	pop	{r4, pc}
 8006c24:	5ccc      	ldrb	r4, [r1, r3]
 8006c26:	54c4      	strb	r4, [r0, r3]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	e7f8      	b.n	8006c1e <memcpy+0x4>

08006c2c <memmove>:
 8006c2c:	b510      	push	{r4, lr}
 8006c2e:	4288      	cmp	r0, r1
 8006c30:	d902      	bls.n	8006c38 <memmove+0xc>
 8006c32:	188b      	adds	r3, r1, r2
 8006c34:	4298      	cmp	r0, r3
 8006c36:	d303      	bcc.n	8006c40 <memmove+0x14>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e007      	b.n	8006c4c <memmove+0x20>
 8006c3c:	5c8b      	ldrb	r3, [r1, r2]
 8006c3e:	5483      	strb	r3, [r0, r2]
 8006c40:	3a01      	subs	r2, #1
 8006c42:	d2fb      	bcs.n	8006c3c <memmove+0x10>
 8006c44:	bd10      	pop	{r4, pc}
 8006c46:	5ccc      	ldrb	r4, [r1, r3]
 8006c48:	54c4      	strb	r4, [r0, r3]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d1fa      	bne.n	8006c46 <memmove+0x1a>
 8006c50:	e7f8      	b.n	8006c44 <memmove+0x18>

08006c52 <_realloc_r>:
 8006c52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c54:	0007      	movs	r7, r0
 8006c56:	000e      	movs	r6, r1
 8006c58:	0014      	movs	r4, r2
 8006c5a:	2900      	cmp	r1, #0
 8006c5c:	d105      	bne.n	8006c6a <_realloc_r+0x18>
 8006c5e:	0011      	movs	r1, r2
 8006c60:	f7ff fa7c 	bl	800615c <_malloc_r>
 8006c64:	0005      	movs	r5, r0
 8006c66:	0028      	movs	r0, r5
 8006c68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c6a:	2a00      	cmp	r2, #0
 8006c6c:	d103      	bne.n	8006c76 <_realloc_r+0x24>
 8006c6e:	f7ff fc87 	bl	8006580 <_free_r>
 8006c72:	0025      	movs	r5, r4
 8006c74:	e7f7      	b.n	8006c66 <_realloc_r+0x14>
 8006c76:	f000 f81b 	bl	8006cb0 <_malloc_usable_size_r>
 8006c7a:	9001      	str	r0, [sp, #4]
 8006c7c:	4284      	cmp	r4, r0
 8006c7e:	d803      	bhi.n	8006c88 <_realloc_r+0x36>
 8006c80:	0035      	movs	r5, r6
 8006c82:	0843      	lsrs	r3, r0, #1
 8006c84:	42a3      	cmp	r3, r4
 8006c86:	d3ee      	bcc.n	8006c66 <_realloc_r+0x14>
 8006c88:	0021      	movs	r1, r4
 8006c8a:	0038      	movs	r0, r7
 8006c8c:	f7ff fa66 	bl	800615c <_malloc_r>
 8006c90:	1e05      	subs	r5, r0, #0
 8006c92:	d0e8      	beq.n	8006c66 <_realloc_r+0x14>
 8006c94:	9b01      	ldr	r3, [sp, #4]
 8006c96:	0022      	movs	r2, r4
 8006c98:	429c      	cmp	r4, r3
 8006c9a:	d900      	bls.n	8006c9e <_realloc_r+0x4c>
 8006c9c:	001a      	movs	r2, r3
 8006c9e:	0031      	movs	r1, r6
 8006ca0:	0028      	movs	r0, r5
 8006ca2:	f7ff ffba 	bl	8006c1a <memcpy>
 8006ca6:	0031      	movs	r1, r6
 8006ca8:	0038      	movs	r0, r7
 8006caa:	f7ff fc69 	bl	8006580 <_free_r>
 8006cae:	e7da      	b.n	8006c66 <_realloc_r+0x14>

08006cb0 <_malloc_usable_size_r>:
 8006cb0:	1f0b      	subs	r3, r1, #4
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	1f18      	subs	r0, r3, #4
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	da01      	bge.n	8006cbe <_malloc_usable_size_r+0xe>
 8006cba:	580b      	ldr	r3, [r1, r0]
 8006cbc:	18c0      	adds	r0, r0, r3
 8006cbe:	4770      	bx	lr

08006cc0 <_init>:
 8006cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc2:	46c0      	nop			; (mov r8, r8)
 8006cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc6:	bc08      	pop	{r3}
 8006cc8:	469e      	mov	lr, r3
 8006cca:	4770      	bx	lr

08006ccc <_fini>:
 8006ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cce:	46c0      	nop			; (mov r8, r8)
 8006cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cd2:	bc08      	pop	{r3}
 8006cd4:	469e      	mov	lr, r3
 8006cd6:	4770      	bx	lr
